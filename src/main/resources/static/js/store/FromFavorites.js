/**
 * JavaScript –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 */

class FavoriteStoreManager {
    constructor() {
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FavoriteStoreManager');
        this.setupEventListeners();
        this.createNotificationContainer();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        document.addEventListener('click', (e) => {
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            if (e.target.closest('.add-to-favorites-btn')) {
                e.preventDefault();
                const button = e.target.closest('.add-to-favorites-btn');
                const storeId = button.dataset.storeId;
                if (storeId) {
                    this.addToFavorites(storeId, button);
                }
            }

            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            if (e.target.closest('.remove-from-favorites-btn')) {
                e.preventDefault();
                const button = e.target.closest('.remove-from-favorites-btn');
                const favoriteId = button.dataset.favoriteId;
                if (favoriteId) {
                    this.removeFromFavorites(favoriteId, button);
                }
            }

            // –ò–∫–æ–Ω–∫–∞ —Å–µ—Ä–¥–µ—á–∫–∞ (toggle)
            if (e.target.closest('.favorite-heart-btn')) {
                e.preventDefault();
                const button = e.target.closest('.favorite-heart-btn');
                const storeId = button.dataset.storeId;
                const isFavorite = button.classList.contains('is-favorite');

                if (isFavorite) {
                    const favoriteId = button.dataset.favoriteId;
                    this.removeFromFavorites(favoriteId, button);
                } else {
                    this.addToFavorites(storeId, button);
                }
            }
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
     */
    async addToFavorites(storeId, buttonElement = null) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ${storeId} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ`);

        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        if (buttonElement) {
            this.setButtonLoading(buttonElement, true);
        }

        try {
            const response = await fetch(`/favorites/stores/add/${storeId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin'
            });

            const data = await response.json();

            if (data.success) {
                console.log('‚úÖ –ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if (buttonElement) {
                    this.updateButtonToFavorite(buttonElement, data.data);
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showNotification('success', data.message || '–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                this.updateFavoriteCounter(1);

            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', data.message);

                if (response.status === 401) {
                    this.showNotification('error', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
                    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        window.location.href = '/login';
                    }, 2000);
                } else {
                    this.showNotification('error', data.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
                }
            }

        } catch (error) {
            console.error('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
            this.showNotification('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        } finally {
            // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ
            if (buttonElement) {
                this.setButtonLoading(buttonElement, false);
            }
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
     */
    async removeFromFavorites(favoriteId, buttonElement = null) {
        console.log(`‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${favoriteId}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if (!await this.showConfirmDialog('–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ?')) {
            return;
        }

        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        if (buttonElement) {
            this.setButtonLoading(buttonElement, true);
        }

        try {
            const response = await fetch(`/favorites/stores/remove/${favoriteId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin'
            });

            const data = await response.json();

            if (data.success) {
                console.log('‚úÖ –ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if (buttonElement) {
                    this.updateButtonToNormal(buttonElement);
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showNotification('success', data.message || '–ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                this.updateFavoriteCounter(-1);

                // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ, —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                if (window.location.pathname.includes('/favorites/stores')) {
                    this.removeStoreCard(favoriteId);
                }

            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', data.message);
                this.showNotification('error', data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
            }

        } catch (error) {
            console.error('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
            this.showNotification('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        } finally {
            // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ
            if (buttonElement) {
                this.setButtonLoading(buttonElement, false);
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
     */
    updateButtonToFavorite(buttonElement, favoriteData = null) {
        if (buttonElement.classList.contains('favorite-heart-btn')) {
            // –ò–∫–æ–Ω–∫–∞ —Å–µ—Ä–¥–µ—á–∫–∞
            buttonElement.classList.add('is-favorite');
            buttonElement.innerHTML = '<i class="fas fa-heart"></i>';
            buttonElement.style.color = '#dc3545';
            if (favoriteData && favoriteData.id) {
                buttonElement.dataset.favoriteId = favoriteData.id;
            }
        } else {
            // –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            buttonElement.innerHTML = '<i class="fas fa-heart"></i> –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º';
            buttonElement.classList.remove('btn-outline');
            buttonElement.classList.add('btn-danger');
            buttonElement.classList.add('remove-from-favorites-btn');
            buttonElement.classList.remove('add-to-favorites-btn');
            if (favoriteData && favoriteData.id) {
                buttonElement.dataset.favoriteId = favoriteData.id;
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    updateButtonToNormal(buttonElement) {
        if (buttonElement.classList.contains('favorite-heart-btn')) {
            // –ò–∫–æ–Ω–∫–∞ —Å–µ—Ä–¥–µ—á–∫–∞
            buttonElement.classList.remove('is-favorite');
            buttonElement.innerHTML = '<i class="far fa-heart"></i>';
            buttonElement.style.color = '';
            delete buttonElement.dataset.favoriteId;
        } else {
            // –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            buttonElement.innerHTML = '<i class="far fa-heart"></i> –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
            buttonElement.classList.add('btn-outline');
            buttonElement.classList.remove('btn-danger');
            buttonElement.classList.add('add-to-favorites-btn');
            buttonElement.classList.remove('remove-from-favorites-btn');
            delete buttonElement.dataset.favoriteId;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
     */
    setButtonLoading(buttonElement, isLoading) {
        if (isLoading) {
            buttonElement.disabled = true;
            buttonElement.style.opacity = '0.6';
            const originalContent = buttonElement.innerHTML;
            buttonElement.dataset.originalContent = originalContent;
            buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞...';
        } else {
            buttonElement.disabled = false;
            buttonElement.style.opacity = '1';
            if (buttonElement.dataset.originalContent) {
                buttonElement.innerHTML = buttonElement.dataset.originalContent;
                delete buttonElement.dataset.originalContent;
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    createNotificationContainer() {
        if (document.getElementById('notification-container')) return;

        const container = document.createElement('div');
        container.id = 'notification-container';
        container.style.cssText = `
            position: fixed;
            top: 100px;
            right: 20px;
            z-index: 10000;
            max-width: 400px;
        `;
        document.body.appendChild(container);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(type, message, duration = 4000) {
        const container = document.getElementById('notification-container');
        if (!container) return;

        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;

        const colors = {
            success: { bg: '#d4edda', border: '#c3e6cb', text: '#155724', icon: 'fas fa-check-circle' },
            error: { bg: '#f8d7da', border: '#f5c6cb', text: '#721c24', icon: 'fas fa-exclamation-circle' },
            warning: { bg: '#fff3cd', border: '#ffeaa7', text: '#856404', icon: 'fas fa-exclamation-triangle' }
        };

        const color = colors[type] || colors.success;

        notification.style.cssText = `
            background: ${color.bg};
            border: 1px solid ${color.border};
            color: ${color.text};
            padding: 15px 20px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            gap: 10px;
            animation: slideInRight 0.3s ease;
            position: relative;
            cursor: pointer;
        `;

        notification.innerHTML = `
            <i class="${color.icon}"></i>
            <span>${message}</span>
            <button style="
                position: absolute;
                right: 10px;
                top: 50%;
                transform: translateY(-50%);
                background: none;
                border: none;
                color: ${color.text};
                cursor: pointer;
                font-size: 18px;
                opacity: 0.7;
            ">&times;</button>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (!document.getElementById('notification-styles')) {
            const styles = document.createElement('style');
            styles.id = 'notification-styles';
            styles.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(styles);
        }

        container.appendChild(notification);

        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
        const autoRemove = setTimeout(() => {
            this.removeNotification(notification);
        }, duration);

        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É
        notification.addEventListener('click', () => {
            clearTimeout(autoRemove);
            this.removeNotification(notification);
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    removeNotification(notification) {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    async showConfirmDialog(message) {
        return new Promise((resolve) => {
            // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –º–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10001;
                animation: fadeIn 0.3s ease;
            `;

            modal.innerHTML = `
                <div style="
                    background: white;
                    padding: 30px;
                    border-radius: 12px;
                    box-shadow: 0 8px 25px rgba(0,0,0,0.3);
                    max-width: 400px;
                    text-align: center;
                    animation: scaleIn 0.3s ease;
                ">
                    <div style="font-size: 48px; color: #ff6b6b; margin-bottom: 20px;">
                        <i class="fas fa-heart-broken"></i>
                    </div>
                    <h3 style="margin-bottom: 15px; color: #333;">${message}</h3>
                    <p style="color: #666; margin-bottom: 25px;">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å</p>
                    <div style="display: flex; gap: 10px; justify-content: center;">
                        <button id="confirm-cancel" style="
                            padding: 10px 20px;
                            border: 2px solid #ddd;
                            background: white;
                            color: #666;
                            border-radius: 6px;
                            cursor: pointer;
                            font-weight: 500;
                        ">–û—Ç–º–µ–Ω–∞</button>
                        <button id="confirm-ok" style="
                            padding: 10px 20px;
                            border: none;
                            background: #dc3545;
                            color: white;
                            border-radius: 6px;
                            cursor: pointer;
                            font-weight: 500;
                        ">–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                </div>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
            if (!document.getElementById('modal-styles')) {
                const styles = document.createElement('style');
                styles.id = 'modal-styles';
                styles.textContent = `
                    @keyframes fadeIn {
                        from { opacity: 0; }
                        to { opacity: 1; }
                    }
                    @keyframes scaleIn {
                        from { transform: scale(0.7); opacity: 0; }
                        to { transform: scale(1); opacity: 1; }
                    }
                `;
                document.head.appendChild(styles);
            }

            document.body.appendChild(modal);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            modal.querySelector('#confirm-ok').addEventListener('click', () => {
                document.body.removeChild(modal);
                resolve(true);
            });

            modal.querySelector('#confirm-cancel').addEventListener('click', () => {
                document.body.removeChild(modal);
                resolve(false);
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    document.body.removeChild(modal);
                    resolve(false);
                }
            });
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    updateFavoriteCounter(delta) {
        const counter = document.querySelector('.favorite-count');
        if (counter) {
            const current = parseInt(counter.textContent) || 0;
            const newCount = Math.max(0, current + delta);
            counter.textContent = newCount;

            // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            counter.style.transform = 'scale(1.2)';
            setTimeout(() => {
                counter.style.transform = 'scale(1)';
            }, 200);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
     */
    removeStoreCard(favoriteId) {
        const card = document.querySelector(`[data-favorite-id="${favoriteId}"]`);
        if (card) {
            const storeCard = card.closest('.store-card');
            if (storeCard) {
                storeCard.style.animation = 'fadeOut 0.5s ease';
                setTimeout(() => {
                    storeCard.remove();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                    const remainingCards = document.querySelectorAll('.store-card');
                    if (remainingCards.length === 0) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        location.reload();
                    }
                }, 500);
            }
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    window.favoriteManager = new FavoriteStoreManager();
    console.log('‚úÖ FavoriteStoreManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.addToFavorites = function(storeId, buttonElement) {
    if (window.favoriteManager) {
        window.favoriteManager.addToFavorites(storeId, buttonElement);
    }
};

window.removeFromFavorites = function(favoriteId, buttonElement) {
    if (window.favoriteManager) {
        window.favoriteManager.removeFromFavorites(favoriteId, buttonElement);
    }
};