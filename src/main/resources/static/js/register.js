// js/register.js
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Registration page loaded');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadUserRoles();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    initRegistrationForm();
});


// üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUserRoles() {
    try {
        console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const roles = await apiClient.getRoles();

        const roleSelect = document.getElementById('userRole');
        roleSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞</option>';

        roles.forEach(role => {
            const option = document.createElement('option');
            option.value = role;
            option.textContent = getRoleDisplayName(role);
            roleSelect.appendChild(option);
        });

        console.log('‚úÖ –†–æ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', roles);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π:', error);
        MessageManager.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
    }
}

// üë• –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
function getRoleDisplayName(role) {
    const roleNames = {
        'BASE_USER': 'üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
        'BUSINESS_USER': 'üè™ –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞',
        'COURIER': 'üöö –ö—É—Ä—å–µ—Ä',
        'ADMIN': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    };
    return roleNames[role] || role;
}

// üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function initRegistrationForm() {
    const form = document.getElementById('registerForm');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    emailInput.addEventListener('blur', checkEmailAvailability);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
    confirmPasswordInput.addEventListener('input', checkPasswordMatch);
    passwordInput.addEventListener('input', checkPasswordMatch);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', handleRegistration);
}

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email
async function checkEmailAvailability() {
    const emailInput = document.getElementById('email');
    const email = emailInput.value.trim();

    if (!email || !isValidEmail(email)) {
        UIUtils.setFieldStatus('email', '', '');
        return;
    }

    try {
        UIUtils.setFieldStatus('email', 'üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º...', 'info');

        const response = await apiClient.checkEmailAvailability(email);

        if (response.available) {
            UIUtils.setFieldStatus('email', '‚úÖ Email –¥–æ—Å—Ç—É–ø–µ–Ω', 'success');
        } else {
            UIUtils.setFieldStatus('email', '‚ùå Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', 'error');
        }

    } catch (error) {
        UIUtils.setFieldStatus('email', '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å email', 'error');
    }
}

// üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
function checkPasswordMatch() {
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirmPassword').value;

    if (confirmPassword === '') {
        UIUtils.setFieldStatus('confirmPassword', '', '');
        return;
    }

    if (password === confirmPassword) {
        UIUtils.setFieldStatus('confirmPassword', '‚úÖ –ü–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'success');
    } else {
        UIUtils.setFieldStatus('confirmPassword', '‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
    }
}

// üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handleRegistration(event) {
    event.preventDefault();

    MessageManager.clear();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = new FormData(event.target);
    const userData = {
        firstName: formData.get('firstName').trim(),
        lastName: formData.get('lastName').trim(),
        email: formData.get('email').trim(),
        password: formData.get('password'),
        userRole: formData.get('userRole')
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!validateRegistrationData(userData)) {
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
    const confirmPassword = formData.get('confirmPassword');
    if (userData.password !== confirmPassword) {
        MessageManager.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        return;
    }

    try {
        UIUtils.showLoading('submitBtn');

        console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.email);

        const response = await apiClient.register(userData);

        if (response.success) {
            MessageManager.success(
                `üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${response.user.firstName}!`
            );

            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            event.target.reset();

            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–π—Ç–∏
            setTimeout(() => {
                if (confirm('–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É?')) {
                    window.location.href = 'login.html';
                }
            }, 2000);

        } else {
            MessageManager.error(response.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        MessageManager.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message);

    } finally {
        UIUtils.hideLoading('submitBtn', 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è');
    }
}

// ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function validateRegistrationData(userData) {
    const errors = [];

    if (!userData.firstName) {
        errors.push('–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
    }

    if (!userData.lastName) {
        errors.push('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é');
    }

    if (!userData.email) {
        errors.push('–í–≤–µ–¥–∏—Ç–µ email');
    } else if (!isValidEmail(userData.email)) {
        errors.push('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
    }

    if (!userData.password) {
        errors.push('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
    } else if (userData.password.length < 6) {
        errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    if (!userData.userRole) {
        errors.push('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞');
    }

    if (errors.length > 0) {
        MessageManager.error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:<br>‚Ä¢ ' + errors.join('<br>‚Ä¢ '));
        return false;
    }

    return true;
}

// üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}