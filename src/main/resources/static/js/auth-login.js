class AuthLogin {
    constructor(config = {}) {
        this.API_BASE_URL = config.apiBaseUrl || 'http://localhost:8082';
        this.roleRedirects = config.roleRedirects || {
            'ROLE_ADMIN': '/admin/dashboard',
            'ROLE_MANAGER': '/manager/dashboard',
            'ROLE_USER': '/dashboard',
            'BASE_USER': '/dashboard'
        };
        this.init();
    }

    init() {
        this.bindEvents();
        this.checkExistingAuth();
        this.addInputAnimations();
        this.setupGlobalHeaders();
    }

    bindEvents() {
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }
        window.togglePassword = () => this.togglePassword();
    }

    togglePassword() {
        const passwordInput = document.getElementById('password');
        const toggleBtn = document.querySelector('.password-toggle');

        if (!passwordInput || !toggleBtn) return;

        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'üôà';
        } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'üëÅÔ∏è';
        }
    }

    showError(message) {
        const errorDiv = document.getElementById('errorMessage');
        const successDiv = document.getElementById('successMessage');

        if (!errorDiv) return;

        if (successDiv) successDiv.style.display = 'none';
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';

        setTimeout(() => {
            errorDiv.style.display = 'none';
        }, 5000);
    }

    showSuccess(message) {
        const errorDiv = document.getElementById('errorMessage');
        const successDiv = document.getElementById('successMessage');

        if (!successDiv) return;

        if (errorDiv) errorDiv.style.display = 'none';
        successDiv.textContent = message;
        successDiv.style.display = 'block';
    }

    setLoading(loading) {
        const loginBtn = document.getElementById('loginBtn');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const btnText = document.getElementById('btnText');

        if (!loginBtn || !loadingSpinner || !btnText) return;

        if (loading) {
            loginBtn.disabled = true;
            loadingSpinner.style.display = 'inline-block';
            btnText.textContent = '–í—Ö–æ–¥...';
        } else {
            loginBtn.disabled = false;
            loadingSpinner.style.display = 'none';
            btnText.textContent = 'üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É';
        }
    }

    validateForm(email, password) {
        if (!email || !password) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return false;
        }

        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
            return false;
        }

        if (password.length < 3) {
            this.showError('–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
            return false;
        }

        return true;
    }

    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å Remember Me –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –ø–æ —Ä–æ–ª—è–º
    async handleLogin(e) {
        e.preventDefault();

        const email = document.getElementById('email')?.value?.trim();
        const password = document.getElementById('password')?.value;
        const rememberMe = document.getElementById('rememberMe')?.checked || false;

        console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${email} (Remember Me: ${rememberMe})`);

        if (!this.validateForm(email, password)) {
            return;
        }

        this.setLoading(true);

        try {
            const response = await fetch(`${this.API_BASE_URL}/api/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    email: email,
                    password: password,
                    rememberMe: rememberMe
                })
            });

            const data = await response.json();

            if (response.ok && data.success) {
                const sessionType = data.rememberMe ? '–°–µ—Å—Å–∏—è –Ω–∞ 7 –¥–Ω–µ–π! üç™' : '–û–±—ã—á–Ω–∞—è —Å–µ—Å—Å–∏—è üîí';
                this.showSuccess(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ${sessionType}`);

                // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                this.saveAuthData(data);

                // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
                localStorage.setItem('lastRememberMe', rememberMe.toString());

                // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
                const userRole = data.user?.userRole || data.user?.role;
                console.log(`üë§ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userRole}`);
                console.log(`üé´ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${data.token ? '–î–ê' : '–ù–ï–¢'}`);

                setTimeout(async () => {
                    await this.redirectByRole(userRole);
                }, 1500);

            } else {
                this.showError(data.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        } finally {
            this.setLoading(false);
        }
    }

    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ —Ä–æ–ª—è–º —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ç–æ–∫–µ–Ω–∞
    async redirectByRole(userRole) {
        const redirectUrl = this.roleRedirects[userRole] || this.roleRedirects['BASE_USER'];

        console.log(`üéØ –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ —Ä–æ–ª–∏ ${userRole} -> ${redirectUrl}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        const roleNames = {
            'ROLE_ADMIN': '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            'ROLE_MANAGER': '–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'ROLE_USER': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–Ω–µ–ª—å',
            'BASE_USER': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–Ω–µ–ª—å'
        };

        const roleName = roleNames[userRole] || '–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞';
        this.showSuccess(`–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ ${roleName}...`);

        setTimeout(async () => {
            await this.secureDashboardRedirect(redirectUrl);
        }, 800);
    }

    // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –¥–∞—à–±–æ—Ä–¥ —Å —Ç–æ–∫–µ–Ω–æ–º
    async secureDashboardRedirect(targetUrl = '/dashboard') {
        const token = this.getAuthToken();

        if (!token) {
            console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞');
            window.location.href = '/login?error=no_token';
            return;
        }

        console.log(`üîê –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ ${targetUrl} —Å —Ç–æ–∫–µ–Ω–æ–º`);

        try {
            // –ü–æ–ø—ã—Ç–∫–∞ 1: POST –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            const response = await fetch(targetUrl, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'X-Auth-Token': token,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    action: 'secure_redirect',
                    timestamp: new Date().toISOString(),
                    userAgent: navigator.userAgent
                }),
                redirect: 'follow'
            });

            if (response.redirected) {
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º');
                window.location.href = response.url;
                return;
            }

            if (response.ok) {
                console.log('‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º');
                const contentType = response.headers.get('content-type');

                if (contentType && contentType.includes('text/html')) {
                    const html = await response.text();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ HTML
                    if (html.includes('redirect:')) {
                        const redirectMatch = html.match(/redirect:([^\s"']+)/);
                        if (redirectMatch) {
                            window.location.href = redirectMatch[1];
                            return;
                        }
                    }

                    // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    document.open();
                    document.write(html);
                    document.close();

                    // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                    history.pushState({}, '', targetUrl);
                    return;
                }
            }

            // –ü–æ–ø—ã—Ç–∫–∞ 2: –†–µ–¥–∏—Ä–µ–∫—Ç —Å —Ç–æ–∫–µ–Ω–æ–º –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
            console.log('‚ö†Ô∏è POST –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º GET —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö');
            this.fallbackRedirect(targetUrl, token);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–µ:', error);
            this.fallbackRedirect(targetUrl, token);
        }
    }

    // ‚úÖ –†–ï–ó–ï–†–í–ù–´–ô –º–µ—Ç–æ–¥ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    fallbackRedirect(targetUrl = '/dashboard', token = null) {
        const authToken = token || this.getAuthToken();

        if (authToken) {
            console.log(`üîÑ Fallback —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ ${targetUrl} —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö`);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            const url = new URL(targetUrl, window.location.origin);
            url.searchParams.set('token', authToken);
            url.searchParams.set('auth', 'true');

            window.location.href = url.toString();
        } else {
            console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è fallback —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞');
            window.location.href = '/login?error=no_token';
        }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    saveAuthData(data) {
        try {
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (Remember Me: ${data.rememberMe})`);

            const storage = data.rememberMe ? localStorage : sessionStorage;

            if (data.token) {
                storage.setItem('authToken', data.token);
                console.log(`‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${data.rememberMe ? 'localStorage' : 'sessionStorage'}`);
            }

            if (data.user) {
                storage.setItem('user', JSON.stringify(data.user));
            }

            if (data.type) {
                storage.setItem('tokenType', data.type);
            }

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ rememberMe –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('rememberMe', data.rememberMe.toString());

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    checkExistingAuth() {
        try {
            const token = this.getAuthToken();

            if (token) {
                const userData = this.getUserData();
                if (userData?.userRole) {
                    console.log(`üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω. –†–æ–ª—å: ${userData.userRole}`);
                    // –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    // this.redirectByRole(userData.userRole);
                }

                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ checkbox
                const rememberMeCheckbox = document.getElementById('rememberMe');
                if (rememberMeCheckbox) {
                    const lastRememberMe = localStorage.getItem('lastRememberMe');
                    if (lastRememberMe === 'true') {
                        rememberMeCheckbox.checked = true;
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    clearAuthData() {
        try {
            localStorage.removeItem('authToken');
            localStorage.removeItem('user');
            localStorage.removeItem('tokenType');
            localStorage.removeItem('rememberMe');

            sessionStorage.removeItem('authToken');
            sessionStorage.removeItem('user');
            sessionStorage.removeItem('tokenType');

            console.log('üßπ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    addInputAnimations() {
        document.querySelectorAll('input').forEach(input => {
            input.addEventListener('focus', function() {
                const formGroup = this.closest('.form-group');
                if (formGroup) {
                    formGroup.style.transform = 'scale(1.02)';
                    formGroup.style.transition = 'transform 0.2s ease';
                }
            });

            input.addEventListener('blur', function() {
                const formGroup = this.closest('.form-group');
                if (formGroup) {
                    formGroup.style.transform = 'scale(1)';
                }
            });
        });
    }

    getAuthToken() {
        return localStorage.getItem('authToken') || sessionStorage.getItem('authToken');
    }

    getUserData() {
        try {
            const userData = localStorage.getItem('user') || sessionStorage.getItem('user');
            return userData ? JSON.parse(userData) : null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }

    isRememberMe() {
        return localStorage.getItem('rememberMe') === 'true';
    }

    isAuthenticated() {
        return !!this.getAuthToken();
    }

    logout() {
        this.clearAuthData();
        window.location.href = '/login';
    }

    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    setupGlobalHeaders() {
        const token = this.getAuthToken();
        if (token) {
            console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º');

            const originalFetch = window.fetch;
            window.fetch = function(url, options = {}) {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
                const headers = {
                    'Authorization': `Bearer ${token}`,
                    'X-Auth-Token': token,
                    'X-Requested-With': 'XMLHttpRequest',
                    ...options.headers
                };

                console.log(`üì° Fetch –∑–∞–ø—Ä–æ—Å –Ω–∞ ${url} —Å —Ç–æ–∫–µ–Ω–æ–º`);

                return originalFetch(url, {
                    ...options,
                    headers
                });
            };

            // –¢–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–ª—è XMLHttpRequest
            const originalOpen = XMLHttpRequest.prototype.open;
            XMLHttpRequest.prototype.open = function(method, url, ...args) {
                this.addEventListener('loadstart', function() {
                    this.setRequestHeader('Authorization', `Bearer ${token}`);
                    this.setRequestHeader('X-Auth-Token', token);
                    this.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                });
                return originalOpen.apply(this, [method, url, ...args]);
            };
        }
    }

    // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
    forceRedirectWithToken(targetUrl) {
        const token = this.getAuthToken();
        if (!token) {
            window.location.href = '/login?error=no_token';
            return;
        }

        console.log(`üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ ${targetUrl} —Å —Ç–æ–∫–µ–Ω–æ–º`);

        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—É—é —Ñ–æ—Ä–º—É –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = targetUrl;
        form.style.display = 'none';

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
        const tokenInput = document.createElement('input');
        tokenInput.type = 'hidden';
        tokenInput.name = 'authToken';
        tokenInput.value = token;
        form.appendChild(tokenInput);

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const actionInput = document.createElement('input');
        actionInput.type = 'hidden';
        actionInput.name = 'action';
        actionInput.value = 'dashboard_access';
        form.appendChild(actionInput);

        document.body.appendChild(form);
        form.submit();
    }

    // ‚úÖ DEBUG –º–µ—Ç–æ–¥—ã
    showDebugInfo() {
        console.log('üîç Debug Info:', {
            hasToken: !!this.getAuthToken(),
            rememberMe: this.isRememberMe(),
            userData: this.getUserData(),
            userRole: this.getUserData()?.userRole,
            redirectUrl: this.roleRedirects[this.getUserData()?.userRole],
            localStorage: {
                authToken: !!localStorage.getItem('authToken'),
                rememberMe: localStorage.getItem('rememberMe'),
                lastRememberMe: localStorage.getItem('lastRememberMe')
            },
            sessionStorage: {
                authToken: !!sessionStorage.getItem('authToken')
            }
        });
    }
}

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('loginForm')) {
        window.authLogin = new AuthLogin({
            apiBaseUrl: 'http://localhost:8082',
            roleRedirects: {
                'ROLE_ADMIN': '/admin/dashboard',
                'ROLE_MANAGER': '/manager/dashboard',
                'ROLE_USER': '/dashboard',
                'BASE_USER': '/dashboard'
            }
        });

        window.showAuthDebug = () => window.authLogin.showDebugInfo();
        console.log('üéØ AuthLogin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. Debug: showAuthDebug()');
    }
});

if (typeof window !== 'undefined') {
    window.AuthLogin = AuthLogin;
}