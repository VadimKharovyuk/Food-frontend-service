class AuthLogin {
    constructor(config = {}) {
        this.API_BASE_URL = config.apiBaseUrl || 'http://localhost:8082';
        this.roleRedirects = config.roleRedirects || {
            'ROLE_ADMIN': '/dashboard',
            'ROLE_USER': '/dashboard',
            'ROLE_BUSINESS': '/dashboard',
            'ROLE_COURIER': '/dashboard',
            'BASE_USER': '/dashboard',
            'BUSINESS_USER': '/dashboard',
            'COURIER': '/dashboard',
            'ADMIN': '/dashboard'
        };
        this.init();
    }

    init() {
        this.bindEvents();
        this.checkExistingAuth();
        this.addInputAnimations();
    }

    bindEvents() {
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }
        window.togglePassword = () => this.togglePassword();
    }

    togglePassword() {
        const passwordInput = document.getElementById('password');
        const toggleBtn = document.querySelector('.password-toggle');

        if (!passwordInput || !toggleBtn) return;

        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'üôà';
        } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'üëÅÔ∏è';
        }
    }

    showError(message) {
        const errorDiv = document.getElementById('errorMessage');
        const successDiv = document.getElementById('successMessage');

        if (!errorDiv) return;

        if (successDiv) successDiv.style.display = 'none';
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';

        setTimeout(() => {
            errorDiv.style.display = 'none';
        }, 5000);
    }

    showSuccess(message) {
        const errorDiv = document.getElementById('errorMessage');
        const successDiv = document.getElementById('successMessage');

        if (!successDiv) return;

        if (errorDiv) errorDiv.style.display = 'none';
        successDiv.textContent = message;
        successDiv.style.display = 'block';
    }

    setLoading(loading) {
        const loginBtn = document.getElementById('loginBtn');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const btnText = document.getElementById('btnText');

        if (!loginBtn || !loadingSpinner || !btnText) return;

        if (loading) {
            loginBtn.disabled = true;
            loadingSpinner.style.display = 'inline-block';
            btnText.textContent = '–í—Ö–æ–¥...';
        } else {
            loginBtn.disabled = false;
            loadingSpinner.style.display = 'none';
            btnText.textContent = 'üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É';
        }
    }

    validateForm(email, password) {
        if (!email || !password) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return false;
        }

        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
            return false;
        }

        if (password.length < 3) {
            this.showError('–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
            return false;
        }

        return true;
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ API
    async handleLogin(e) {
        e.preventDefault();

        // üîç –û–¢–õ–ê–î–ö–ê - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
        console.log('üöÄ –ù–ê–ß–ê–õ–û handleLogin - —Ç–µ–∫—É—â–∏–π URL:', window.location.href);

        const email = document.getElementById('email')?.value?.trim();
        const password = document.getElementById('password')?.value;
        const rememberMe = document.getElementById('rememberMe')?.checked || false;

        console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${email} (Remember Me: ${rememberMe})`);

        if (!this.validateForm(email, password)) {
            return;
        }

        this.setLoading(true);

        try {
            // ‚úÖ –ó–∞–ø—Ä–æ—Å –∫ –Ω–æ–≤–æ–º—É API
            const response = await fetch(`${this.API_BASE_URL}/api/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    email: email,
                    password: password,
                    rememberMe: rememberMe
                })
            });

            console.log(`üì° –û—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å: ${response.status}`);

            if (!response.ok) {
                if (response.status === 401) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                } else if (response.status === 400) {
                    throw new Error('–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞');
                } else {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
            }

            const data = await response.json();
            console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

            // ‚úÖ –ù–æ–≤—ã–π API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç AuthResponseDto –Ω–∞–ø—Ä—è–º—É—é
            if (data.token && data.user) {
                const sessionType = data.rememberMe ? '–°–µ—Å—Å–∏—è –Ω–∞ 30 –¥–Ω–µ–π! üíæ' : '–û–±—ã—á–Ω–∞—è —Å–µ—Å—Å–∏—è üîí';
                this.showSuccess(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.user.firstName}! ${sessionType}`);

                // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage/sessionStorage
                const storage = data.rememberMe ? localStorage : sessionStorage;

                storage.setItem('authToken', data.token);
                storage.setItem('tokenType', data.type || 'Bearer');
                storage.setItem('user', JSON.stringify(data.user));
                storage.setItem('rememberMe', data.rememberMe.toString());

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä Remember Me
                localStorage.setItem('lastRememberMe', rememberMe.toString());

                console.log(`üíæ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${data.rememberMe ? 'localStorage' : 'sessionStorage'}`);
                console.log(`üîë –¢–æ–∫–µ–Ω: ${data.token.substring(0, 20)}... (${data.token.length} —Å–∏–º–≤–æ–ª–æ–≤)`);

                // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç - –≤—Å–µ–≥–¥–∞ –Ω–∞ –µ–¥–∏–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
                let redirectUrl = '/dashboard';

                // üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ backend –≤–µ—Ä–Ω—É–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å —Ä–æ–ª—å—é - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                if (window.location.pathname.includes('/dashboard/')) {
                    window.history.replaceState(null, '', '/dashboard');
                }

                console.log(`üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç: ${redirectUrl}`);

                // ‚úÖ –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                setTimeout(() => {
                    window.location.href = redirectUrl;
                }, 1500);

            } else {
                throw new Error('–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);

            if (error.message.includes('Failed to fetch')) {
                this.showError('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
            } else {
                this.showError(error.message);
            }
        } finally {
            this.setLoading(false);
        }
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    checkExistingAuth() {
        try {
            const token = this.getAuthToken();
            const userData = this.getUserData();

            if (token && userData) {
                console.log(`üîë –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (${token.substring(0, 20)}...)`);
                console.log(`üë§ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.email} (${userData.userRole})`);

                this.showSuccess(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${userData.firstName || userData.email}!`);
            } else {
                console.log('‚ùå –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ checkbox Remember Me
            const rememberMeCheckbox = document.getElementById('rememberMe');
            if (rememberMeCheckbox) {
                const lastRememberMe = localStorage.getItem('lastRememberMe');
                if (lastRememberMe === 'true') {
                    rememberMeCheckbox.checked = true;
                    console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Remember Me');
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    clearAuthData() {
        try {
            // –û—á–∏—â–∞–µ–º localStorage
            const localStorageKeys = ['authToken', 'tokenType', 'user', 'rememberMe', 'lastRememberMe'];
            localStorageKeys.forEach(key => localStorage.removeItem(key));

            // –û—á–∏—â–∞–µ–º sessionStorage
            const sessionStorageKeys = ['authToken', 'tokenType', 'user', 'rememberMe'];
            sessionStorageKeys.forEach(key => sessionStorage.removeItem(key));

            console.log('üßπ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    addInputAnimations() {
        document.querySelectorAll('input').forEach(input => {
            input.addEventListener('focus', function() {
                const formGroup = this.closest('.form-group');
                if (formGroup) {
                    formGroup.style.transform = 'scale(1.02)';
                    formGroup.style.transition = 'transform 0.2s ease';
                }
            });

            input.addEventListener('blur', function() {
                const formGroup = this.closest('.form-group');
                if (formGroup) {
                    formGroup.style.transform = 'scale(1)';
                }
            });
        });
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ storage
    getAuthToken() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage —Å–Ω–∞—á–∞–ª–∞ (–¥–ª—è Remember Me)
            let token = localStorage.getItem('authToken');
            if (token) return token;

            // –ó–∞—Ç–µ–º sessionStorage
            token = sessionStorage.getItem('authToken');
            return token;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
            return null;
        }
    }

    getTokenType() {
        try {
            return localStorage.getItem('tokenType') ||
                sessionStorage.getItem('tokenType') ||
                'Bearer';
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞:', error);
            return 'Bearer';
        }
    }

    getAuthHeader() {
        const token = this.getAuthToken();
        const tokenType = this.getTokenType();
        return token ? `${tokenType} ${token}` : null;
    }

    getUserData() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage —Å–Ω–∞—á–∞–ª–∞ (–¥–ª—è Remember Me)
            let userData = localStorage.getItem('user');
            if (userData) return JSON.parse(userData);

            // –ó–∞—Ç–µ–º sessionStorage
            userData = sessionStorage.getItem('user');
            return userData ? JSON.parse(userData) : null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }

    isRememberMe() {
        return localStorage.getItem('rememberMe') === 'true';
    }

    isAuthenticated() {
        const token = this.getAuthToken();
        const userData = this.getUserData();
        return !!(token && userData);
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô logout
    async logout() {
        try {
            console.log('üö™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');

            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ API logout, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –Ω—É–∂–µ–Ω
            const authHeader = this.getAuthHeader();
            if (authHeader) {
                const response = await fetch(`${this.API_BASE_URL}/api/auth/logout`, {
                    method: 'POST',
                    headers: {
                        'Authorization': authHeader,
                        'Content-Type': 'application/json'
                    }
                });
            }

            console.log('‚úÖ Logout –≤—ã–ø–æ–ª–Ω–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ logout:', error);
        } finally {
            // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            this.clearAuthData();

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            window.location.href = '/login';
        }
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    showDebugInfo() {
        const token = this.getAuthToken();
        const userData = this.getUserData();

        const debugInfo = {
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            authentication: {
                hasToken: !!token,
                tokenLength: token ? token.length : 0,
                tokenPreview: token ? `${token.substring(0, 30)}...` : null,
                tokenType: this.getTokenType(),
                authHeader: this.getAuthHeader() ? `${this.getTokenType()} ${token?.substring(0, 20)}...` : null,
                isAuthenticated: this.isAuthenticated(),
                userData: userData
            },

            // –°–æ—Å—Ç–æ—è–Ω–∏–µ Remember Me
            rememberMe: {
                current: this.isRememberMe(),
                last: localStorage.getItem('lastRememberMe')
            },

            // –•—Ä–∞–Ω–∏–ª–∏—â–µ
            storage: {
                localStorage: {
                    authToken: !!localStorage.getItem('authToken'),
                    tokenType: localStorage.getItem('tokenType'),
                    user: !!localStorage.getItem('user'),
                    rememberMe: localStorage.getItem('rememberMe'),
                    lastRememberMe: localStorage.getItem('lastRememberMe')
                },
                sessionStorage: {
                    authToken: !!sessionStorage.getItem('authToken'),
                    tokenType: sessionStorage.getItem('tokenType'),
                    user: !!sessionStorage.getItem('user'),
                    rememberMe: sessionStorage.getItem('rememberMe')
                }
            },

            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            config: {
                apiBaseUrl: this.API_BASE_URL,
                roleRedirects: this.roleRedirects
            }
        };

        console.log('üîç AuthLogin Debug Info:', debugInfo);
        return debugInfo;
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    checkAuthStatus() {
        const token = this.getAuthToken();
        const userData = this.getUserData();

        const status = {
            authenticated: this.isAuthenticated(),
            user: userData,
            hasToken: !!token,
            tokenLength: token ? token.length : 0,
            tokenType: this.getTokenType(),
            authHeader: this.getAuthHeader(),
            rememberMe: this.isRememberMe()
        };

        console.log('üîç –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', status);
        return status;
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
    async testConnection() {
        try {
            console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...');

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint –ª–æ–≥–∏–Ω–∞
            const response = await fetch(`${this.API_BASE_URL}/api/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'test'
                })
            });

            console.log(`üì° API –æ—Ç–≤–µ—Ç–∏–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${response.status}`);
            return response.status !== 404; // API –¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –ª–æ–≥–∏–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error);
            return false;
        }
    }

    // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
    async validateToken() {
        const authHeader = this.getAuthHeader();
        if (!authHeader) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            return false;
        }

        try {
            console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API...');

            const response = await fetch(`${this.API_BASE_URL}/api/auth/validate-token-simple`, {
                method: 'POST',
                headers: {
                    'Authorization': authHeader,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const isValid = await response.json();
                console.log(`‚úÖ –¢–æ–∫–µ–Ω ${isValid ? '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' : '–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'}`);
                return isValid;
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', response.status);
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            return false;
        }
    }

    // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    forceReset() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');

        // –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
        const keysToRemove = [
            'authToken', 'tokenType', 'user', 'rememberMe', 'lastRememberMe',
            // –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'jwt', 'userRole', 'userEmail'
        ];

        keysToRemove.forEach(key => {
            localStorage.removeItem(key);
            sessionStorage.removeItem(key);
        });

        console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        setTimeout(() => {
            window.location.reload();
        }, 500);
    }
}

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('loginForm')) {
        window.authLogin = new AuthLogin({
            apiBaseUrl: 'http://localhost:8082',
            roleRedirects: {
                'ROLE_ADMIN': '/dashboard',
                'ROLE_USER': '/dashboard',
                'ROLE_BUSINESS': '/dashboard',
                'ROLE_COURIER': '/dashboard',
                'BASE_USER': '/dashboard',
                'BUSINESS_USER': '/dashboard',
                'COURIER': '/dashboard',
                'ADMIN': '/dashboard'
            }
        });

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window.showAuthDebug = () => window.authLogin.showDebugInfo();
        window.checkAuth = () => window.authLogin.checkAuthStatus();
        window.testAuthAPI = () => window.authLogin.testConnection();
        window.validateAuthToken = () => window.authLogin.validateToken();
        window.resetAuth = () => window.authLogin.forceReset();

        console.log('üéØ AuthLogin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('  showAuthDebug() - –ø–æ–ª–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
        console.log('  checkAuth() - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        console.log('  testAuthAPI() - —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API');
        console.log('  validateAuthToken() - –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API');
        console.log('  resetAuth() - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.AuthLogin = AuthLogin;
}