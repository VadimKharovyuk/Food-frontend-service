// // –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª /static/js/dashboard-auth.js
//
// class DashboardAuth {
//     constructor() {
//         this.API_BASE_URL = 'http://localhost:8082';
//         this.init();
//     }
//
//     init() {
//         console.log('üè† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DashboardAuth');
//         this.checkAuthentication();
//     }
//
//     // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ storage
//     getAuthToken() {
//         try {
//             // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage —Å–Ω–∞—á–∞–ª–∞ (–¥–ª—è Remember Me)
//             let token = localStorage.getItem('authToken');
//             if (token) return token;
//
//             // –ó–∞—Ç–µ–º sessionStorage
//             token = sessionStorage.getItem('authToken');
//             return token;
//         } catch (error) {
//             console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
//             return null;
//         }
//     }
//
//     // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ storage
//     getUserData() {
//         try {
//             // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage —Å–Ω–∞—á–∞–ª–∞ (–¥–ª—è Remember Me)
//             let userData = localStorage.getItem('user');
//             if (userData) return JSON.parse(userData);
//
//             // –ó–∞—Ç–µ–º sessionStorage
//             userData = sessionStorage.getItem('user');
//             return userData ? JSON.parse(userData) : null;
//         } catch (error) {
//             console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
//             return null;
//         }
//     }
//
//     // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ Authorization header
//     getAuthHeader() {
//         const token = this.getAuthToken();
//         const tokenType = localStorage.getItem('tokenType') || sessionStorage.getItem('tokenType') || 'Bearer';
//         return token ? `${tokenType} ${token}` : null;
//     }
//
//     // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞
//     async checkAuthentication() {
//         console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ...');
//
//         const token = this.getAuthToken();
//         const userData = this.getUserData();
//
//         if (!token || !userData) {
//             console.log('‚ùå –¢–æ–∫–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
//             this.redirectToLogin();
//             return;
//         }
//
//         console.log(`üîë –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.email}`);
//
//         // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
//         try {
//             const authHeader = this.getAuthHeader();
//
//             const response = await fetch(`${this.API_BASE_URL}/api/auth/validate-token`, {
//                 method: 'POST',
//                 headers: {
//                     'Authorization': authHeader,
//                     'Content-Type': 'application/json'
//                 }
//             });
//
//             if (response.ok) {
//                 const result = await response.json();
//                 if (result.valid) {
//                     console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥');
//                     this.loadDashboard(userData);
//                 } else {
//                     console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
//                     this.redirectToLogin();
//                 }
//             } else {
//                 console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', response.status);
//                 this.redirectToLogin();
//             }
//
//         } catch (error) {
//             console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
//             this.redirectToLogin();
//         }
//     }
//
//     // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//     async loadDashboard(userData) {
//         console.log(`üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–ª—è ${userData.email} (${userData.userRole})`);
//
//         try {
//             // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—à–±–æ—Ä–¥–∞
//             const authHeader = this.getAuthHeader();
//
//             const response = await fetch(`${this.API_BASE_URL}/dashboard/api/config`, {
//                 method: 'GET',
//                 headers: {
//                     'Authorization': authHeader,
//                     'Content-Type': 'application/json'
//                 }
//             });
//
//             if (response.ok) {
//                 const config = await response.json();
//                 console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞:', config);
//
//                 // ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥
//                 this.renderDashboard(config);
//             } else {
//                 console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', response.status);
//                 this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞');
//             }
//
//         } catch (error) {
//             console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
//             this.showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
//         }
//     }
//
//     // ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
//     renderDashboard(config) {
//         const container = document.getElementById('dashboard-container');
//
//         if (!container) {
//             console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
//             return;
//         }
//
//         // ‚úÖ –ë–∞–∑–æ–≤—ã–π HTML –¥–∞—à–±–æ—Ä–¥–∞
//         container.innerHTML = `
//             <div class="dashboard-header">
//                 <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${config.user.firstName}!</h1>
//                 <div class="user-info">
//                     <span>–†–æ–ª—å: ${config.user.roleDisplayName}</span>
//                     <button onclick="dashboardAuth.logout()" class="logout-btn">–í—ã–π—Ç–∏</button>
//                 </div>
//             </div>
//             <div class="dashboard-content">
//                 <h2>${config.config.title}</h2>
//                 <div class="dashboard-sections">
//                     ${config.config.sections.map(section => `
//                         <div class="dashboard-section" data-section="${section}">
//                             <h3>${this.getSectionTitle(section)}</h3>
//                             <button onclick="dashboardAuth.loadSection('${section}')">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
//                             <div class="section-content" id="section-${section}"></div>
//                         </div>
//                     `).join('')}
//                 </div>
//             </div>
//         `;
//
//         console.log('‚úÖ –î–∞—à–±–æ—Ä–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω');
//     }
//
//     // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏
//     getSectionTitle(section) {
//         const titles = {
//             'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
//             'users': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
//             'restaurants': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
//             'orders': '–ó–∞–∫–∞–∑—ã',
//             'favorites': '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
//             'profile': '–ü—Ä–æ—Ñ–∏–ª—å',
//             'deliveries': '–î–æ—Å—Ç–∞–≤–∫–∏',
//             'earnings': '–ó–∞—Ä–∞–±–æ—Ç–æ–∫'
//         };
//         return titles[section] || section;
//     }
//
//     // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞
//     async loadSection(section) {
//         console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ü–∏—é: ${section}`);
//
//         try {
//             const authHeader = this.getAuthHeader();
//
//             const response = await fetch(`${this.API_BASE_URL}/dashboard/api/data/${section}`, {
//                 method: 'GET',
//                 headers: {
//                     'Authorization': authHeader,
//                     'Content-Type': 'application/json'
//                 }
//             });
//
//             if (response.ok) {
//                 const data = await response.json();
//                 console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ ${section} –ø–æ–ª—É—á–µ–Ω—ã:`, data);
//
//                 // ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
//                 const sectionContainer = document.getElementById(`section-${section}`);
//                 if (sectionContainer) {
//                     sectionContainer.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
//                 }
//             } else {
//                 console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ü–∏–∏ ${section}:`, response.status);
//             }
//
//         } catch (error) {
//             console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ü–∏–∏ ${section}:`, error);
//         }
//     }
//
//     // ‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
//     async logout() {
//         console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
//
//         try {
//             const authHeader = this.getAuthHeader();
//
//             if (authHeader) {
//                 await fetch(`${this.API_BASE_URL}/api/auth/logout`, {
//                     method: 'POST',
//                     headers: {
//                         'Authorization': authHeader,
//                         'Content-Type': 'application/json'
//                     }
//                 });
//             }
//
//         } catch (error) {
//             console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ logout:', error);
//         } finally {
//             // ‚úÖ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
//             this.clearAuthData();
//             this.redirectToLogin();
//         }
//     }
//
//     // ‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
//     clearAuthData() {
//         const keys = ['authToken', 'tokenType', 'user', 'rememberMe', 'lastRememberMe'];
//         keys.forEach(key => {
//             localStorage.removeItem(key);
//             sessionStorage.removeItem(key);
//         });
//         console.log('üßπ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
//     }
//
//     // ‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
//     redirectToLogin() {
//         console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞');
//         window.location.href = '/login?error=unauthorized';
//     }
//
//     // ‚úÖ –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
//     showError(message) {
//         const container = document.getElementById('dashboard-container');
//         if (container) {
//             container.innerHTML = `
//                 <div class="error-message">
//                     <h2>–û—à–∏–±–∫–∞</h2>
//                     <p>${message}</p>
//                     <button onclick="window.location.reload()">–û–±–Ω–æ–≤–∏—Ç—å</button>
//                     <button onclick="dashboardAuth.redirectToLogin()">–ù–∞ –≥–ª–∞–≤–Ω—É—é</button>
//                 </div>
//             `;
//         }
//     }
// }
//
// // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// document.addEventListener('DOMContentLoaded', function() {
//     window.dashboardAuth = new DashboardAuth();
// });
//
// // ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
// if (typeof window !== 'undefined') {
//     window.DashboardAuth = DashboardAuth;
// }


// ‚úÖ Dashboard Authentication - QuickFood
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–∞—à–±–æ—Ä–¥–∞

class DashboardAuth {
    constructor() {
        this.API_BASE_URL = 'http://localhost:8082';
        this.init();
    }

    init() {
        console.log('üè† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DashboardAuth');
        this.checkAuthentication();
    }

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ storage
    getAuthToken() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage —Å–Ω–∞—á–∞–ª–∞ (–¥–ª—è Remember Me)
            let token = localStorage.getItem('authToken');
            if (token) return token;

            // –ó–∞—Ç–µ–º sessionStorage
            token = sessionStorage.getItem('authToken');
            return token;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
            return null;
        }
    }

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ storage
    getUserData() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage —Å–Ω–∞—á–∞–ª–∞ (–¥–ª—è Remember Me)
            let userData = localStorage.getItem('user');
            if (userData) return JSON.parse(userData);

            // –ó–∞—Ç–µ–º sessionStorage
            userData = sessionStorage.getItem('user');
            return userData ? JSON.parse(userData) : null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }

    // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ Authorization header
    getAuthHeader() {
        const token = this.getAuthToken();
        const tokenType = localStorage.getItem('tokenType') || sessionStorage.getItem('tokenType') || 'Bearer';
        return token ? `${tokenType} ${token}` : null;
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞
    async checkAuthentication() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ...');

        const token = this.getAuthToken();
        const userData = this.getUserData();

        if (!token || !userData) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            this.redirectToLogin();
            return;
        }

        console.log(`üîë –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.email}`);

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
        try {
            const authHeader = this.getAuthHeader();

            const response = await fetch(`${this.API_BASE_URL}/api/auth/validate-token`, {
                method: 'POST',
                headers: {
                    'Authorization': authHeader,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const result = await response.json();
                if (result.valid) {
                    console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥');
                    this.loadDashboard(userData);
                } else {
                    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
                    this.redirectToLogin();
                }
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', response.status);
                this.redirectToLogin();
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            this.redirectToLogin();
        }
    }

    // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async loadDashboard(userData) {
        console.log(`üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–ª—è ${userData.email} (${userData.userRole})`);

        try {
            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—à–±–æ—Ä–¥–∞
            const authHeader = this.getAuthHeader();

            const response = await fetch(`${this.API_BASE_URL}/dashboard/api/config`, {
                method: 'GET',
                headers: {
                    'Authorization': authHeader,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const config = await response.json();
                console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞:', config);

                // ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥
                this.renderDashboard(config);
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', response.status);
                this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        }
    }

    // ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å —Ä–æ–ª—å-–∑–∞–≤–∏—Å–∏–º—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
    renderDashboard(config) {
        const container = document.getElementById('dashboard-content');
        const userRole = config.user.role;

        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ header
        this.updateUserInfo(config.user);

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const template = this.getRoleTemplate(userRole);

        if (!template) {
            console.error('‚ùå –®–∞–±–ª–æ–Ω –¥–ª—è —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', userRole);
            this.showError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }

        // ‚úÖ –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
        const dashboardHtml = template.cloneNode(true);
        dashboardHtml.style.display = 'block';

        // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
        this.showRoleSections(dashboardHtml, userRole);

        container.innerHTML = '';
        container.appendChild(dashboardHtml);

        console.log(`‚úÖ –î–∞—à–±–æ—Ä–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –¥–ª—è —Ä–æ–ª–∏: ${userRole}`);
    }

    // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ header
    updateUserInfo(user) {
        const userNameElement = document.getElementById('user-name');
        const userRoleElement = document.getElementById('user-role');

        if (userNameElement) {
            userNameElement.textContent = user.firstName + ' ' + user.lastName;
        }

        if (userRoleElement) {
            userRoleElement.textContent = user.roleDisplayName;
        }
    }

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–æ–ª–∏
    getRoleTemplate(userRole) {
        const templateMap = {
            'BASE_USER': 'base-user-template',
            'BUSINESS_USER': 'business-user-template',
            'COURIER': 'courier-template',
            'ADMIN': 'admin-template'
        };

        const templateId = templateMap[userRole];
        if (!templateId) {
            console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å:', userRole);
            return null;
        }

        const template = document.getElementById(templateId);
        if (!template) {
            console.error('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', templateId);
            return null;
        }

        return template;
    }

    // ‚úÖ –ü–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
    showRoleSections(container, userRole) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        const allSections = container.querySelectorAll('.role-section');
        allSections.forEach(section => {
            section.style.display = 'none';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
        const roleSections = container.querySelectorAll(`[data-role="${userRole}"]`);
        roleSections.forEach(section => {
            section.style.display = 'block';
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
            section.style.animation = 'fadeInUp 0.6s ease forwards';
        });

        console.log(`‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ ${roleSections.length} —Å–µ–∫—Ü–∏–π –¥–ª—è —Ä–æ–ª–∏: ${userRole}`);
    }

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏
    getSectionTitle(section) {
        const titles = {
            'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'users': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'restaurants': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
            'orders': '–ó–∞–∫–∞–∑—ã',
            'favorites': '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
            'profile': '–ü—Ä–æ—Ñ–∏–ª—å',
            'deliveries': '–î–æ—Å—Ç–∞–≤–∫–∏',
            'earnings': '–ó–∞—Ä–∞–±–æ—Ç–æ–∫'
        };
        return titles[section] || section;
    }

    // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    async loadSection(section) {
        console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ü–∏—é: ${section}`);

        const contentElement = document.getElementById(`section-${section}`);

        if (!contentElement) {
            console.error(`‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–∫—Ü–∏–∏ ${section} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        contentElement.innerHTML = `
            <div style="text-align: center; padding: 20px; color: #718096;">
                <i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
            </div>
        `;

        try {
            const authHeader = this.getAuthHeader();

            const response = await fetch(`${this.API_BASE_URL}/dashboard/api/data/${section}`, {
                method: 'GET',
                headers: {
                    'Authorization': authHeader,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ ${section} –ø–æ–ª—É—á–µ–Ω—ã:`, data);

                // ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                this.renderSectionData(contentElement, section, data);
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ü–∏–∏ ${section}:`, response.status);
                contentElement.innerHTML = `
                    <div style="text-align: center; padding: 20px; color: #E53E3E;">
                        <i class="fas fa-exclamation-triangle"></i> 
                        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (${response.status})
                    </div>
                `;
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ü–∏–∏ ${section}:`, error);
            contentElement.innerHTML = `
                <div style="text-align: center; padding: 20px; color: #E53E3E;">
                    <i class="fas fa-exclamation-triangle"></i> 
                    –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
                </div>
            `;
        }
    }

    // ‚úÖ –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏
    renderSectionData(container, section, data) {
        if (data.status === 'coming_soon') {
            container.innerHTML = `
                <div style="text-align: center; padding: 30px;">
                    <div style="font-size: 48px; margin-bottom: 15px;">üöß</div>
                    <h3 style="color: #4A5568; margin-bottom: 10px;">${data.message}</h3>
                    <p style="color: #718096; font-size: 14px;">
                        –°–µ–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
                    </p>
                    <div style="margin-top: 15px; font-size: 12px; color: #A0AEC0;">
                        –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${new Date(data._meta.loadedAt).toLocaleString('ru-RU')}
                    </div>
                </div>
            `;
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
            container.innerHTML = `
                <div style="background: #1A202C; color: #E2E8F0; padding: 15px; border-radius: 8px; font-family: 'Courier New', monospace; font-size: 13px; line-height: 1.4;">
                    <pre>${JSON.stringify(data, null, 2)}</pre>
                </div>
            `;
        }
    }

    // ‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    async logout() {
        console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');

        try {
            const authHeader = this.getAuthHeader();

            if (authHeader) {
                await fetch(`${this.API_BASE_URL}/api/auth/logout`, {
                    method: 'POST',
                    headers: {
                        'Authorization': authHeader,
                        'Content-Type': 'application/json'
                    }
                });
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ logout:', error);
        } finally {
            // ‚úÖ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            this.clearAuthData();
            this.redirectToLogin();
        }
    }

    // ‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    clearAuthData() {
        const keys = ['authToken', 'tokenType', 'user', 'rememberMe', 'lastRememberMe'];
        keys.forEach(key => {
            localStorage.removeItem(key);
            sessionStorage.removeItem(key);
        });
        console.log('üßπ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
    }

    // ‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    redirectToLogin() {
        console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞');
        window.location.href = '/login?error=unauthorized';
    }

    // ‚úÖ –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    showError(message) {
        const container = document.getElementById('dashboard-content');
        if (container) {
            container.innerHTML = `
                <div class="error-message">
                    <div style="font-size: 64px; margin-bottom: 20px;">üòû</div>
                    <h2>–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</h2>
                    <p>${message}</p>
                    <div class="error-actions">
                        <button class="btn btn-primary" onclick="window.location.reload()">
                            <i class="fas fa-redo"></i> –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        </button>
                        <button class="btn btn-secondary" onclick="dashboardAuth.redirectToLogin()">
                            <i class="fas fa-home"></i> –ù–∞ –≥–ª–∞–≤–Ω—É—é
                        </button>
                    </div>
                </div>
            `;
        }
    }
}

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function () {
    window.dashboardAuth = new DashboardAuth();
});

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
    window.DashboardAuth = DashboardAuth;
}
