package com.example.foodfrontendservice.service;

import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.enums.UserRole;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import jakarta.servlet.http.HttpServletRequest;
@Service
@RequiredArgsConstructor
@Slf4j
public class DashboardService {

    private final UserIntegrationService userIntegrationService;

    /**
     * üîë –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Header Authorization –∏ Cookie
     */
    public String extractTokenFromRequest(HttpServletRequest request) {
        // ‚úÖ 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Authorization header
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            log.debug("üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ Authorization header");
            return token;
        }

        // ‚úÖ 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
        if (request.getCookies() != null) {
            for (var cookie : request.getCookies()) {
                if ("jwt".equals(cookie.getName()) || "authToken".equals(cookie.getName())) {
                    log.debug("üç™ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ cookie: {}", cookie.getName());
                    return cookie.getValue();
                }
            }
        }

        // ‚úÖ 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤)
        String tokenParam = request.getParameter("token");
        if (tokenParam != null && !tokenParam.isEmpty()) {
            log.debug("üîó –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ –∑–∞–ø—Ä–æ—Å–∞");
            return tokenParam;
        }

        log.debug("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ");
        return null;
    }

    /**
     * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω
     */
    public UserResponseDto getCurrentUserFromSession(HttpServletRequest request) {
        try {
            String token = extractTokenFromRequest(request);

            if (token == null) {
                log.debug("‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
                return null;
            }

            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ User Service
            UserResponseDto user = userIntegrationService.getUserByToken(token);

            if (user != null) {
                log.debug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω: {} ({})", user.getEmail(), user.getUserRole());
                return user;
            } else {
                log.debug("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É");
                return null;
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage());
            return null;
        }
    }

    /**
     * üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    public String getTokenFromSession(HttpServletRequest request) {
        return extractTokenFromRequest(request);
    }

    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean isUserAuthenticated(HttpServletRequest request) {
        try {
            String token = extractTokenFromRequest(request);

            if (token == null) {
                return false;
            }

            // ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            boolean isValid = userIntegrationService.validateToken(token);

            log.debug("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", isValid);
            return isValid;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", e.getMessage());
            return false;
        }
    }

    /**
     * üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean hasRole(HttpServletRequest request, UserRole requiredRole) {
        try {
            UserResponseDto user = getCurrentUserFromSession(request);

            if (user == null) {
                log.debug("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω");
                return false;
            }

            boolean hasRole = user.getUserRole() == requiredRole;
            log.debug("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    requiredRole, user.getEmail(), hasRole);

            return hasRole;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏: {}", e.getMessage());
            return false;
        }
    }



    /**
     * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
     */
    public TokenInfo getTokenInfo(HttpServletRequest request) {
        try {
            String token = extractTokenFromRequest(request);

            if (token == null) {
                return TokenInfo.builder()
                        .valid(false)
                        .message("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                        .build();
            }

            boolean isValid = userIntegrationService.validateToken(token);
            UserResponseDto user = null;

            if (isValid) {
                user = userIntegrationService.getUserByToken(token);
            }

            return TokenInfo.builder()
                    .valid(isValid)
                    .token(token.substring(0, Math.min(20, token.length())) + "...")
                    .user(user)
                    .message(isValid ? "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" : "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                    .build();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ: {}", e.getMessage());
            return TokenInfo.builder()
                    .valid(false)
                    .message("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: " + e.getMessage())
                    .build();
        }
    }

    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è logout)
     */
    public void clearUserSession(HttpServletRequest request) {
        try {
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            if (request.getSession(false) != null) {
                request.getSession().invalidate();
                log.debug("üßπ HTTP —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞");
            }

            // –¢–æ–∫–µ–Ω –æ—á–∏—â–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (localStorage/sessionStorage)
            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {}", e.getMessage());
        }
    }

    // ========== DTO –ö–õ–ê–°–°–´ ==========

    /**
     * DTO –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class TokenInfo {
        private Boolean valid;
        private String token;
        private UserResponseDto user;
        private String message;
        private java.time.LocalDateTime checkedAt = java.time.LocalDateTime.now();
    }
}