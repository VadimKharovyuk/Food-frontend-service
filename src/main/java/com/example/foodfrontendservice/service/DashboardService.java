package com.example.foodfrontendservice.service;

import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.enums.UserRole;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import jakarta.servlet.http.HttpServletRequest;
import java.util.Map;


@Service
@RequiredArgsConstructor
@Slf4j
public class DashboardService {

    private final UserIntegrationService userIntegrationService;

    /**
     * üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª—å-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
     */
    public String loadRoleSpecificDashboard(HttpServletRequest request, Model model,
                                            UserRole expectedRole, String viewName) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
            UserResponseDto user = (UserResponseDto) request.getSession().getAttribute("currentUser");
            String token = (String) request.getSession().getAttribute("authToken");

            // –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏, –ø–æ–ª—É—á–∞–µ–º –∑–∞–Ω–æ–≤–æ
            if (user == null || token == null) {
                token = extractToken(request);
                if (token != null) {
                    user = userIntegrationService.getCurrentUser("Bearer " + token);
                    if (user != null) {
                        request.getSession().setAttribute("currentUser", user);
                        request.getSession().setAttribute("authToken", token);
                    }
                }
            }

            if (user == null) {
                log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–æ–ª–∏: {}", expectedRole);
                return "redirect:/login?error=user_not_found";
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏
            if (user.getUserRole() != expectedRole) {
                log.warn("üö´ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–µ–π. –û–∂–∏–¥–∞–µ—Ç—Å—è: {}, –ø–æ–ª—É—á–µ–Ω–∞: {}",
                        expectedRole, user.getUserRole());
                return "redirect:/dashboard";
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—å
            model.addAttribute("user", user);
            model.addAttribute("userRole", user.getUserRole());
            model.addAttribute("roleDisplayName", user.getUserRole().getDisplayName());

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
            model.addAttribute("authToken", token);

            log.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ {} –¥–ª—è {}", expectedRole, user.getEmail());

            return viewName;

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Ä–æ–ª–∏ {}: {}", expectedRole, e.getMessage(), e);
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞");
            return "error/dashboard";
        }
    }

    /**
     * üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞ —Ä–æ–ª—å-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π
     */
    public String processDashboardRedirect(HttpServletRequest request) {
        log.info("üè† –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç IP: {}", getClientIP(request));

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            String token = extractToken(request);

            if (token == null) {
                log.warn("‚ùå –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return "redirect:/login?error=no_token";
            }

            log.debug("üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {}), –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", token.length());

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∞—Ç—Ä–∏–±—É—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Feign
            request.setAttribute("Authorization", "Bearer " + token);

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            UserResponseDto user = userIntegrationService.getCurrentUser("Bearer " + token);

            if (user == null || user.getUserRole() == null) {
                log.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä–æ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
                return "redirect:/login?error=invalid_user";
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
            request.getSession().setAttribute("currentUser", user);
            request.getSession().setAttribute("authToken", token);
            request.setAttribute("currentUser", user);

            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (—Ä–æ–ª—å: {}) —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
                    user.getEmail(), user.getUserRole());

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–æ–ª—å-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
            String roleBasedPath = "/dashboard/" + user.getUserRole().name();
            log.info("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {} –Ω–∞ {}", user.getEmail(), roleBasedPath);

            return "redirect:" + roleBasedPath;

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—à–±–æ—Ä–¥–∞: {}", e.getMessage(), e);
            return "redirect:/login?error=dashboard_error";
        }
    }

    /**
     * üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
     */
    public String processDashboardPost(HttpServletRequest request, Map<String, Object> requestBody) {
        log.info("üè† POST –∑–∞–ø—Ä–æ—Å –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç IP: {} —Å —Ç–µ–ª–æ–º: {}",
                getClientIP(request), requestBody);

        try {
            String token = extractTokenFromHeaders(request);

            if (token == null) {
                token = extractToken(request);
            }

            if (token == null) {
                log.warn("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ POST –∑–∞–ø—Ä–æ—Å–µ");
                return "redirect:/login?error=no_token";
            }

            log.debug("üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ POST (–¥–ª–∏–Ω–∞: {})", token.length());

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è Feign
            request.setAttribute("Authorization", "Bearer " + token);

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            UserResponseDto user = userIntegrationService.getCurrentUser("Bearer " + token);

            if (user == null || user.getUserRole() == null) {
                log.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return "redirect:/login?error=invalid_user";
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            request.getSession().setAttribute("currentUser", user);
            request.getSession().setAttribute("authToken", token);
            request.setAttribute("currentUser", user);

            log.info("‚úÖ POST: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (—Ä–æ–ª—å: {}) –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
                    user.getEmail(), user.getUserRole());

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            String roleBasedPath = "/dashboard/" + user.getUserRole().name();
            log.info("üîÑ POST –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: {}", roleBasedPath);

            return "redirect:" + roleBasedPath;

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –≤ POST –¥–∞—à–±–æ—Ä–¥–µ: {}", e.getMessage(), e);
            return "redirect:/login?error=dashboard_error";
        }
    }

    /**
     * üîë –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤)
     */
    private String extractTokenFromHeaders(HttpServletRequest request) {
        // Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ Authorization –∑–∞–≥–æ–ª–æ–≤–∫–µ");
            return authHeader.substring(7);
        }

        // –ö–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Auth-Token
        String customToken = request.getHeader("X-Auth-Token");
        if (customToken != null && !customToken.trim().isEmpty()) {
            log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ X-Auth-Token –∑–∞–≥–æ–ª–æ–≤–∫–µ");
            return customToken;
        }

        log.debug("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö");
        return null;
    }

    /**
     * üîë –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    private String extractToken(HttpServletRequest request) {
        log.debug("üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");

        // 1. Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ Authorization –∑–∞–≥–æ–ª–æ–≤–∫–µ");
            return authHeader.substring(7);
        }

        // 2. –ü–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ)
        String tokenParam = request.getParameter("token");
        if (tokenParam != null && !tokenParam.isEmpty()) {
            log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞");
            return tokenParam;
        }

        // 3. –ö–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        String customHeader = request.getHeader("X-Auth-Token");
        if (customHeader != null && !customHeader.isEmpty()) {
            log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ X-Auth-Token –∑–∞–≥–æ–ª–æ–≤–∫–µ");
            return customHeader;
        }

        // 4. –ò–∑ —Å–µ—Å—Å–∏–∏
        String sessionToken = (String) request.getSession().getAttribute("authToken");
        if (sessionToken != null && !sessionToken.isEmpty()) {
            log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏");
            return sessionToken;
        }

        log.warn("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤");
        return null;
    }

    /**
     * üåê –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
     */
    private String getClientIP(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }

        String xRealIP = request.getHeader("X-Real-IP");
        if (xRealIP != null && !xRealIP.isEmpty()) {
            return xRealIP;
        }

        return request.getRemoteAddr();
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
     */
    public UserResponseDto getCurrentUserFromSession(HttpServletRequest request) {
        return (UserResponseDto) request.getSession().getAttribute("currentUser");
    }

    /**
     * üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
     */
    public String getTokenFromSession(HttpServletRequest request) {
        return (String) request.getSession().getAttribute("authToken");
    }

    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean isUserAuthenticated(HttpServletRequest request) {
        UserResponseDto user = getCurrentUserFromSession(request);
        String token = getTokenFromSession(request);
        return user != null && token != null;
    }

    /**
     * üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean hasRole(HttpServletRequest request, UserRole requiredRole) {
        UserResponseDto user = getCurrentUserFromSession(request);
        return user != null && user.getUserRole() == requiredRole;
    }
}