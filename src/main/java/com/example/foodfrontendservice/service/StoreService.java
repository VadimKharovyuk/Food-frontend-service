package com.example.foodfrontendservice.service;

import com.example.foodfrontendservice.Client.StoreServiceClient;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.*;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.category.ApiResponse;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.store.CreateStoreDto;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.store.CreateStoreRequest;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.store.StoreCreationResponse;
import feign.FeignException;
import feign.RetryableException;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.multipart.MultipartFile;

@Service
@RequiredArgsConstructor
@Slf4j
public class StoreService {

    private final StoreServiceClient storeServiceClient;




    public ApiResponse<StoreResponseDto> createStore(CreateStoreRequest createStoreRequest) {
        log.debug("Creating store: {}", createStoreRequest.getName());

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            MultipartFile imageFile = createStoreRequest.getImageFile();

            if (imageFile == null || imageFile.isEmpty()) {
                log.warn("‚ö†Ô∏è No image file provided for store: {}", createStoreRequest.getName());
                return ApiResponse.error("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
            }

            // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            Long userId = getCurrentUserId();
            if (userId == null) {
                log.error("‚ùå No user ID found in request context");
                return ApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CreateStoreDto –¥–ª—è backend
            CreateStoreDto storeDto = convertToDto(createStoreRequest);

            log.info("üì∏ Sending store to backend: {} ({}) for user: {}",
                    createStoreRequest.getName(),
                    imageFile.getOriginalFilename(),
                    userId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ product-service
            ApiResponse<StoreResponseDto> response = storeServiceClient.createStore(storeDto, imageFile, userId);

            if (response != null && response.isSuccess()) {
                log.info("‚úÖ Successfully created store via backend: {}", createStoreRequest.getName());
                return response;
            } else {
                log.error("‚ùå Backend failed to create store: {}", response != null ? response.getMessage() : "null response");
                return response != null ? response : ApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω");
            }

        } catch (FeignException e) {
            log.error("üî• Feign error creating store: {}", createStoreRequest.getName(), e);
            return ApiResponse.error("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å backend —Å–µ—Ä–≤–∏—Å–æ–º: " + e.getMessage());
        } catch (Exception e) {
            log.error("üí• Error creating store: {}", createStoreRequest.getName(), e);
            return ApiResponse.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: " + e.getMessage());
        }
    }

    private Long getCurrentUserId() {
        try {
            HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();
            String userIdHeader = request.getHeader("X-User-Id");
            return userIdHeader != null ? Long.parseLong(userIdHeader) : null;
        } catch (Exception e) {
            log.error("Error getting current user ID", e);
            return null;
        }
    }

    private CreateStoreDto convertToDto(CreateStoreRequest request) {
        CreateStoreDto dto = new CreateStoreDto();
        dto.setName(request.getName());
        dto.setDescription(request.getDescription());
        dto.setStreet(request.getStreet());
        dto.setCity(request.getCity());
        dto.setRegion(request.getRegion());
        dto.setPostalCode(request.getPostalCode());
        dto.setCountry(request.getCountry());
        dto.setPhone(request.getPhone());
        dto.setEmail(request.getEmail());
        dto.setDeliveryRadius(request.getDeliveryRadius());
        dto.setDeliveryFee(request.getDeliveryFee());
        dto.setEstimatedDeliveryTime(request.getEstimatedDeliveryTime());
        dto.setIsActive(request.getIsActive());
        // –ù–ï –∫–æ–ø–∏—Ä—É–µ–º imageFile - –æ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ Feign
        return dto;
    }

    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
     */
    private void validateCreateRequest(CreateStoreRequest request) {
        if (request.getName() == null || request.getName().trim().isEmpty()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
        }

        if (request.getStreet() == null || request.getStreet().trim().isEmpty()) {
            throw new IllegalArgumentException("–ê–¥—Ä–µ—Å (—É–ª–∏—Ü–∞) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
        }

        if (request.getCity() == null || request.getCity().trim().isEmpty()) {
            throw new IllegalArgumentException("–ì–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
        }

        if (request.getCountry() == null || request.getCountry().trim().isEmpty()) {
            throw new IllegalArgumentException("–°—Ç—Ä–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞");
        }

        if (request.getDeliveryRadius() != null && (request.getDeliveryRadius() < 1 || request.getDeliveryRadius() > 50)) {
            throw new IllegalArgumentException("–†–∞–¥–∏—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 –∫–º");
        }

        if (request.getEstimatedDeliveryTime() != null &&
                (request.getEstimatedDeliveryTime() < 10 || request.getEstimatedDeliveryTime() > 180)) {
            throw new IllegalArgumentException("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 180 –º–∏–Ω—É—Ç");
        }

        log.debug("‚úÖ Validation passed for store: {}", request.getName());
    }







    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è UI (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
     * @return –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    public StoreUIResponseWrapper getStoresForUI() {
        log.debug("üè™ Getting stores for UI from product service");

        try {
            ResponseEntity<StoreUIResponseWrapper> response = storeServiceClient.getStoresForUI();

            if (response.getBody() != null) {
                log.debug("‚úÖ Successfully retrieved {} stores for UI",
                        response.getBody().getTotalCount());
                return response.getBody();
            } else {
                log.warn("‚ö†Ô∏è Empty response from product service for UI stores");
                return StoreUIResponseWrapper.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö");
            }

        } catch (Exception e) {
            log.error("‚ùå Error calling product service for UI stores", e);
            return StoreUIResponseWrapper.error("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     * @param page –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @param size —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @return –∫—Ä–∞—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤
     */
    public StoreBriefResponseWrapper getStoresBrief(int page, int size) {
        log.debug("üè™ Getting brief stores from product service: page={}, size={}", page, size);

        try {
            ResponseEntity<StoreBriefResponseWrapper> response =
                    storeServiceClient.getStoresBrief(page, size);

            if (response.getBody() != null) {
                log.debug("‚úÖ Successfully retrieved {} brief stores for page {}",
                        response.getBody().getTotalCount(), page);
                return response.getBody();
            } else {
                log.warn("‚ö†Ô∏è Empty response from product service for brief stores");
                return StoreBriefResponseWrapper.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö");
            }

        } catch (Exception e) {
            log.error("‚ùå Error calling product service for brief stores: page={}, size={}",
                    page, size, e);
            return StoreBriefResponseWrapper.error("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
     * @param page –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @param size —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @return –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤
     */
    public StoreResponseWrapper getActiveStores(int page, int size) {
        log.debug("üè™ Getting active stores from product service: page={}, size={}", page, size);

        try {
            ResponseEntity<StoreResponseWrapper> response =
                    storeServiceClient.getActiveStores(page, size);

            if (response.getBody() != null) {
                log.debug("‚úÖ Successfully retrieved {} active stores for page {}",
                        response.getBody().getTotalCount(), page);
                return response.getBody();
            } else {
                log.warn("‚ö†Ô∏è Empty response from product service for active stores");
                return StoreResponseWrapper.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö");
            }

        } catch (Exception e) {
            log.error("‚ùå Error calling product service for active stores: page={}, size={}",
                    page, size, e);
            return StoreResponseWrapper.error("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–ª–∞–¥–µ–ª—å—Ü–∞)
     * userId –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-User-Id –±–ª–∞–≥–æ–¥–∞—Ä—è FeignAuthInterceptor
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
     * @param page –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @param size —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @return –º–∞–≥–∞–∑–∏–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
     */
    public StoreResponseWrapper getMyStores(Long userId, int page, int size) {
        log.debug("üè™ Getting my stores for user {} from product service: page={}, size={}",
                userId, page, size);

        try {
            // userId –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-User-Id
            ResponseEntity<StoreResponseWrapper> response =
                    storeServiceClient.getMyStores(page, size);

            if (response.getBody() != null) {
                log.debug("‚úÖ Successfully retrieved {} my stores for user {} on page {}",
                        response.getBody().getTotalCount(), userId, page);
                return response.getBody();
            } else {
                log.warn("‚ö†Ô∏è Empty response from product service for user {} stores", userId);
                return StoreResponseWrapper.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã");
            }

        } catch (Exception e) {
            log.error("‚ùå Error calling product service for user {} stores: page={}, size={}",
                    userId, page, size, e);
            return StoreResponseWrapper.error("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
     * @return –±–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    public StoreStatsDto getStoreStats() {
        log.debug("üìä Getting store statistics");

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
            StoreBriefResponseWrapper briefStores = getStoresBrief(0, 1);

            if (briefStores.getSuccess()) {
                return StoreStatsDto.builder()
                        .totalActiveStores(briefStores.getTotalCount())
                        .hasStores(briefStores.getTotalCount() > 0)
                        .build();
            } else {
                return StoreStatsDto.builder()
                        .totalActiveStores(0)
                        .hasStores(false)
                        .build();
            }

        } catch (Exception e) {
            log.error("‚ùå Error getting store statistics", e);
            return StoreStatsDto.builder()
                    .totalActiveStores(0)
                    .hasStores(false)
                    .build();
        }
    }
}