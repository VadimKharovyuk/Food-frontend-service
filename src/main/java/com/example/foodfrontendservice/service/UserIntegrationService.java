package com.example.foodfrontendservice.service;
import com.example.foodfrontendservice.Client.UserServiceClient;
import com.example.foodfrontendservice.dto.*;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.category.ApiResponse;
import com.example.foodfrontendservice.enums.UserRole;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.List;


@Service
@RequiredArgsConstructor
@Slf4j
public class UserIntegrationService {

    private final UserServiceClient userServiceClient;



    public AuthResponseDto loginUser(LoginRequestDto loginRequest) {
        try {
            log.info("üîó –í—ã–∑–æ–≤ User Service –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", loginRequest.getEmail());

            // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–π endpoint
            AuthResponseDto response = userServiceClient.login(loginRequest);

            if (response != null && response.getUser() != null) {
                log.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ User Service: {}", response.getUser().getEmail());
                return response;
            } else {
                throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç User Service");
            }

        } catch (feign.RetryableException e) {
            log.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ User Service: {}", e.getMessage());
            throw new RuntimeException("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É.");

        } catch (feign.FeignException.Unauthorized e) {
            log.error("üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ User Service: {}", e.getMessage());
            throw new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");

        } catch (feign.FeignException.ServiceUnavailable e) {
            log.error("üö´ User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e.getMessage());
            throw new RuntimeException("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");

        } catch (feign.FeignException e) {
            log.error("üåê –û—à–∏–±–∫–∞ Feign –ø—Ä–∏ –≤—ã–∑–æ–≤–µ User Service: {} - {}", e.status(), e.getMessage());

            if (e.status() == 401) {
                throw new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
            } else if (e.status() == 404) {
                throw new RuntimeException("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            } else if (e.status() >= 500) {
                throw new RuntimeException("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
            } else {
                throw new RuntimeException("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage());
            }

        } catch (Exception e) {
            log.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ User Service login: {}", e.getMessage(), e);

            // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            String errorMessage = determineErrorMessage(e);
            throw new RuntimeException(errorMessage);
        }
    }

    /**
     * üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private String determineErrorMessage(Exception e) {
        String message = e.getMessage().toLowerCase();

        if (message.contains("connect timed out") || message.contains("connection refused")) {
            return "–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        } else if (message.contains("read timed out")) {
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.";
        } else if (message.contains("unknown host") || message.contains("name resolution")) {
            return "–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.";
        } else if (message.contains("eureka")) {
            return "–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.";
        } else {
            return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage();
        }
    }

    /**
     * üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É - –ú–ï–ñ–°–ï–†–í–ò–°–ù–´–ô –í–´–ó–û–í
     * –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –¥—Ä—É–≥–∏—Ö endpoints
     */
    public UserResponseDto getUserByToken(String token) {
        try {
            log.debug("üîó –í—ã–∑–æ–≤ User Service –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É");

            // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–π endpoint
            UserResponseDto user = userServiceClient.getUserByToken("Bearer " + token);

            log.debug("‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}", user.getEmail());
            return user;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage());
            throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }

    /**
     * üîó –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –ú–ï–ñ–°–ï–†–í–ò–°–ù–´–ô –í–´–ó–û–í
     * –î–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean validateToken(String token) {
        try {
            log.debug("üîó –í—ã–∑–æ–≤ User Service –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞");

            // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–π endpoint
            Boolean isValid = userServiceClient.validateTokenSimple("Bearer " + token);

            log.debug("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", isValid);
            return Boolean.TRUE.equals(isValid);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
            return false; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å—á–∏—Ç–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º
        }
    }


    // ========== REGISTRATION –ú–ï–¢–û–î–´ ==========

    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π
     */
    public ResponseEntity<List<UserRole>> getAvailableRoles() {
        try {
            log.debug("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –∏–∑ User Service");

            ResponseEntity<List<UserRole>> response = userServiceClient.getAvailableRoles();
            List<UserRole> roles = response.getBody();

            log.debug("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ä–æ–ª–µ–π", roles != null ? roles.size() : 0);
            return response;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {}", e.getMessage());

            // Fallback —Ä–æ–ª–∏
            List<UserRole> fallbackRoles = List.of(UserRole.BASE_USER, UserRole.BUSINESS_USER);
            return ResponseEntity.ok(fallbackRoles);
        }
    }

    /**
     * üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public ResponseEntity<UserResponseDto> registerUser(UserRegistrationDto registrationDto) {
        try {
            log.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ User Service: {}", registrationDto.getEmail());

            ResponseEntity<UserResponseDto> response = userServiceClient.register(registrationDto);
            UserResponseDto user = response.getBody();

            if (user != null) {
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (ID: {})",
                        user.getEmail(), user.getId());
            }

            return response;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email
     */
    public ResponseEntity<Boolean> checkEmailAvailability(String email) {
        try {
            log.debug("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email: {}", email);

            ResponseEntity<Boolean> response = userServiceClient.checkEmailAvailability(email);
            Boolean isAvailable = response.getBody();

            log.debug("‚úÖ Email {} - –¥–æ—Å—Ç—É–ø–µ–Ω: {}", email, isAvailable);
            return response;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email: {}", e.getMessage());

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å—á–∏—Ç–∞–µ–º –∑–∞–Ω—è—Ç—ã–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return ResponseEntity.ok(false);
        }
    }

    /**
     * üß™ –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    public ResponseEntity<String> testRegistrationService() {
        try {
            log.debug("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Registration Service");

            ResponseEntity<String> response = userServiceClient.testRegistrationService();
            String result = response.getBody();

            log.debug("‚úÖ Registration Service —Ç–µ—Å—Ç: {}", result);
            return response;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e.getMessage());
            return ResponseEntity.status(503).body("Service Unavailable: " + e.getMessage());
        }
    }

    /**
     * DTO –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class ServiceConnectionStats {
        private Boolean authServiceAvailable;
        private Boolean registrationServiceAvailable;
        private Integer totalAvailableRoles;
        private java.time.LocalDateTime lastChecked;
    }
}