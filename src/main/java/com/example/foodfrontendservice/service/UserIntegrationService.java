//package com.example.foodfrontendservice.service;
//import com.example.foodfrontendservice.Client.UserServiceClient;
//import com.example.foodfrontendservice.dto.AuthResponseDto;
//import com.example.foodfrontendservice.dto.LoginRequestDto;
//import com.example.foodfrontendservice.dto.UserRegistrationDto;
//import com.example.foodfrontendservice.dto.UserResponseDto;
//import com.example.foodfrontendservice.enums.UserRole;
//import lombok.RequiredArgsConstructor;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.http.ResponseEntity;
//import org.springframework.stereotype.Service;
//import java.util.List;
//
//@Service
//@RequiredArgsConstructor
//@Slf4j
//public class UserIntegrationService {
//
//    private final UserServiceClient userServiceClient;
//
//
//    public List<UserRole> getAvailableRoles() {
//        try {
//            log.info("üìã –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ User Service");
//            ResponseEntity<List<UserRole>> response = userServiceClient.getAvailableRoles();
//
//            if (response.getBody() != null) {
//                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ä–æ–ª–µ–π", response.getBody().size());
//                return response.getBody();
//            } else {
//                log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π");
//                return List.of();
//            }
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {}", e.getMessage(), e);
//            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π");
//        }
//    }
//
//    public UserResponseDto registerUser(UserRegistrationDto registrationDto) {
//        try {
//            log.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
//            ResponseEntity<UserResponseDto> response = userServiceClient.register(registrationDto);
//
//            if (response.getBody() != null) {
//                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {}", registrationDto.getEmail());
//                return response.getBody();
//            } else {
//                log.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
//                throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
//            }
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", registrationDto.getEmail(), e.getMessage(), e);
//            throw new RuntimeException("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
//        }
//    }
//
//    public Boolean checkEmailAvailability(String email) {
//        try {
//            log.debug("üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å email: {}", email);
//            ResponseEntity<Boolean> response = userServiceClient.checkEmailAvailability(email);
//
//            Boolean result = response.getBody();
//            log.debug("‚úÖ Email {} {}", email, Boolean.TRUE.equals(result) ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "–∑–∞–Ω—è—Ç");
//            return result != null ? result : true;
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email {}: {}", email, e.getMessage());
//            return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º
//        }
//    }
//
//    public AuthResponseDto loginUser(LoginRequestDto loginRequest) {
//        try {
//            log.info("üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", loginRequest.getEmail());
//            ResponseEntity<AuthResponseDto> response = userServiceClient.login(loginRequest);
//
//            if (response.getBody() != null && response.getBody().getToken() != null) {
//                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {}", loginRequest.getEmail());
//                return response.getBody();
//            } else {
//                log.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", loginRequest.getEmail());
//                throw new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
//            }
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", loginRequest.getEmail(), e.getMessage(), e);
//            throw new RuntimeException("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage());
//        }
//    }
//
//
//    public UserResponseDto getCurrentUser(String authHeader) {
//        try {
//            log.info("üë§ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É");
//
//
//            String finalAuthHeader = authHeader;
//            if (!authHeader.startsWith("Bearer ")) {
//                finalAuthHeader = "Bearer " + authHeader;
//                log.debug("üîß –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å Bearer –∫ —Ç–æ–∫–µ–Ω—É");
//            }
//
//            ResponseEntity<UserResponseDto> response = userServiceClient.getCurrentUser(finalAuthHeader);
//
//            if (response.getBody() != null) {
//                UserResponseDto user = response.getBody();
//                log.info("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {} (—Ä–æ–ª—å: {})", user.getEmail(), user.getUserRole());
//                return user;
//            } else {
//                log.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
//                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
//            }
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {}", e.getMessage(), e);
//            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
//        }
//    }
//
//
//    public Boolean validateToken(String authHeader) {
//        try {
//            log.debug("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω");
//
//            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
//            String finalAuthHeader = authHeader;
//            if (!authHeader.startsWith("Bearer ")) {
//                finalAuthHeader = "Bearer " + authHeader;
//            }
//
//            ResponseEntity<Boolean> response = userServiceClient.validateToken(finalAuthHeader);
//            Boolean isValid = response.getBody();
//
//            log.debug("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", isValid);
//            return Boolean.TRUE.equals(isValid);
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
//            return false;
//        }
//    }
//
//}

package com.example.foodfrontendservice.service;

import com.example.foodfrontendservice.Client.UserServiceClient;
import com.example.foodfrontendservice.dto.AuthResponseDto;
import com.example.foodfrontendservice.dto.LoginRequestDto;
import com.example.foodfrontendservice.dto.UserRegistrationDto;
import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.enums.UserRole;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class UserIntegrationService {

    private final UserServiceClient userServiceClient;

    public List<UserRole> getAvailableRoles() {
        try {
            log.info("üìã –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ User Service");
            ResponseEntity<List<UserRole>> response = userServiceClient.getAvailableRoles();

            if (response.getBody() != null) {
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ä–æ–ª–µ–π", response.getBody().size());
                return response.getBody();
            } else {
                log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π");
                return List.of();
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {}", e.getMessage(), e);
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π");
        }
    }

    public UserResponseDto registerUser(UserRegistrationDto registrationDto) {
        try {
            log.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
            ResponseEntity<UserResponseDto> response = userServiceClient.register(registrationDto);

            if (response.getBody() != null) {
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {}", registrationDto.getEmail());
                return response.getBody();
            } else {
                log.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
                throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", registrationDto.getEmail(), e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    public Boolean checkEmailAvailability(String email) {
        try {
            log.debug("üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å email: {}", email);
            ResponseEntity<Boolean> response = userServiceClient.checkEmailAvailability(email);

            Boolean result = response.getBody();
            log.debug("‚úÖ Email {} {}", email, Boolean.TRUE.equals(result) ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "–∑–∞–Ω—è—Ç");
            return result != null ? result : true;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email {}: {}", email, e.getMessage());
            return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º
        }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ loginUser —Å null-safe –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    public AuthResponseDto loginUser(LoginRequestDto loginRequest) {
        try {
            log.info("üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", loginRequest.getEmail());

            // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            log.info("üç™ Remember Me –≤ –∑–∞–ø—Ä–æ—Å–µ: {} (type: {})",
                    loginRequest.getRememberMe(),
                    loginRequest.getRememberMe() != null ? loginRequest.getRememberMe().getClass().getSimpleName() : "null");

            // ‚úÖ –õ–û–ì–ò–†–£–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –ó–ê–ü–†–û–°–ê
            log.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ User Service:");
            log.info("   üìß Email: {}", loginRequest.getEmail());
            log.info("   üîí Password: {}", loginRequest.getPassword() != null ? "[PROTECTED]" : "null");
            log.info("   üç™ Remember Me: {}", loginRequest.getRememberMe());

            ResponseEntity<AuthResponseDto> response = userServiceClient.login(loginRequest);

            if (response.getBody() != null && response.getBody().getToken() != null) {
                AuthResponseDto authResponse = response.getBody();

                // ‚úÖ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê
                log.info("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç User Service:");
                log.info("   üé´ Token: {}", authResponse.getToken() != null ? "PRESENT" : "NULL");
                log.info("   üè∑Ô∏è Type: {}", authResponse.getType());
                log.info("   üë§ User: {}", authResponse.getUser() != null ? authResponse.getUser().getEmail() : "NULL");
                log.info("   üç™ Remember Me –≤ –æ—Ç–≤–µ—Ç–µ: {} (type: {})",
                        authResponse.getRememberMe(),
                        authResponse.getRememberMe() != null ? authResponse.getRememberMe().getClass().getSimpleName() : "null");

                // ‚úÖ NULL-SAFE –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø
                Boolean requestRememberMe = loginRequest.getRememberMe() != null ? loginRequest.getRememberMe() : false;
                Boolean responseRememberMe = authResponse.getRememberMe() != null ? authResponse.getRememberMe() : false;

                if (!requestRememberMe.equals(responseRememberMe)) {
                    log.warn("‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï Remember Me!");
                    log.warn("   –û—Ç–ø—Ä–∞–≤–∏–ª–∏: {} (normalized: {})", loginRequest.getRememberMe(), requestRememberMe);
                    log.warn("   –ü–æ–ª—É—á–∏–ª–∏: {} (normalized: {})", authResponse.getRememberMe(), responseRememberMe);
                }

                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {}", loginRequest.getEmail());
                return authResponse;
            } else {
                log.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", loginRequest.getEmail());
                log.error("   Response body: {}", response.getBody());
                log.error("   Token: {}", response.getBody() != null ? response.getBody().getToken() : "NULL");
                throw new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", loginRequest.getEmail(), e.getMessage(), e);

            // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
            if (e.getCause() != null) {
                log.error("‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: {}", e.getCause().getMessage());
            }

            throw new RuntimeException("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage());
        }
    }
//    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú REMEMBER ME
//    public AuthResponseDto loginUser(LoginRequestDto loginRequest) {
//        try {
//            log.info("üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", loginRequest.getEmail());
//
//            // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
//            log.info("üç™ Remember Me –≤ –∑–∞–ø—Ä–æ—Å–µ: {} (type: {})",
//                    loginRequest.getRememberMe(),
//                    loginRequest.getRememberMe() != null ? loginRequest.getRememberMe().getClass().getSimpleName() : "null");
//
//            // ‚úÖ –õ–û–ì–ò–†–£–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –ó–ê–ü–†–û–°–ê
//            log.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ User Service:");
//            log.info("   üìß Email: {}", loginRequest.getEmail());
//            log.info("   üîí Password: {}", loginRequest.getPassword() != null ? "[PROTECTED]" : "null");
//            log.info("   üç™ Remember Me: {}", loginRequest.getRememberMe());
//
//            ResponseEntity<AuthResponseDto> response = userServiceClient.login(loginRequest);
//
//            if (response.getBody() != null && response.getBody().getToken() != null) {
//                AuthResponseDto authResponse = response.getBody();
//
//                // ‚úÖ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê
//                log.info("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç User Service:");
//                log.info("   üé´ Token: {}", authResponse.getToken() != null ? "PRESENT" : "NULL");
//                log.info("   üè∑Ô∏è Type: {}", authResponse.getType());
//                log.info("   üë§ User: {}", authResponse.getUser() != null ? authResponse.getUser().getEmail() : "NULL");
//                log.info("   üç™ Remember Me –≤ –æ—Ç–≤–µ—Ç–µ: {} (type: {})",
//                        authResponse.getRememberMe(),
//                        authResponse.getRememberMe() != null ? authResponse.getRememberMe().getClass().getSimpleName() : "null");
//
//                // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï
//                if (!loginRequest.getRememberMe().equals(authResponse.getRememberMe())) {
//                    log.warn("‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï Remember Me!");
//                    log.warn("   –û—Ç–ø—Ä–∞–≤–∏–ª–∏: {}", loginRequest.getRememberMe());
//                    log.warn("   –ü–æ–ª—É—á–∏–ª–∏: {}", authResponse.getRememberMe());
//                }
//
//                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {}", loginRequest.getEmail());
//                return authResponse;
//            } else {
//                log.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", loginRequest.getEmail());
//                log.error("   Response body: {}", response.getBody());
//                log.error("   Token: {}", response.getBody() != null ? response.getBody().getToken() : "NULL");
//                throw new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
//            }
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", loginRequest.getEmail(), e.getMessage(), e);
//
//            // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
//            if (e.getCause() != null) {
//                log.error("‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: {}", e.getCause().getMessage());
//            }
//
//            throw new RuntimeException("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage());
//        }
//    }

    public UserResponseDto getCurrentUser(String authHeader) {
        try {
            log.info("üë§ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É");

            String finalAuthHeader = authHeader;
            if (!authHeader.startsWith("Bearer ")) {
                finalAuthHeader = "Bearer " + authHeader;
                log.debug("üîß –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å Bearer –∫ —Ç–æ–∫–µ–Ω—É");
            }

            ResponseEntity<UserResponseDto> response = userServiceClient.getCurrentUser(finalAuthHeader);

            if (response.getBody() != null) {
                UserResponseDto user = response.getBody();
                log.info("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {} (—Ä–æ–ª—å: {})", user.getEmail(), user.getUserRole());
                return user;
            } else {
                log.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }

    public Boolean validateToken(String authHeader) {
        try {
            log.debug("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω");

            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            String finalAuthHeader = authHeader;
            if (!authHeader.startsWith("Bearer ")) {
                finalAuthHeader = "Bearer " + authHeader;
            }

            ResponseEntity<Boolean> response = userServiceClient.validateToken(finalAuthHeader);
            Boolean isValid = response.getBody();

            log.debug("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", isValid);
            return Boolean.TRUE.equals(isValid);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
            return false;
        }
    }
}