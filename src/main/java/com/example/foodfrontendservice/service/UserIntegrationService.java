package com.example.foodfrontendservice.service;
import com.example.foodfrontendservice.Client.UserServiceClient;
import com.example.foodfrontendservice.dto.AuthResponseDto;
import com.example.foodfrontendservice.dto.LoginRequestDto;
import com.example.foodfrontendservice.dto.UserRegistrationDto;
import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.enums.UserRole;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class UserIntegrationService {

    private final UserServiceClient userServiceClient;


    public List<UserRole> getAvailableRoles() {
        try {
            log.info("üìã –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ User Service");
            ResponseEntity<List<UserRole>> response = userServiceClient.getAvailableRoles();

            if (response.getBody() != null) {
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ä–æ–ª–µ–π", response.getBody().size());
                return response.getBody();
            } else {
                log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π");
                return List.of();
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {}", e.getMessage(), e);
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π");
        }
    }

    public UserResponseDto registerUser(UserRegistrationDto registrationDto) {
        try {
            log.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
            ResponseEntity<UserResponseDto> response = userServiceClient.register(registrationDto);

            if (response.getBody() != null) {
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {}", registrationDto.getEmail());
                return response.getBody();
            } else {
                log.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
                throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", registrationDto.getEmail(), e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    public Boolean checkEmailAvailability(String email) {
        try {
            log.debug("üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å email: {}", email);
            ResponseEntity<Boolean> response = userServiceClient.checkEmailAvailability(email);

            Boolean result = response.getBody();
            log.debug("‚úÖ Email {} {}", email, Boolean.TRUE.equals(result) ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "–∑–∞–Ω—è—Ç");
            return result != null ? result : true;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email {}: {}", email, e.getMessage());
            return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º
        }
    }

    public AuthResponseDto loginUser(LoginRequestDto loginRequest) {
        try {
            log.info("üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", loginRequest.getEmail());
            ResponseEntity<AuthResponseDto> response = userServiceClient.login(loginRequest);

            if (response.getBody() != null && response.getBody().getToken() != null) {
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {}", loginRequest.getEmail());
                return response.getBody();
            } else {
                log.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", loginRequest.getEmail());
                throw new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", loginRequest.getEmail(), e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage());
        }
    }


    public UserResponseDto getCurrentUser(String authHeader) {
        try {
            log.info("üë§ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É");


            String finalAuthHeader = authHeader;
            if (!authHeader.startsWith("Bearer ")) {
                finalAuthHeader = "Bearer " + authHeader;
                log.debug("üîß –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å Bearer –∫ —Ç–æ–∫–µ–Ω—É");
            }

            ResponseEntity<UserResponseDto> response = userServiceClient.getCurrentUser(finalAuthHeader);

            if (response.getBody() != null) {
                UserResponseDto user = response.getBody();
                log.info("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {} (—Ä–æ–ª—å: {})", user.getEmail(), user.getUserRole());
                return user;
            } else {
                log.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }


    public Boolean validateToken(String authHeader) {
        try {
            log.debug("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω");

            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            String finalAuthHeader = authHeader;
            if (!authHeader.startsWith("Bearer ")) {
                finalAuthHeader = "Bearer " + authHeader;
            }

            ResponseEntity<Boolean> response = userServiceClient.validateToken(finalAuthHeader);
            Boolean isValid = response.getBody();

            log.debug("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", isValid);
            return Boolean.TRUE.equals(isValid);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
            return false;
        }
    }

}