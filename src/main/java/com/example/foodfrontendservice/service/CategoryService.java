
package com.example.foodfrontendservice.service;
import com.example.foodfrontendservice.Client.CategoryServiceClient;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.category.*;
import feign.FeignException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class CategoryService {

    private final CategoryServiceClient categoryServiceClient;



    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     */
    public ListApiResponse<CategoryResponseDto> getAllActiveCategories() {
        log.debug("Getting all active categories from product service");

        try {
            ResponseEntity<ListApiResponse<CategoryResponseDto>> response =
                    categoryServiceClient.getAllActiveCategories();

            if (response.getBody() != null) {
                log.debug("Successfully retrieved {} active categories",
                        response.getBody().getTotalCount());
                return response.getBody();
            } else {
                log.warn("Empty response from product service for active categories");
                return ListApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
            }

        } catch (Exception e) {
            log.error("Error calling product service for active categories", e);
            return ListApiResponse.error("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
     */
    public ListApiResponse<CategoryResponseDto> getAllCategories() {
        log.debug("Getting all categories from product service");

        try {
            ResponseEntity<ListApiResponse<CategoryResponseDto>> response =
                    categoryServiceClient.getAllCategories();

            if (response.getBody() != null) {
                log.debug("Successfully retrieved {} total categories",
                        response.getBody().getTotalCount());
                return response.getBody();
            } else {
                log.warn("Empty response from product service for all categories");
                return ListApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
            }

        } catch (Exception e) {
            log.error("Error calling product service for all categories", e);
            return ListApiResponse.error("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     */
    public ListApiResponse<CategoryResponseDto> searchCategories(String name) {
        log.debug("Searching categories by name: {}", name);

        try {
            ResponseEntity<ListApiResponse<CategoryResponseDto>> response =
                    categoryServiceClient.searchCategories(name);

            if (response.getBody() != null) {
                log.debug("Successfully found {} categories for search: {}",
                        response.getBody().getTotalCount(), name);
                return response.getBody();
            } else {
                return ListApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
            }

        } catch (Exception e) {
            log.error("Error searching categories by name: {}", name, e);
            return ListApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
        }
    }

    // ================================
    // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–û–í - –ö–†–ê–¢–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (–ü–†–û–ï–ö–¶–ò–ò)
    // ================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–ª—è dropdown/—Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤)
     */
    public ListApiResponse<CategoryDto> getActiveCategoriesBrief() {
        log.debug("Getting brief active categories from product service");

        try {
            // –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log.info("Calling product-service at /api/categories/brief");

            ResponseEntity<ListApiResponse<CategoryDto>> response =
                    categoryServiceClient.getActiveCategoriesBrief();

            log.info("Response status: {}", response.getStatusCode());
            log.info("Response body is null: {}", response.getBody() == null);

            if (response.getBody() != null) {
                log.debug("Successfully retrieved {} brief categories",
                        response.getBody().getTotalCount());
                return response.getBody();
            } else {
                log.warn("Empty response from product service for brief categories");
                return ListApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
            }

        } catch (FeignException e) {
            log.error("Feign error calling product service: status={}, message={}",
                    e.status(), e.getMessage());
            return ListApiResponse.error("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤: " + e.getMessage());
        } catch (Exception e) {
            log.error("Unexpected error calling product service", e);
            return ListApiResponse.error("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤: " + e.getClass().getSimpleName());
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
     */
    public ListApiResponse<CategoryDto> getAllCategoriesBrief() {
        log.debug("Getting all brief categories from product service");

        try {
            ResponseEntity<ListApiResponse<CategoryDto>> response =
                    categoryServiceClient.getAllCategoriesBrief();

            if (response.getBody() != null) {
                return response.getBody();
            } else {
                return ListApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫—Ä–∞—Ç–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
            }

        } catch (Exception e) {
            log.error("Error calling product service for all brief categories", e);
            return ListApiResponse.error("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    public ListApiResponse<CategoryDto> searchCategoriesBrief(String name) {
        log.debug("Searching brief categories by name: {}", name);

        try {
            ResponseEntity<ListApiResponse<CategoryDto>> response =
                    categoryServiceClient.searchCategoriesBrief(name);

            if (response.getBody() != null) {
                return response.getBody();
            } else {
                return ListApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∫—Ä–∞—Ç–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
            }

        } catch (Exception e) {
            log.error("Error searching brief categories by name: {}", name, e);
            return ListApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Å–ø–∏—Å–∫—É ID
     */
    public ListApiResponse<CategoryDto> getCategoriesBriefByIds(List<Long> ids) {
        log.debug("Getting brief categories by IDs: {}", ids);

        try {
            ResponseEntity<ListApiResponse<CategoryDto>> response =
                    categoryServiceClient.getCategoriesBriefByIds(ids);

            if (response.getBody() != null) {
                return response.getBody();
            } else {
                return ListApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID");
            }

        } catch (Exception e) {
            log.error("Error getting brief categories by IDs: {}", ids, e);
            return ListApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ ID");
        }
    }

    // ================================
    // üîç –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô
    // ================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     */
    public ApiResponse<CategoryResponseDto> getCategoryById(Long id) {
        log.debug("Getting category by ID: {}", id);

        try {
            ResponseEntity<ApiResponse<CategoryResponseDto>> response =
                    categoryServiceClient.getCategoryById(id);

            if (response.getBody() != null) {
                return response.getBody();
            } else {
                return ApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
            }

        } catch (Exception e) {
            log.error("Error getting category by ID: {}", id, e);
            return ApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
     */
    public ApiResponse<CategoryDto> getCategoryBrief(Long id) {
        log.debug("Getting brief category by ID: {}", id);

        try {
            ResponseEntity<ApiResponse<CategoryDto>> response =
                    categoryServiceClient.getCategoryBrief(id);

            if (response.getBody() != null) {
                return response.getBody();
            } else {
                return ApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
            }

        } catch (Exception e) {
            log.error("Error getting brief category by ID: {}", id, e);
            return ApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        }
    }

    // ================================
    // ‚úèÔ∏è –°–û–ó–î–ê–ù–ò–ï –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô (ADMIN ONLY)
    // ================================


    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
     */
    public ApiResponse<CategoryResponseDto> createCategory(CreateCategoryDto createCategoryDto) {
        log.debug("Creating category: {}", createCategoryDto.getName());

        try {
            // userId –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ FeignAuthInterceptor –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ X-User-Id
            ResponseEntity<ApiResponse<CategoryResponseDto>> response =
                    categoryServiceClient.createCategory(createCategoryDto);

            if (response.getBody() != null) {
                log.debug("Successfully created category: {}", createCategoryDto.getName());
                return response.getBody();
            } else {
                return ApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
            }

        } catch (Exception e) {
            log.error("Error creating category: {}", createCategoryDto.getName(), e);
            return ApiResponse.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
     */
    public ApiResponse<CategoryResponseDto> updateCategory(Long id, CreateCategoryDto updateCategoryDto) {
        log.debug("Updating category ID: {} with name: {}", id, updateCategoryDto.getName());

        try {
            // userId –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ FeignAuthInterceptor –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ X-User-Id
            ResponseEntity<ApiResponse<CategoryResponseDto>> response =
                    categoryServiceClient.updateCategory(id, updateCategoryDto);

            if (response.getBody() != null) {
                log.debug("Successfully updated category ID: {}", id);
                return response.getBody();
            } else {
                return ApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
            }

        } catch (Exception e) {
            log.error("Error updating category ID: {}", id, e);
            return ApiResponse.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
     * userId –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ FeignAuthInterceptor
     */
    public ApiResponse<Void> deleteCategory(Long id) {
        log.debug("Deleting category: {}", id);

        try {
            ResponseEntity<ApiResponse<Void>> response =
                    categoryServiceClient.deleteCategory(id);

            if (response.getBody() != null) {
                log.debug("Successfully deleted category ID: {}", id);
                return response.getBody();
            } else {
                return ApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
            }

        } catch (Exception e) {
            log.error("Error deleting category: {}", id, e);
            return ApiResponse.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * userId –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ FeignAuthInterceptor
     */
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    public ApiResponse<CategoryResponseDto> toggleCategoryStatus(Long id) {
        log.debug("Toggling category status: {}", id);

        try {
            ResponseEntity<ApiResponse<CategoryResponseDto>> response =
                    categoryServiceClient.toggleCategoryStatus(id);

            if (response.getBody() != null) {
                log.debug("Successfully toggled status for category ID: {}", id);
                return response.getBody();
            } else {
                return ApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
            }

        } catch (Exception e) {
            log.error("Error toggling category status: {}", id, e);
            return ApiResponse.error("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + e.getMessage());
        }
    }

    // ================================
    // üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    public ApiResponse<Long> getActiveCategoriesCount() {
        log.debug("Getting active categories count");

        try {
            ResponseEntity<ApiResponse<Long>> response =
                    categoryServiceClient.getActiveCategoriesCount();

            if (response.getBody() != null) {
                return response.getBody();
            } else {
                return ApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
            }

        } catch (Exception e) {
            log.error("Error getting categories count", e);
            return ApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏
     */
    public ApiResponse<Boolean> checkCategoryExists(String name) {
        log.debug("Checking if category exists: {}", name);

        try {
            ResponseEntity<ApiResponse<Boolean>> response =
                    categoryServiceClient.checkCategoryExists(name);

            if (response.getBody() != null) {
                return response.getBody();
            } else {
                return ApiResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
            }

        } catch (Exception e) {
            log.error("Error checking category existence: {}", name, e);
            return ApiResponse.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    public ApiResponse<String> healthCheck() {
        try {
            ResponseEntity<ApiResponse<String>> response =
                    categoryServiceClient.healthCheck();

            if (response.getBody() != null) {
                return response.getBody();
            } else {
                return ApiResponse.error("Health check failed");
            }

        } catch (Exception e) {
            log.error("Error during health check", e);
            return ApiResponse.error("Category service health check failed");
        }
    }
}
