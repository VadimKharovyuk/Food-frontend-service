package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.dto.PRODUCTSERVICE.StoreBriefDto;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.StoreBriefResponseWrapper;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Favorite.FavoriteStoreApiResponse;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Favorite.FavoriteStoreResponseDto;
import com.example.foodfrontendservice.service.FavoriteStoreClientService;
import com.example.foodfrontendservice.service.StoreService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
 */
@Controller
@RequiredArgsConstructor
@Slf4j
@RequestMapping("/stores")
public class StoreClientController {

    private final StoreService storeService;
    private final FavoriteStoreClientService favoriteStoreClientService;

    /**
     * –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–æ–≤
     * GET /
     * GET /stores
     */
    @GetMapping()
    public String showStoresPage(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "12") int size,
            @RequestParam(required = false) String search,
            @RequestParam(required = false) String city,
            @RequestParam(required = false) String sortBy,
            @RequestHeader(value = "Authorization", required = false) String authHeader,
            Model model) {

        log.info("üè™ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤: page={}, size={}, search={}, city={}, sortBy={}",
                page, size, search, city, sortBy);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            StoreBriefResponseWrapper storesResponse = storeService.getStoresBrief(page, size);

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –≤ –º–æ–¥–µ–ª—å
            model.addAttribute("stores", storesResponse.getStores());
            model.addAttribute("totalCount", storesResponse.getTotalCount());
            model.addAttribute("currentPage", page);
            model.addAttribute("pageSize", size);
            model.addAttribute("hasNext", storesResponse.getHasNext());
            model.addAttribute("hasPrevious", storesResponse.getHasPrevious());

            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            model.addAttribute("search", search);
            model.addAttribute("city", city);
            model.addAttribute("sortBy", sortBy);

            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            int totalPages = (int) Math.ceil((double) storesResponse.getTotalCount() / size);
            model.addAttribute("totalPages", totalPages);
            model.addAttribute("nextPage", page + 1);
            model.addAttribute("previousPage", page - 1);

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String jwt = authHeader.substring(7);
                Set<Long> favoriteStoreIds = getUserFavoriteStoreIds(jwt);
                model.addAttribute("favoriteStoreIds", favoriteStoreIds);
                model.addAttribute("isAuthenticated", true);

                log.debug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", favoriteStoreIds.size());
            } else {
                model.addAttribute("favoriteStoreIds", Set.of());
                model.addAttribute("isAuthenticated", false);
                log.debug("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            }

            log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {}",
                    storesResponse.getStores().size(), page);

            return "stores/store-list";

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", e.getMessage(), e);
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤");
            model.addAttribute("stores", List.of());
            return "stores/store-list";
        }
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
     * GET /stores/{storeId}
     */
    @GetMapping("/stores/{storeId}")
    public String showStorePage(
            @PathVariable Long storeId,
            @RequestHeader(value = "Authorization", required = false) String authHeader,
            Model model) {

        log.info("üè™ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–∞: {}", storeId);

        try {
            // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
            // StoreDetailDto storeDetail = storeService.getStoreDetail(storeId);

            model.addAttribute("storeId", storeId);

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String jwt = authHeader.substring(7);
                boolean isFavorite = isStoreFavorite(jwt, storeId);
                model.addAttribute("isFavorite", isFavorite);
                model.addAttribute("isAuthenticated", true);
            } else {
                model.addAttribute("isFavorite", false);
                model.addAttribute("isAuthenticated", false);
            }

            return "stores/store-detail";

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–∞ {}: {}", storeId, e.getMessage(), e);
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞");
            return "stores/store-detail";
        }
    }

    /**
     * AJAX: –ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
     * GET /api/stores/ajax
     */
    @GetMapping("/api/stores/ajax")
    @ResponseBody
    public ResponseEntity<StoreBriefResponseWrapper> getStoresAjax(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "12") int size,
            @RequestParam(required = false) String search,
            @RequestParam(required = false) String city,
            @RequestParam(required = false) String sortBy) {

        log.info("üì° AJAX –∑–∞–ø—Ä–æ—Å –º–∞–≥–∞–∑–∏–Ω–æ–≤: page={}, size={}, search={}, city={}",
                page, size, search, city);

        try {
            StoreBriefResponseWrapper response = storeService.getStoresBrief(page, size);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ AJAX –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", e.getMessage(), e);
            return ResponseEntity.ok(StoreBriefResponseWrapper.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤"));
        }
    }

    /**
     * AJAX: –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
     * GET /api/stores/favorites
     */
    @GetMapping("/api/stores/favorites")
    @ResponseBody
    public ResponseEntity<FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>>> getFavoritesAjax(
            @RequestHeader("Authorization") String authHeader) {

        log.info("üì° AJAX –∑–∞–ø—Ä–æ—Å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤");

        try {
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String jwt = authHeader.substring(7);
                FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>> response =
                        favoriteStoreClientService.getMyFavorites(jwt);

                return ResponseEntity.ok(response);
            } else {
                return ResponseEntity.badRequest()
                        .body(FavoriteStoreApiResponse.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"));
            }
        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ AJAX –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {}", e.getMessage(), e);
            return ResponseEntity.ok(FavoriteStoreApiResponse.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"));
        }
    }

    /**
     * AJAX: –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –≤/–∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
     * POST /api/stores/{storeId}/toggle-favorite
     */
    @PostMapping("/api/stores/{storeId}/toggle-favorite")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> toggleFavoriteAjax(
            @PathVariable Long storeId,
            @RequestHeader("Authorization") String authHeader) {

        log.info("üì° AJAX –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: {}", storeId);

        try {
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String jwt = authHeader.substring(7);

                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å toggle —á–µ—Ä–µ–∑ FavoriteStoreClientService
                // FavoriteStoreApiResponse<FavoriteStoreResponseDto> response =
                //     favoriteStoreClientService.toggleFavorite(jwt, storeId);

                Map<String, Object> result = Map.of(
                        "success", true,
                        "message", "–°—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω",
                        "isFavorite", true // TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                );

                return ResponseEntity.ok(result);
            } else {
                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
                ));
            }
        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ AJAX –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {}", e.getMessage(), e);
            return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"
            ));
        }
    }

    // ================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private Set<Long> getUserFavoriteStoreIds(String jwt) {
        try {
            FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>> response =
                    favoriteStoreClientService.getMyFavorites(jwt);

            if (response.getSuccess() && response.getData() != null) {
                return response.getData().stream()
                        .map(favorite -> favorite.getStore().getId())
                        .collect(Collectors.toSet());
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", e.getMessage());
        }
        return Set.of();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞–≥–∞–∑–∏–Ω –∏–∑–±—Ä–∞–Ω–Ω—ã–º
     */
    private boolean isStoreFavorite(String jwt, Long storeId) {
        Set<Long> favoriteIds = getUserFavoriteStoreIds(jwt);
        return favoriteIds.contains(storeId);
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
     * GET /favorites
     */
    @GetMapping("/favorites")
    public String showFavoritesPage(
            @RequestHeader(value = "Authorization", required = false) String authHeader,
            Model model) {

        log.info("‚ù§Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤");

        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            return "redirect:/login?error=auth_required";
        }

        try {
            String jwt = authHeader.substring(7);
            FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>> response =
                    favoriteStoreClientService.getMyFavorites(jwt);

            if (response.getSuccess()) {
                model.addAttribute("favorites", response.getData());
                model.addAttribute("favoritesCount", response.getData().size());
            } else {
                model.addAttribute("error", response.getMessage());
                model.addAttribute("favorites", List.of());
                model.addAttribute("favoritesCount", 0);
            }

            return "stores/favorites"; // –®–∞–±–ª–æ–Ω Thymeleaf

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", e.getMessage(), e);
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
            return "stores/favorites";
        }
    }

    /**
     * API endpoint –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
     * GET /api/stores/search
     */
    @GetMapping("/api/stores/search")
    @ResponseBody
    public ResponseEntity<StoreBriefResponseWrapper> searchStores(
            @RequestParam String query,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "12") int size) {

        log.info("üîç –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤: query={}, page={}, size={}", query, page, size);

        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ StoreService
            StoreBriefResponseWrapper response = storeService.getStoresBrief(page, size);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", e.getMessage(), e);
            return ResponseEntity.ok(StoreBriefResponseWrapper.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞"));
        }
    }
}