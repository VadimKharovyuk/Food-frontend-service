package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.config.JwtUtil;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.StoreBriefDto;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.StoreBriefResponseWrapper;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Favorite.FavoriteStoreApiResponse;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Favorite.FavoriteStoreResponseDto;
import com.example.foodfrontendservice.service.FavoriteStoreClientService;
import com.example.foodfrontendservice.service.StoreService;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
@Controller
@RequiredArgsConstructor
@Slf4j
@RequestMapping("/stores")
public class StoreClientController {

    private final StoreService storeService;
    private final FavoriteStoreClientService favoriteStoreClientService;
    private final JwtUtil jwtUtil;

    @GetMapping()
    public String showStoresPage(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "12") int size,
            @RequestParam(required = false) String search,
            @RequestParam(required = false) String city,
            @RequestParam(required = false) String sortBy,
            HttpServletRequest request,
            Model model) {

        log.info("üè™ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤: page={}, size={}, search={}, city={}, sortBy={}",
                page, size, search, city, sortBy);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            StoreBriefResponseWrapper storesResponse = storeService.getStoresBrief(page, size);

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –≤ –º–æ–¥–µ–ª—å
            model.addAttribute("stores", storesResponse.getStores());
            model.addAttribute("totalCount", storesResponse.getTotalCount());
            model.addAttribute("currentPage", page);
            model.addAttribute("pageSize", size);
            model.addAttribute("hasNext", storesResponse.getHasNext());
            model.addAttribute("hasPrevious", storesResponse.getHasPrevious());

            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            model.addAttribute("search", search);
            model.addAttribute("city", city);
            model.addAttribute("sortBy", sortBy);

            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            int totalPages = (int) Math.ceil((double) storesResponse.getTotalCount() / size);
            model.addAttribute("totalPages", totalPages);
            model.addAttribute("nextPage", page + 1);
            model.addAttribute("previousPage", page - 1);

            // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            String token = extractTokenFromRequest(request);

            if (token != null && jwtUtil.isTokenValid(token)) {
                Set<Long> favoriteStoreIds = getUserFavoriteStoreIds(token);

                model.addAttribute("favoriteStoreIds", favoriteStoreIds);
                model.addAttribute("isAuthenticated", true);
                model.addAttribute("jwtToken", token); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è JavaScript
                model.addAttribute("authToken", token);
                model.addAttribute("authHeader", "Bearer " + token);

                log.debug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", favoriteStoreIds.size());
            } else {
                model.addAttribute("favoriteStoreIds", Set.of());
                model.addAttribute("isAuthenticated", false);
                model.addAttribute("jwtToken", "");
                model.addAttribute("authToken", "");
                model.addAttribute("authHeader", "");
                log.debug("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            }

            log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {}",
                    storesResponse.getStores().size(), page);

            return "stores/store-list";

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", e.getMessage(), e);
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤");
            model.addAttribute("stores", List.of());
            model.addAttribute("isAuthenticated", false);
            model.addAttribute("jwtToken", "");
            model.addAttribute("authToken", "");
            model.addAttribute("authHeader", "");
            return "stores/store-list";
        }
    }

    /**
     * ‚úÖ –ù–û–í–´–ô API ENDPOINT: –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
     */
    @PostMapping("/api/{storeId}/toggle-favorite")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> toggleFavorite(
            @PathVariable Long storeId,
            HttpServletRequest request) {

        log.info("üîÑ Toggle favorite –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {}", storeId);

        Map<String, Object> response = new HashMap<>();

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            String token = extractTokenFromRequest(request);

            if (token == null) {
                log.warn("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è toggle favorite");
                response.put("success", false);
                response.put("message", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            if (!jwtUtil.isTokenValid(token)) {
                log.warn("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è toggle favorite");
                response.put("success", false);
                response.put("message", "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º storeId
            if (storeId == null || storeId <= 0) {
                log.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞: {}", storeId);
                response.put("success", false);
                response.put("message", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞");
                return ResponseEntity.badRequest().body(response);
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            Set<Long> favoriteStoreIds = getUserFavoriteStoreIds(token);
            boolean isFavorite = favoriteStoreIds.contains(storeId);

            log.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –º–∞–≥–∞–∑–∏–Ω {} (—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {})",
                    jwtUtil.getEmailFromToken(token), storeId, isFavorite ? "–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º" : "–Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º");

            FavoriteStoreApiResponse<?> apiResponse;

            if (isFavorite) {
                // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                apiResponse = favoriteStoreClientService.removeFromFavorites(token, storeId);

                if (apiResponse != null && apiResponse.getSuccess()) {
                    log.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω {} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", storeId);
                    response.put("success", true);
                    response.put("message", "–ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
                    response.put("isFavorite", false);
                    response.put("action", "removed");
                } else {
                    log.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", storeId);
                    response.put("success", false);
                    response.put("message", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
                }
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                FavoriteStoreApiResponse<FavoriteStoreResponseDto> addResponse =
                        favoriteStoreClientService.addToFavorites(token, storeId);

                if (addResponse != null && addResponse.getSuccess()) {
                    log.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", storeId);
                    response.put("success", true);
                    response.put("message", "–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
                    response.put("isFavorite", true);
                    response.put("action", "added");
                    response.put("data", addResponse.getData());
                } else {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ {} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", storeId);
                    response.put("success", false);
                    response.put("message", "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
                }
            }

            response.put("storeId", storeId);
            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ toggle favorite –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {}", storeId, e);
            response.put("success", false);
            response.put("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
            response.put("storeId", storeId);
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô API: –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
     */
    @PostMapping("/api/{storeId}/add-favorite")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> addToFavorites(
            @PathVariable Long storeId,
            HttpServletRequest request) {

        log.info("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ {} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", storeId);

        Map<String, Object> response = new HashMap<>();

        try {
            String token = extractTokenFromRequest(request);

            if (token == null || !jwtUtil.isTokenValid(token)) {
                response.put("success", false);
                response.put("message", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            FavoriteStoreApiResponse<FavoriteStoreResponseDto> apiResponse =
                    favoriteStoreClientService.addToFavorites(token, storeId);

            if (apiResponse != null && apiResponse.getSuccess()) {
                log.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω {} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", storeId);
                response.put("success", true);
                response.put("message", "–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
                response.put("data", apiResponse.getData());
                response.put("storeId", storeId);
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", apiResponse != null ? apiResponse.getMessage() : "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è");
                response.put("storeId", storeId);
                return ResponseEntity.badRequest().body(response);
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", e);
            response.put("success", false);
            response.put("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
            response.put("storeId", storeId);
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô API: –¢–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
     */
    @DeleteMapping("/api/{storeId}/remove-favorite")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> removeFromFavorites(
            @PathVariable Long storeId,
            HttpServletRequest request) {

        log.info("‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", storeId);

        Map<String, Object> response = new HashMap<>();

        try {
            String token = extractTokenFromRequest(request);

            if (token == null || !jwtUtil.isTokenValid(token)) {
                response.put("success", false);
                response.put("message", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            FavoriteStoreApiResponse<String> apiResponse =
                    favoriteStoreClientService.removeFromFavorites(token, storeId);

            if (apiResponse != null && apiResponse.getSuccess()) {
                log.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", storeId);
                response.put("success", true);
                response.put("message", "–ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
                response.put("data", apiResponse.getData());
                response.put("storeId", storeId);
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", apiResponse != null ? apiResponse.getMessage() : "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
                response.put("storeId", storeId);
                return ResponseEntity.badRequest().body(response);
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", e);
            response.put("success", false);
            response.put("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
            response.put("storeId", storeId);
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * ‚úÖ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
     */
    private String extractTokenFromRequest(HttpServletRequest request) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Authorization header
        String bearerToken = request.getHeader("Authorization");
        if (bearerToken != null && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
        if (request.getCookies() != null) {
            for (Cookie cookie : request.getCookies()) {
                if ("jwt".equals(cookie.getName()) || "accessToken".equals(cookie.getName())) {
                    String token = cookie.getValue();
                    if (token != null && !token.trim().isEmpty()) {
                        return token;
                    }
                }
            }
        }

        return null;
    }

    private Set<Long> getUserFavoriteStoreIds(String jwt) {
        try {
            FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>> response =
                    favoriteStoreClientService.getMyFavorites(jwt);

            if (response != null && response.getSuccess() && response.getData() != null) {
                return response.getData().stream()
                        .map(favorite -> favorite.getStore().getId())
                        .collect(Collectors.toSet());
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", e.getMessage());
        }

        return Set.of();
    }
}