package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.config.TokenExtractor;
import com.example.foodfrontendservice.dto.AUTSERVICE.UserTokenInfo;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.category.CategoryDto;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.category.ListApiResponse;
import com.example.foodfrontendservice.service.CategoryService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Collections;
import java.util.List;

@Controller
@RequiredArgsConstructor
@Slf4j
@RequestMapping("/categories") // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–∑–º–µ–Ω–∏–ª –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
public class CategoryClientController {

    private final CategoryService categoryService;
    private final TokenExtractor tokenExtractor;

    /**
     * ‚úÖ –û–°–ù–û–í–ù–û–ô –º–µ—Ç–æ–¥: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    @GetMapping
    public String getAllActiveCategories(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            HttpServletRequest request,
            Model model) {

        log.info("üóÇÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: page={}, size={}", page, size);

        try {
            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            UserTokenInfo userInfo = tokenExtractor.getCurrentUserInfo(request);
            boolean isAuthenticated = tokenExtractor.isAuthenticated(request);

            // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–æ–¥–µ–ª—å
            addAuthDataToModel(model, userInfo, isAuthenticated);

            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            ListApiResponse<CategoryDto> categoriesResponse = categoryService.getActiveCategoriesBrief();

            if (categoriesResponse != null && categoriesResponse.getSuccess() && categoriesResponse.getData() != null) {
                List<CategoryDto> activeCategories = categoriesResponse.getData();

                // ‚úÖ –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ sortOrder, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
                activeCategories = activeCategories.stream()
                        .sorted((c1, c2) -> {
                            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ sortOrder, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
                            if (c1.getSortOrder() != null && c2.getSortOrder() != null) {
                                return c1.getSortOrder().compareTo(c2.getSortOrder());
                            }
                            if (c1.getSortOrder() != null) return -1;
                            if (c2.getSortOrder() != null) return 1;
                            return c1.getName().compareTo(c2.getName());
                        })
                        .toList();

                log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π", activeCategories.size());

                // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—å
                model.addAttribute("categories", activeCategories);
                model.addAttribute("totalCount", activeCategories.size());
                model.addAttribute("hasCategories", !activeCategories.isEmpty());
                model.addAttribute("currentPage", page);
                model.addAttribute("pageSize", size);

                // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                long categoriesWithImages = activeCategories.stream()
                        .filter(category -> category.getImageUrl() != null && !category.getImageUrl().trim().isEmpty())
                        .count();
                model.addAttribute("categoriesWithImages", categoriesWithImages);

            } else {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}",
                        categoriesResponse != null ? categoriesResponse.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");

                model.addAttribute("categories", Collections.emptyList());
                model.addAttribute("totalCount", 0);
                model.addAttribute("hasCategories", false);
                model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", e);
            model.addAttribute("categories", Collections.emptyList());
            model.addAttribute("totalCount", 0);
            model.addAttribute("hasCategories", false);
            model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
        }

        return "category/categories-list";
    }

    /**
     * ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –º–µ—Ç–æ–¥: –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    @GetMapping("/{categoryId}")
    public String getCategoryById(
            @PathVariable Long categoryId,
            HttpServletRequest request,
            Model model) {

        log.info("üóÇÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å ID: {}", categoryId);

        try {
            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            UserTokenInfo userInfo = tokenExtractor.getCurrentUserInfo(request);
            boolean isAuthenticated = tokenExtractor.isAuthenticated(request);
            addAuthDataToModel(model, userInfo, isAuthenticated);

            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ)
            ListApiResponse<CategoryDto> categoriesResponse = categoryService.getActiveCategoriesBrief();

            if (categoriesResponse != null && categoriesResponse.getSuccess() && categoriesResponse.getData() != null) {
                CategoryDto category = categoriesResponse.getData().stream()
                        .filter(c -> c.getId().equals(categoryId))
                        .findFirst()
                        .orElse(null);

                if (category != null) {
                    log.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {} (ID: {})", category.getName(), categoryId);
                    model.addAttribute("category", category);
                    model.addAttribute("categoryFound", true);
                } else {
                    log.warn("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", categoryId);
                    model.addAttribute("categoryFound", false);
                    model.addAttribute("error", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                }
            } else {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –ø–æ–∏—Å–∫–µ ID {}", categoryId);
                model.addAttribute("categoryFound", false);
                model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å ID {}", categoryId, e);
            model.addAttribute("categoryFound", false);
            model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        }

        return "category/category-detail"; // ‚úÖ –û—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }

    /**
     * ‚úÖ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –º–µ—Ç–æ–¥: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–æ–¥–µ–ª—å
     */
    private void addAuthDataToModel(Model model, UserTokenInfo userInfo, boolean isAuthenticated) {
        if (isAuthenticated && userInfo != null) {
            model.addAttribute("isAuthenticated", true);
            model.addAttribute("userEmail", userInfo.getEmail());
            model.addAttribute("userId", userInfo.getUserId());
            model.addAttribute("userRole", userInfo.getRole());
            model.addAttribute("jwtToken", userInfo.getToken());
            model.addAttribute("authToken", userInfo.getToken());
            model.addAttribute("authHeader", "Bearer " + userInfo.getToken());

            log.debug("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {} (ID: {})", userInfo.getEmail(), userInfo.getUserId());
        } else {
            model.addAttribute("isAuthenticated", false);
            model.addAttribute("userEmail", "");
            model.addAttribute("userId", null);
            model.addAttribute("userRole", "");
            model.addAttribute("jwtToken", "");
            model.addAttribute("authToken", "");
            model.addAttribute("authHeader", "");

            log.debug("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }
    }
}