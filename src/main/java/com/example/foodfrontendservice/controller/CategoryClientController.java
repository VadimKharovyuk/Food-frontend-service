package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.config.TokenExtractor;
import com.example.foodfrontendservice.dto.AUTSERVICE.UserTokenInfo;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Product.ProductResponseDto;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Product.ProductResponseWrapper;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.category.CategoryDto;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.category.ListApiResponse;
import com.example.foodfrontendservice.service.CategoryService;
import com.example.foodfrontendservice.service.ProductService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Collections;
import java.util.List;

@Controller
@RequiredArgsConstructor
@Slf4j
@RequestMapping("/categories")
public class CategoryClientController {

    private final CategoryService categoryService;
    private final TokenExtractor tokenExtractor;
    private final ProductService productService ;

    /**
     * ‚úÖ –û–°–ù–û–í–ù–û–ô –º–µ—Ç–æ–¥: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    @GetMapping
    public String getAllActiveCategories(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            HttpServletRequest request,
            Model model) {

        log.info("üóÇÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: page={}, size={}", page, size);

        try {
            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            UserTokenInfo userInfo = tokenExtractor.getCurrentUserInfo(request);
            boolean isAuthenticated = tokenExtractor.isAuthenticated(request);

            // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–æ–¥–µ–ª—å
            addAuthDataToModel(model, userInfo, isAuthenticated);

            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            ListApiResponse<CategoryDto> categoriesResponse = categoryService.getActiveCategoriesBrief();

            if (categoriesResponse != null && categoriesResponse.getSuccess() && categoriesResponse.getData() != null) {
                List<CategoryDto> activeCategories = categoriesResponse.getData();

                // ‚úÖ –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ sortOrder, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
                activeCategories = activeCategories.stream()
                        .sorted((c1, c2) -> {
                            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ sortOrder, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
                            if (c1.getSortOrder() != null && c2.getSortOrder() != null) {
                                return c1.getSortOrder().compareTo(c2.getSortOrder());
                            }
                            if (c1.getSortOrder() != null) return -1;
                            if (c2.getSortOrder() != null) return 1;
                            return c1.getName().compareTo(c2.getName());
                        })
                        .toList();

                log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π", activeCategories.size());

                // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—å
                model.addAttribute("categories", activeCategories);
                model.addAttribute("totalCount", activeCategories.size());
                model.addAttribute("hasCategories", !activeCategories.isEmpty());
                model.addAttribute("currentPage", page);
                model.addAttribute("pageSize", size);

                // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                long categoriesWithImages = activeCategories.stream()
                        .filter(category -> category.getImageUrl() != null && !category.getImageUrl().trim().isEmpty())
                        .count();
                model.addAttribute("categoriesWithImages", categoriesWithImages);

            } else {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}",
                        categoriesResponse != null ? categoriesResponse.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");

                model.addAttribute("categories", Collections.emptyList());
                model.addAttribute("totalCount", 0);
                model.addAttribute("hasCategories", false);
                model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", e);
            model.addAttribute("categories", Collections.emptyList());
            model.addAttribute("totalCount", 0);
            model.addAttribute("hasCategories", false);
            model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
        }

        return "category/categories-list";
    }

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
     */
    @GetMapping("/{categoryId}")
    public String getCategoryProducts(
            @PathVariable Long categoryId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String sortBy,
            @RequestParam(required = false) String priceRange,
            HttpServletRequest request,
            Model model) {

        log.info("üóÇÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å ID: {}", categoryId);

        try {
            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            UserTokenInfo userInfo = tokenExtractor.getCurrentUserInfo(request);
            boolean isAuthenticated = (userInfo != null);
            addAuthDataToModel(model, userInfo, isAuthenticated);

            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            CategoryDto category = getCategoryInfo(categoryId);
            if (category == null) {
                log.warn("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", categoryId);
                model.addAttribute("error", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                return "category/category-not-found";
            }

            log.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {} (ID: {})", category.getName(), categoryId);

            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try {
                log.debug("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: categoryId={}, page={}, size={}", categoryId, page, size);

                // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                ProductResponseWrapper productsResponse = productService.getProductsByCategory(categoryId, page, size);

                if (productsResponse != null && productsResponse.isSuccessful() && productsResponse.hasProducts()) {
                    List<ProductResponseDto> products = productsResponse.getProducts();

                    log.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{}'", products.size(), category.getName());

                    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –º–æ–¥–µ–ª—å
                    model.addAttribute("products", products);
                    model.addAttribute("hasProducts", true);
                    model.addAttribute("totalCount", productsResponse.getTotalCount());

                    // ‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
                    model.addAttribute("hasNext", productsResponse.getHasNext());
                    model.addAttribute("hasPrevious", productsResponse.getHasPrevious());
                    model.addAttribute("nextPage", page + 1);
                    model.addAttribute("previousPage", page - 1);

                    // ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
                    addProductStatistics(model, products);

                } else {
                    log.warn("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}: {}",
                            categoryId, productsResponse != null ? productsResponse.getMessage() : "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");

                    model.addAttribute("products", Collections.emptyList());
                    model.addAttribute("hasProducts", false);
                    model.addAttribute("totalCount", 0);
                    model.addAttribute("hasNext", false);
                    model.addAttribute("hasPrevious", false);

                    String message = "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤";
                    if (productsResponse != null && productsResponse.getMessage() != null) {
                        message = productsResponse.getMessage();
                    }
                    model.addAttribute("message", message);
                }

            } catch (Exception productException) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}: {}", categoryId, productException.getMessage());

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–æ –±–µ–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                model.addAttribute("products", Collections.emptyList());
                model.addAttribute("hasProducts", false);
                model.addAttribute("totalCount", 0);
                model.addAttribute("hasNext", false);
                model.addAttribute("hasPrevious", false);
                model.addAttribute("message", "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }

            // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            model.addAttribute("category", category);
            model.addAttribute("categoryFound", true);
            model.addAttribute("currentPage", page);
            model.addAttribute("pageSize", size);
            model.addAttribute("sortBy", sortBy);
            model.addAttribute("priceRange", priceRange);

            log.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞", category.getName());

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}", categoryId, e);
            model.addAttribute("categoryFound", false);
            model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        }

        return "category/category-products";
    }

    /**
     * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    private void addProductStatistics(Model model, List<ProductResponseDto> products) {
        if (products == null || products.isEmpty()) return;

        try {
            // –î–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º finalPrice –¥–ª—è —É—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫)
            Double minPrice = products.stream()
                    .filter(p -> p.getFinalPrice() != null)
                    .mapToDouble(p -> p.getFinalPrice().doubleValue())
                    .min().orElse(0.0);

            Double maxPrice = products.stream()
                    .filter(p -> p.getFinalPrice() != null)
                    .mapToDouble(p -> p.getFinalPrice().doubleValue())
                    .max().orElse(0.0);

            // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            Double avgPrice = products.stream()
                    .filter(p -> p.getFinalPrice() != null)
                    .mapToDouble(p -> p.getFinalPrice().doubleValue())
                    .average()
                    .orElse(0.0);

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
            long uniqueStores = products.stream()
                    .filter(p -> p.getStoreId() != null)
                    .mapToLong(ProductResponseDto::getStoreId)
                    .distinct()
                    .count();

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π
            long discountedProducts = products.stream()
                    .filter(p -> p.getHasDiscount() != null && p.getHasDiscount())
                    .count();

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            long popularProducts = products.stream()
                    .filter(p -> p.getIsPopular() != null && p.getIsPopular())
                    .count();

            model.addAttribute("minPrice", Math.round(minPrice * 100.0) / 100.0);
            model.addAttribute("maxPrice", Math.round(maxPrice * 100.0) / 100.0);
            model.addAttribute("averagePrice", Math.round(avgPrice * 100.0) / 100.0);
            model.addAttribute("uniqueStoresCount", uniqueStores);
            model.addAttribute("discountedProductsCount", discountedProducts);
            model.addAttribute("popularProductsCount", popularProducts);

            log.debug("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: —Ü–µ–Ω–∞ –æ—Ç {} –¥–æ {}, —Å—Ä–µ–¥–Ω—è—è {}, –º–∞–≥–∞–∑–∏–Ω–æ–≤ {}, —Å–æ —Å–∫–∏–¥–∫–æ–π {}, –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö {}",
                    minPrice, maxPrice, avgPrice, uniqueStores, discountedProducts, popularProducts);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {}", e.getMessage());
        }
    }

    /**
     * ‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    private CategoryDto getCategoryInfo(Long categoryId) {
        try {
            ListApiResponse<CategoryDto> categoriesResponse = categoryService.getActiveCategoriesBrief();

            if (categoriesResponse != null && categoriesResponse.getSuccess() && categoriesResponse.getData() != null) {
                return categoriesResponse.getData().stream()
                        .filter(c -> c.getId().equals(categoryId))
                        .findFirst()
                        .orElse(null);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}", categoryId, e);
        }
        return null;
    }


    /**
     * ‚úÖ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –º–µ—Ç–æ–¥: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–æ–¥–µ–ª—å
     */
    private void addAuthDataToModel(Model model, UserTokenInfo userInfo, boolean isAuthenticated) {
        if (isAuthenticated && userInfo != null) {
            model.addAttribute("isAuthenticated", true);
            model.addAttribute("userEmail", userInfo.getEmail());
            model.addAttribute("userId", userInfo.getUserId());
            model.addAttribute("userRole", userInfo.getRole());
            model.addAttribute("jwtToken", userInfo.getToken());
            model.addAttribute("authToken", userInfo.getToken());
            model.addAttribute("authHeader", "Bearer " + userInfo.getToken());

            log.debug("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {} (ID: {})", userInfo.getEmail(), userInfo.getUserId());
        } else {
            model.addAttribute("isAuthenticated", false);
            model.addAttribute("userEmail", "");
            model.addAttribute("userId", null);
            model.addAttribute("userRole", "");
            model.addAttribute("jwtToken", "");
            model.addAttribute("authToken", "");
            model.addAttribute("authHeader", "");

            log.debug("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }
    }

}