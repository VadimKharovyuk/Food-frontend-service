package com.example.foodfrontendservice.controller.rest;

import com.example.foodfrontendservice.dto.UserRegistrationDto;
import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.enums.UserRole;
import com.example.foodfrontendservice.service.UserIntegrationService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
//
//@RestController
//@RequestMapping("/api/registration")
//@RequiredArgsConstructor
//@Slf4j
//@CrossOrigin(origins = "*")
//public class RegistrationController {
//
//    private final UserIntegrationService userIntegrationService;
//
//
//    @GetMapping("/roles")
//    public ResponseEntity<List<UserRole>> getAvailableRoles() {
//        log.info("–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
//        try {
//            List<UserRole> roles = userIntegrationService.getAvailableRoles();
//            return ResponseEntity.ok(roles);
//        } catch (Exception e) {
//            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {}", e.getMessage());
//            return ResponseEntity.status(500).body(null);
//        }
//    }
//
//
//    @PostMapping("/register")
//    public ResponseEntity<Map<String, Object>> register(@RequestBody UserRegistrationDto registrationDto) {
//        log.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
//
//        try {
//            UserResponseDto user = userIntegrationService.registerUser(registrationDto);
//
//            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", user.getEmail());
//
//            return ResponseEntity.ok(Map.of(
//                    "success", true,
//                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
//                    "user", user
//            ));
//
//        } catch (Exception e) {
//            log.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", registrationDto.getEmail(), e.getMessage());
//
//            return ResponseEntity.badRequest().body(Map.of(
//                    "success", false,
//                    "message", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
//                    "error", e.getMessage()
//            ));
//        }
//    }
//
//
//    @GetMapping("/check-email")
//    public ResponseEntity<Map<String, Object>> checkEmailAvailability(@RequestParam String email) {
//        log.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email: {}", email);
//
//        try {
//            Boolean isAvailable = userIntegrationService.checkEmailAvailability(email);
//
//            return ResponseEntity.ok(Map.of(
//                    "available", isAvailable,
//                    "email", email,
//                    "message", isAvailable ? "Email –¥–æ—Å—Ç—É–ø–µ–Ω" : "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
//            ));
//
//        } catch (Exception e) {
//            log.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email {}: {}", email, e.getMessage());
//
//            return ResponseEntity.ok(Map.of(
//                    "available", true,
//                    "email", email,
//                    "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å email"
//            ));
//        }
//    }
//
//
//}

/**
 * üîó REST API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è AJAX –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
 */
@RestController
@RequestMapping("/api/registration")
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*")
public class RegistrationRestController {

    private final UserIntegrationService userIntegrationService;

    /**
     * üìã –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏
     */
    @GetMapping("/roles")
    public ResponseEntity<Map<String, Object>> getAvailableRoles() {
        log.info("üìã API: –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π");

        try {
            List<UserRole> roles = userIntegrationService.getAvailableRoles();

            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "roles", roles,
                    "message", "–†–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã"
            ));
        } catch (Exception e) {
            log.error("‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {}", e.getMessage(), e);

            return ResponseEntity.status(500).body(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π",
                    "error", e.getMessage()
            ));
        }
    }

    /**
     * üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
     */
    @PostMapping("/register")
    public ResponseEntity<Map<String, Object>> registerUser(@Valid @RequestBody UserRegistrationDto registrationDto) {
        log.info("üìù API: –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å email
            Boolean isEmailAvailable = userIntegrationService.checkEmailAvailability(registrationDto.getEmail());
            if (!Boolean.TRUE.equals(isEmailAvailable)) {
                log.warn("üìß API: Email {} —É–∂–µ –∑–∞–Ω—è—Ç", registrationDto.getEmail());

                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                        "field", "email"
                ));
            }

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            UserResponseDto registeredUser = userIntegrationService.registerUser(registrationDto);

            if (registeredUser != null) {
                log.info("‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", registeredUser.getEmail());

                return ResponseEntity.ok(Map.of(
                        "success", true,
                        "message", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ",
                        "user", registeredUser
                ));
            } else {
                throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }

        } catch (Exception e) {
            log.error("üí• API: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", registrationDto.getEmail(), e.getMessage(), e);

            return ResponseEntity.status(500).body(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                    "error", e.getMessage()
            ));
        }
    }

    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email
     */
    @GetMapping("/check-email")
    public ResponseEntity<Map<String, Object>> checkEmailAvailability(@RequestParam String email) {
        log.debug("üìß API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email: {}", email);

        try {
            Boolean isAvailable = userIntegrationService.checkEmailAvailability(email);

            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "available", isAvailable,
                    "email", email,
                    "message", Boolean.TRUE.equals(isAvailable) ? "Email –¥–æ—Å—Ç—É–ø–µ–Ω" : "Email —É–∂–µ –∑–∞–Ω—è—Ç"
            ));
        } catch (Exception e) {
            log.error("‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email {}: {}", email, e.getMessage());

            return ResponseEntity.status(500).body(Map.of(
                    "success", false,
                    "available", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email",
                    "error", e.getMessage()
            ));
        }
    }

    /**
     * üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É
     */
    @GetMapping("/test")
    public ResponseEntity<Map<String, Object>> testRegistrationService() {
        log.info("üß™ API: –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞");

        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –∫–∞–∫ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            List<UserRole> roles = userIntegrationService.getAvailableRoles();

            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    "rolesCount", roles.size(),
                    "timestamp", System.currentTimeMillis()
            ));
        } catch (Exception e) {
            log.error("‚ùå API: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {}", e.getMessage());

            return ResponseEntity.status(500).body(Map.of(
                    "success", false,
                    "message", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "error", e.getMessage()
            ));
        }
    }
}