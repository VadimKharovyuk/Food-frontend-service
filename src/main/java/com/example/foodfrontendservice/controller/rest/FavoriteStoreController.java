package com.example.foodfrontendservice.controller.rest;

import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Favorite.FavoriteStoreApiResponse;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Favorite.FavoriteStoreResponseDto;
import com.example.foodfrontendservice.service.FavoriteStoreClientService;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/test/favorites")
@RequiredArgsConstructor
@Slf4j
public class FavoriteStoreController {

    private final FavoriteStoreClientService favoriteStoreClientService;


    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (—Ç–µ—Å—Ç–æ–≤—ã–π endpoint)
     * POST /api/test/favorites/stores/{storeId}
     */
    @PostMapping("/stores/{storeId}")
    public ResponseEntity<FavoriteStoreApiResponse<FavoriteStoreResponseDto>> testAddToFavorites(
            @RequestHeader("Authorization") String authHeader,
            @PathVariable Long storeId) {

        log.info("üß™ TEST: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", storeId);

        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º JWT –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
            String jwt = extractJwtFromHeader(authHeader);

            if (jwt == null) {
                log.warn("‚ùå TEST: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Authorization header");
                return ResponseEntity.badRequest()
                        .body(FavoriteStoreApiResponse.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Authorization header"));
            }

            // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
            FavoriteStoreApiResponse<FavoriteStoreResponseDto> response =
                    favoriteStoreClientService.addToFavorites(jwt, storeId);

            log.info("‚úÖ TEST: –û—Ç–≤–µ—Ç –æ—Ç product-service: success={}, message={}",
                    response.getSuccess(), response.getMessage());

            HttpStatus status = Boolean.TRUE.equals(response.getSuccess()) ?
                    HttpStatus.CREATED : HttpStatus.BAD_REQUEST;

            return ResponseEntity.status(status).body(response);

        } catch (Exception e) {
            log.error("üí• TEST: –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(FavoriteStoreApiResponse.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"));
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã (—Ç–µ—Å—Ç–æ–≤—ã–π endpoint)
     * GET /api/test/favorites
     */
    @GetMapping
    public ResponseEntity<FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>>> testGetMyFavorites(
            @RequestHeader("Authorization") String authHeader) {

        log.info("üß™ TEST: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤");

        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º JWT –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
            String jwt = extractJwtFromHeader(authHeader);

            if (jwt == null) {
                log.warn("‚ùå TEST: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Authorization header");
                return ResponseEntity.badRequest()
                        .body(FavoriteStoreApiResponse.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Authorization header"));
            }

            // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
            FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>> response =
                    favoriteStoreClientService.getMyFavorites(jwt);

            log.info("‚úÖ TEST: –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {}",
                    response.getData() != null ? response.getData().size() : 0);

            HttpStatus status = Boolean.TRUE.equals(response.getSuccess()) ?
                    HttpStatus.OK : HttpStatus.BAD_REQUEST;

            return ResponseEntity.status(status).body(response);

        } catch (Exception e) {
            log.error("üí• TEST: –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(FavoriteStoreApiResponse.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"));
        }
    }

    // ================================
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–û–í–´–ï –ú–ï–¢–û–î–´
    // ================================

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ JWT —Ç–æ–∫–µ–Ω–∞
     * GET /api/test/favorites/jwt-info
     */
    @GetMapping("/jwt-info")
    public ResponseEntity<Object> testJwtInfo(@RequestHeader("Authorization") String authHeader) {

        log.info("üîç TEST: –ê–Ω–∞–ª–∏–∑ JWT —Ç–æ–∫–µ–Ω–∞");

        try {
            String jwt = extractJwtFromHeader(authHeader);

            if (jwt == null) {
                return ResponseEntity.badRequest().body(Map.of(
                        "error", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Authorization header",
                        "received", authHeader
                ));
            }

            // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
            Map<String, Object> jwtInfo = Map.of(
                    "tokenLength", jwt.length(),
                    "tokenStart", jwt.substring(0, Math.min(20, jwt.length())) + "...",
                    "authHeader", authHeader,
                    "extractedJwt", jwt.substring(0, Math.min(50, jwt.length())) + "..."
            );

            log.info("üîç TEST: JWT Info: {}", jwtInfo);

            return ResponseEntity.ok(jwtInfo);

        } catch (Exception e) {
            log.error("üí• TEST: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ JWT: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of(
                    "error", "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞",
                    "message", e.getMessage()
            ));
        }
    }


    /**
     * –ò–∑–≤–ª–µ—á—å JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
     */
    private String extractJwtFromHeader(String authHeader) {
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            return authHeader.substring(7);
        }
        return null;
    }

}
