//package com.example.foodfrontendservice.controller.rest;
//
//import com.example.foodfrontendservice.dto.AuthResponseDto;
//import com.example.foodfrontendservice.dto.LoginRequestDto;
//import com.example.foodfrontendservice.dto.UserResponseDto;
//import com.example.foodfrontendservice.service.UserIntegrationService;
//import lombok.RequiredArgsConstructor;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.*;
//
//import java.util.Map;
//
//
//@RestController
//@RequestMapping("/api/auth")
//@RequiredArgsConstructor
//@Slf4j
//@CrossOrigin(origins = "*")
//public class AuthController {
//
//    private final UserIntegrationService userIntegrationService;
//
//
//    @PostMapping("/login")
//    public ResponseEntity<Map<String, Object>> login(@RequestBody LoginRequestDto loginRequest) {
//        log.info("–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", loginRequest.getEmail());
//
//        try {
//
//            AuthResponseDto authResponse = userIntegrationService.loginUser(loginRequest);
//
//            if (authResponse != null && authResponse.getToken() != null) {
//                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", loginRequest.getEmail());
//
//                return ResponseEntity.ok(Map.of(
//                        "success", true,
//                        "message", "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
//                        "token", authResponse.getToken(),
//                        "type", authResponse.getType() != null ? authResponse.getType() : "Bearer",
//                        "user", authResponse.getUser()
//                ));
//            } else {
//                log.warn("AuthResponse –ø—É—Å—Ç–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", loginRequest.getEmail());
//                return ResponseEntity.status(401).body(Map.of(
//                        "success", false,
//                        "message", "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
//                ));
//            }
//
//        } catch (Exception e) {
//            log.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", loginRequest.getEmail(), e.getMessage(), e);
//
//            return ResponseEntity.status(401).body(Map.of(
//                    "success", false,
//                    "message", "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
//                    "error", e.getMessage()
//            ));
//        }
//    }
//
//
//    @GetMapping("/me")
//    public ResponseEntity<Map<String, Object>> getCurrentUser(@RequestHeader("Authorization") String authHeader) {
//        log.debug("–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");
//
//        try {
//            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ "Bearer TOKEN"
//            String token = authHeader.substring(7);
//            UserResponseDto user = userIntegrationService.getCurrentUser(token);
//
//            return ResponseEntity.ok(Map.of(
//                    "success", true,
//                    "user", user
//            ));
//
//        } catch (Exception e) {
//            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {}", e.getMessage());
//
//            return ResponseEntity.status(401).body(Map.of(
//                    "success", false,
//                    "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
//                    "error", e.getMessage()
//            ));
//        }
//    }
//
//
//    @PostMapping("/validate-token")
//    public ResponseEntity<Map<String, Object>> validateToken(@RequestHeader("Authorization") String authHeader) {
//        log.debug("–í–∞–ª–∏–¥–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞");
//
//        try {
//            String token = authHeader.substring(7);
//            Boolean isValid = userIntegrationService.validateToken(token);
//
//            return ResponseEntity.ok(Map.of(
//                    "valid", isValid,
//                    "message", isValid ? "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω" : "–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω"
//            ));
//
//        } catch (Exception e) {
//            log.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
//
//            return ResponseEntity.ok(Map.of(
//                    "valid", false,
//                    "message", "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"
//            ));
//        }
//    }
//
//
//    @PostMapping("/logout")
//    public ResponseEntity<Map<String, Object>> logout() {
//        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
//
//        return ResponseEntity.ok(Map.of(
//                "success", true,
//                "message", "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
//        ));
//    }
//
//
//}

package com.example.foodfrontendservice.controller.rest;

import com.example.foodfrontendservice.dto.AuthResponseDto;
import com.example.foodfrontendservice.dto.LoginRequestDto;
import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.service.UserIntegrationService;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
//

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*")
public class AuthController {

    private final UserIntegrationService userIntegrationService;

    // ‚úÖ –û–°–ù–û–í–ù–û–ô LOGIN ENDPOINT –¥–ª—è JSON –∑–∞–ø—Ä–æ—Å–æ–≤
    @PostMapping("/login")
    public ResponseEntity<Map<String, Object>> login(
            @RequestBody LoginRequestDto loginRequest,
            HttpServletResponse response) {

        log.info("üîê API /api/auth/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", loginRequest.getEmail());

        try {
            AuthResponseDto authResponse = userIntegrationService.loginUser(loginRequest);

            if (authResponse != null && authResponse.getToken() != null) {
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", loginRequest.getEmail());

                // ‚úÖ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú JWT –¢–û–ö–ï–ù –í COOKIE
                String token = authResponse.getToken();

                Cookie jwtCookie = new Cookie("jwt", token);
                jwtCookie.setHttpOnly(true);
                jwtCookie.setPath("/");
                jwtCookie.setSecure(false); // –¥–ª—è localhost

                if (Boolean.TRUE.equals(authResponse.getRememberMe())) {
                    jwtCookie.setMaxAge(30 * 24 * 60 * 60); // 30 –¥–Ω–µ–π
                    log.info("üç™ JWT cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π (Remember Me)");
                } else {
                    jwtCookie.setMaxAge(24 * 60 * 60); // 24 —á–∞—Å–∞
                    log.info("üç™ JWT cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 24 —á–∞—Å–∞");
                }

                response.addCookie(jwtCookie);
                log.info("üç™ JWT cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: {})", token.length());

                // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï COOKIES
                if (authResponse.getUser() != null) {
                    Cookie roleCookie = new Cookie("userRole", authResponse.getUser().getUserRole().toString());
                    roleCookie.setPath("/");
                    roleCookie.setMaxAge(jwtCookie.getMaxAge());
                    response.addCookie(roleCookie);

                    Cookie emailCookie = new Cookie("userEmail", authResponse.getUser().getEmail());
                    emailCookie.setPath("/");
                    emailCookie.setMaxAge(jwtCookie.getMaxAge());
                    response.addCookie(emailCookie);

                    log.info("üç™ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ cookies —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
                }

                // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú JSON –û–¢–í–ï–¢
                return ResponseEntity.ok(Map.of(
                        "success", true,
                        "message", "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                        "token", authResponse.getToken(),
                        "type", authResponse.getType() != null ? authResponse.getType() : "Bearer",
                        "user", authResponse.getUser(),
                        "rememberMe", authResponse.getRememberMe() != null ? authResponse.getRememberMe() : false,
                        "redirectUrl", determineRedirectPath(authResponse.getUser())
                ));

            } else {
                log.warn("‚ö†Ô∏è AuthResponse –ø—É—Å—Ç–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", loginRequest.getEmail());
                return ResponseEntity.status(401).body(Map.of(
                        "success", false,
                        "message", "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
                ));
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", loginRequest.getEmail(), e.getMessage(), e);
            return ResponseEntity.status(401).body(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    "error", e.getMessage()
            ));
        }
    }

    @GetMapping("/me")
    public ResponseEntity<Map<String, Object>> getCurrentUser(@RequestHeader("Authorization") String authHeader) {
        log.debug("üë§ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");

        try {
            String token = authHeader.substring(7);
            UserResponseDto user = userIntegrationService.getCurrentUser(token);

            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "user", user
            ));

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {}", e.getMessage());

            return ResponseEntity.status(401).body(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                    "error", e.getMessage()
            ));
        }
    }

    @PostMapping("/validate-token")
    public ResponseEntity<Map<String, Object>> validateToken(@RequestHeader("Authorization") String authHeader) {
        log.debug("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞");

        try {
            String token = authHeader.substring(7);
            Boolean isValid = userIntegrationService.validateToken(token);

            return ResponseEntity.ok(Map.of(
                    "valid", isValid,
                    "message", isValid ? "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω" : "–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω"
            ));

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());

            return ResponseEntity.ok(Map.of(
                    "valid", false,
                    "message", "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"
            ));
        }
    }

    @PostMapping("/logout")
    public ResponseEntity<Map<String, Object>> logout(HttpServletResponse response) {
        log.info("üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã");

        // ‚úÖ –û–ß–ò–©–ê–ï–ú COOKIES –ø—Ä–∏ logout
        clearCookie(response, "jwt");
        clearCookie(response, "userRole");
        clearCookie(response, "userEmail");

        return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        ));
    }

    // ‚úÖ HELPER METHODS
    private String determineRedirectPath(UserResponseDto user) {
        if (user != null && user.getUserRole() != null) {
            return "/dashboard/" + user.getUserRole().toString();
        }
        return "/dashboard";
    }

    private void clearCookie(HttpServletResponse response, String cookieName) {
        Cookie cookie = new Cookie(cookieName, null);
        cookie.setPath("/");
        cookie.setMaxAge(0);
        response.addCookie(cookie);
        log.debug("üóëÔ∏è Cookie '{}' –æ—á–∏—â–µ–Ω", cookieName);
    }

    // ‚úÖ DEBUG ENDPOINT
    @PostMapping("/login/debug")
    public ResponseEntity<Map<String, Object>> loginDebug(@RequestBody Map<String, Object> rawData) {
        log.info("üêõ DEBUG: –ü–æ–ª—É—á–µ–Ω—ã RAW –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        log.info("üêõ RAW –¥–∞–Ω–Ω—ã–µ: {}", rawData);

        rawData.forEach((key, value) -> {
            log.info("üêõ {}: {} (type: {})",
                    key, value,
                    value != null ? value.getClass().getSimpleName() : "null");
        });

        return ResponseEntity.ok(Map.of(
                "receivedData", rawData,
                "timestamp", new java.util.Date(),
                "message", "Debug endpoint - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã"
        ));
    }
}