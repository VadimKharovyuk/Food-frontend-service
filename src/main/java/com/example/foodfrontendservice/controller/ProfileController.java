package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.config.TokenExtractor;
import com.example.foodfrontendservice.dto.AUTSERVICE.UserLocationDto;
import com.example.foodfrontendservice.dto.AUTSERVICE.UserTokenInfo;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.category.ApiResponse;
import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.service.UserIntegrationService;
import com.example.foodfrontendservice.service.UserLocationService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDateTime;

@Controller
@RequestMapping("/profile")
@RequiredArgsConstructor
@Slf4j
public class ProfileController {

    private final TokenExtractor tokenExtractor;
    private final UserIntegrationService userIntegrationService;
    private final UserLocationService userLocationService;

    @GetMapping
    public String profile(HttpServletRequest request, Model model, RedirectAttributes redirectAttributes) {
        try {
            log.info("üè† –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

            // 1. ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ TokenExtractor
            UserTokenInfo tokenInfo = tokenExtractor.getCurrentUserInfo(request);

            if (tokenInfo == null) {
                log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω");
                redirectAttributes.addFlashAttribute("error", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return "redirect:/login";
            }

            log.info("üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} (ID: {}, Role: {})",
                    tokenInfo.getEmail(), tokenInfo.getUserId(), tokenInfo.getRole());

            // 2. ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ User Service
            UserResponseDto fullUserData = null;
            try {
                fullUserData = userIntegrationService.getUserByToken(tokenInfo.getToken());
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ User Service");
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ User Service: {}", e.getMessage());
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∫ fallback
                fullUserData = createFallbackUserData(tokenInfo);
                model.addAttribute("warning", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è");
            }

            // 3. ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ UserLocationService
            UserLocationDto detailedLocation = null;
            try {
                ApiResponse<UserLocationDto> locationResponse = userLocationService.getUserLocation(tokenInfo);

                if (locationResponse.isSuccess()) {
                    detailedLocation = locationResponse.getData();
                    log.info("üìç –ü–æ–ª—É—á–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è: hasLocation={}, coordinates=[{}, {}]",
                            detailedLocation.getHasLocation(),
                            detailedLocation.getLatitude(),
                            detailedLocation.getLongitude());
                } else {
                    log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: {}", locationResponse.getMessage());
                }
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {}", e.getMessage());

            }

            // 4. ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—å –¥–ª—è Thymeleaf

            // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            model.addAttribute("isAuthenticated", true);
            model.addAttribute("tokenInfo", tokenInfo);
            model.addAttribute("userName", getDisplayName(fullUserData));

            // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            model.addAttribute("user", fullUserData);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤)
            addUserStatistics(model, tokenInfo);

            // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            addLocationInfo(model, fullUserData, detailedLocation);

            log.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", tokenInfo.getEmail());

            return "profile/main";

        } catch (Exception e) {
            log.error("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è", e);
            model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è");
            return "error/500";
        }
    }

    /**
     * üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
     */
    private void addUserStatistics(Model model, UserTokenInfo tokenInfo) {
        try {
            // TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏

            model.addAttribute("orderCount", 15);      // –ò–∑ Order Service
            model.addAttribute("favoriteCount", 8);    // –ò–∑ Product Service (Favorites)
            model.addAttribute("reviewCount", 12);     // –ò–∑ Review Service

            log.debug("üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", tokenInfo.getUserId());

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage());

            // Fallback –∑–Ω–∞—á–µ–Ω–∏—è
            model.addAttribute("orderCount", 0);
            model.addAttribute("favoriteCount", 0);
            model.addAttribute("reviewCount", 0);
        }
    }

    /**
     * üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
     */
    /**
     * üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    private void addLocationInfo(Model model, UserResponseDto userData, UserLocationDto detailedLocation) {
        try {
            boolean hasDetailedLocation = detailedLocation != null && detailedLocation.getHasLocation() != null && detailedLocation.getHasLocation();

            if (hasDetailedLocation) {
                // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ UserLocationService (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                log.debug("üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–∑ UserLocationService");

                model.addAttribute("hasLocation", true);
                model.addAttribute("locationStatus", "–ê–∫—Ç—É–∞–ª—å–Ω–∞");

                // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                if (detailedLocation.getLatitude() != null && detailedLocation.getLongitude() != null) {
                    model.addAttribute("latitude", detailedLocation.getLatitude());
                    model.addAttribute("longitude", detailedLocation.getLongitude());
                    model.addAttribute("formattedCoordinates",
                            String.format("%.6f, %.6f", detailedLocation.getLatitude(), detailedLocation.getLongitude()));
                }

                // –ê–¥—Ä–µ—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                model.addAttribute("street", detailedLocation.getStreet());
                model.addAttribute("city", detailedLocation.getCity());
                model.addAttribute("region", detailedLocation.getRegion());
                model.addAttribute("country", detailedLocation.getCountry());
                model.addAttribute("fullAddress", detailedLocation.getFullAddress());
                model.addAttribute("shortAddress", detailedLocation.getShortAddress());

                // –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                model.addAttribute("locationUpdatedAt", detailedLocation.getLocationUpdatedAt());

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                model.addAttribute("detailedCoordinates", detailedLocation.getFormattedCoordinates());

            } else if (userData != null && userData.getHasLocation() != null && userData.getHasLocation()) {
                // ‚úÖ Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UserResponseDto
                log.debug("üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–∑ UserResponseDto (fallback)");

                model.addAttribute("hasLocation", userData.getHasLocation());
                model.addAttribute("locationStatus", userData.getLocationStatus() != null ? userData.getLocationStatus() : "–ë–∞–∑–æ–≤–∞—è");
                model.addAttribute("formattedCoordinates", userData.getFormattedCoordinates());
                model.addAttribute("shortAddress", userData.getShortAddress());

                if (userData.getLocationUpdatedAt() != null) {
                    model.addAttribute("locationUpdatedAt", userData.getLocationUpdatedAt());
                }

            } else {
                // ‚úÖ –ù–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
                log.debug("üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");

                model.addAttribute("hasLocation", false);
                model.addAttribute("locationStatus", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
            }

            // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –≤ Thymeleaf
            model.addAttribute("canUpdateLocation", true);
            model.addAttribute("locationServiceAvailable", detailedLocation != null);

            log.debug("üìç –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. Has location: {}, Service available: {}",
                    model.getAttribute("hasLocation"), detailedLocation != null);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {}", e.getMessage());

            // Fallback - –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            model.addAttribute("hasLocation", false);
            model.addAttribute("locationStatus", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
            model.addAttribute("canUpdateLocation", false);
            model.addAttribute("locationServiceAvailable", false);
        }
    }

    /**
     * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private String getDisplayName(UserResponseDto userData) {
        if (userData == null) {
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
        }

        String firstName = userData.getFirstName();
        String lastName = userData.getLastName();

        if (firstName != null && lastName != null) {
            return firstName + " " + lastName;
        } else if (firstName != null) {
            return firstName;
        } else if (lastName != null) {
            return lastName;
        } else {
            return userData.getEmail();
        }
    }

    /**
     * üîÑ –°–æ–∑–¥–∞–Ω–∏–µ fallback –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
     */
    private UserResponseDto createFallbackUserData(UserTokenInfo tokenInfo) {
        log.warn("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ fallback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", tokenInfo.getEmail());

        return UserResponseDto.builder()
                .id(tokenInfo.getUserId())
                .email(tokenInfo.getEmail())
                .firstName("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                .lastName("")
                .userRole(parseUserRole(tokenInfo.getRole()))
                .roleDisplayName(tokenInfo.getRoleDisplayName())
                .createdAt(LocalDateTime.now().minusMonths(1)) // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞
                .updatedAt(LocalDateTime.now())
                .hasLocation(false)
                .locationStatus("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                .build();
    }

    /**
     * üîß –ü–∞—Ä—Å–∏–Ω–≥ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
     */
    private com.example.foodfrontendservice.enums.UserRole parseUserRole(String roleString) {
        try {
            if (roleString == null) {
                return com.example.foodfrontendservice.enums.UserRole.BASE_USER;
            }

            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ROLE_ –µ—Å–ª–∏ –µ—Å—Ç—å
            String cleanRole = roleString.replace("ROLE_", "");

            return com.example.foodfrontendservice.enums.UserRole.valueOf(cleanRole);

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å: {}. –ò—Å–ø–æ–ª—å–∑—É–µ–º BASE_USER", roleString);
            return com.example.foodfrontendservice.enums.UserRole.BASE_USER;
        }
    }
}