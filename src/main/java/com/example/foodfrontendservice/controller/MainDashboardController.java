package com.example.foodfrontendservice.controller;
import com.example.foodfrontendservice.config.JwtUtil;
import com.example.foodfrontendservice.service.DashboardService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.Map;

@Controller
@RequiredArgsConstructor
@Slf4j
@RequestMapping("/dashboard")
public class MainDashboardController {

    private final DashboardService dashboardService;
    private final JwtUtil jwtUtil;


    @GetMapping
    public String dashboard(HttpServletRequest request, Model model, RedirectAttributes redirectAttributes) {
        log.info("üè† GET –∑–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç IP: {}", getClientIP(request));


        String token = extractTokenFromRequest(request);

        if (token == null || !jwtUtil.isTokenValid(token)) {
            log.warn("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ dashboard");
            log.warn("   Token present: {}", token != null);
            log.warn("   Token valid: {}", token != null && jwtUtil.isTokenValid(token));

            redirectAttributes.addAttribute("expired", "true");
            redirectAttributes.addAttribute("reason", "invalid_token");
            return "redirect:/login";
        }

        log.info("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞—à–±–æ—Ä–¥–∞");
        return dashboardService.processDashboardRedirect(request);
    }

    /**
     * üè† POST –∑–∞–ø—Ä–æ—Å –¥–∞—à–±–æ—Ä–¥–∞ —Å —Ç–æ–∫–µ–Ω–æ–º (–¥–ª—è JavaScript)
     */
    @PostMapping
    @ResponseBody
    public String dashboardPost(HttpServletRequest request,
                                @RequestBody(required = false) Map<String, Object> requestBody) {
        log.info("üè† POST –∑–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç IP: {}", getClientIP(request));

        // ‚úÖ –í–ê–õ–ò–î–ò–†–£–ï–ú –¢–û–ö–ï–ù –î–õ–Ø POST –ó–ê–ü–†–û–°–û–í
        String token = extractTokenFromRequest(request);

        if (token == null || !jwtUtil.isTokenValid(token)) {
            log.warn("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ POST –∑–∞–ø—Ä–æ—Å–µ –∫ dashboard");

            // –î–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –æ—à–∏–±–∫–æ–π
            return """
                {
                    "success": false,
                    "error": "INVALID_TOKEN",
                    "message": "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                    "redirectUrl": "/login?expired=true"
                }
                """;
        }

        log.info("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º");
        return dashboardService.processDashboardPost(request, requestBody);
    }

    /**
     * ‚úÖ –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    private String extractTokenFromRequest(HttpServletRequest request) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Authorization header
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            log.debug("üîç –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ Authorization header");
            return authHeader.substring(7);
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º X-Auth-Token header
        String xAuthToken = request.getHeader("X-Auth-Token");
        if (xAuthToken != null && !xAuthToken.trim().isEmpty()) {
            log.debug("üîç –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ X-Auth-Token header");
            return xAuthToken;
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è fallback —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞)
        String tokenParam = request.getParameter("token");
        if (tokenParam != null && !tokenParam.trim().isEmpty()) {
            log.debug("üîç –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö");
            return tokenParam;
        }

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ–ª–µ POST –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ —ç—Ç–æ form data)
        String formToken = request.getParameter("authToken");
        if (formToken != null && !formToken.trim().isEmpty()) {
            log.debug("üîç –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º–µ");
            return formToken;
        }

        log.debug("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤");
        return null;
    }

    /**
     * ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∫–ª–∏–µ–Ω—Ç–∞
     */
    private String getClientIP(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }

        String xRealIP = request.getHeader("X-Real-IP");
        if (xRealIP != null && !xRealIP.isEmpty()) {
            return xRealIP;
        }

        return request.getRemoteAddr();
    }

    /**
     * ‚úÖ –ù–û–í–´–ô endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è JavaScript)
     */
    @GetMapping("/validate-token")
    @ResponseBody
    public Map<String, Object> validateToken(HttpServletRequest request) {
        log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞");

        String token = extractTokenFromRequest(request);

        if (token == null) {
            return Map.of(
                    "valid", false,
                    "error", "TOKEN_NOT_FOUND",
                    "message", "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
            );
        }

        if (!jwtUtil.isTokenValid(token)) {
            return Map.of(
                    "valid", false,
                    "error", "TOKEN_INVALID",
                    "message", "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫"
            );
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
        try {
            String email = jwtUtil.getEmailFromToken(token);
            String role = jwtUtil.getRoleFromToken(token);

            return Map.of(
                    "valid", true,
                    "email", email,
                    "role", role,
                    "message", "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
            );
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
            return Map.of(
                    "valid", false,
                    "error", "TOKEN_PARSE_ERROR",
                    "message", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞"
            );
        }
    }

}