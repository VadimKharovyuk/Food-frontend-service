package com.example.foodfrontendservice.controller;


import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.service.DashboardService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;

import java.util.List;
import java.util.Map;


@Slf4j
@RequiredArgsConstructor
public abstract class BaseDashboardController {

    protected final DashboardService dashboardService;


    @GetMapping("/current-user")
    @ResponseBody
    public Map<String, Object> getCurrentUser(HttpServletRequest request) {
        log.debug("üë§ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");

        try {
            UserResponseDto user = dashboardService.getCurrentUserFromSession(request);

            if (user != null) {
                return Map.of(
                        "success", true,
                        "user", Map.of(
                                "id", user.getId(),
                                "firstName", user.getFirstName(),
                                "lastName", user.getLastName(),
                                "email", user.getEmail(),
                                "role", user.getUserRole().name(),
                                "roleDisplayName", user.getUserRole().getDisplayName()
                        )
                );
            } else {
                return Map.of(
                        "success", false,
                        "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏"
                );
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {}", e.getMessage());
            return Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            );
        }
    }

    /**
     * üö™ –û–±—â–∏–π AJAX endpoint –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    @PostMapping("/logout")
    @ResponseBody
    public Map<String, Object> logout(HttpServletRequest request) {
        log.info("üö™ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã");

        try {
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            request.getSession().invalidate();

            return Map.of(
                    "success", true,
                    "message", "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                    "redirectUrl", "/login"
            );
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã: {}", e.getMessage());
            return Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
            );
        }
    }

    /**
     * üîç –û–±—â–∏–π AJAX endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
     */
    @GetMapping("/session-status")
    @ResponseBody
    public Map<String, Object> getSessionStatus(HttpServletRequest request) {
        log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏");

        boolean isAuthenticated = dashboardService.isUserAuthenticated(request);
        UserResponseDto user = dashboardService.getCurrentUserFromSession(request);

        return Map.of(
                "authenticated", isAuthenticated,
                "sessionId", request.getSession().getId(),
                "userRole", user != null ? user.getUserRole().name() : null,
                "timestamp", System.currentTimeMillis()
        );
    }

    /**
     * üìä –û–±—â–∏–π AJAX endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    @GetMapping("/notifications")
    @ResponseBody
    public Map<String, Object> getNotifications(HttpServletRequest request) {
        log.debug("üìä –ó–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        if (!dashboardService.isUserAuthenticated(request)) {
            return Map.of("success", false, "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ NotificationService
        return Map.of(
                "success", true,
                "notifications", List.of(
                        Map.of("id", 1, "type", "info", "message", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuickFood!", "time", "5 –º–∏–Ω –Ω–∞–∑–∞–¥"),
                        Map.of("id", 2, "type", "success", "message", "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω", "time", "1 —á–∞—Å –Ω–∞–∑–∞–¥")
                ),
                "unreadCount", 2
        );
    }

    /**
     * ‚öôÔ∏è –û–±—â–∏–π AJAX endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
     */
    @PostMapping("/update-profile")
    @ResponseBody
    public Map<String, Object> updateProfile(HttpServletRequest request,
                                             @RequestBody Map<String, Object> profileData) {
        log.info("‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", profileData);

        if (!dashboardService.isUserAuthenticated(request)) {
            return Map.of("success", false, "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }

        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ UserService
            return Map.of(
                    "success", true,
                    "message", "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
            );
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {}", e.getMessage());
            return Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
            );
        }
    }

    /**
     * üîî AJAX endpoint –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
     */
    @PostMapping("/notifications/{id}/read")
    @ResponseBody
    public Map<String, Object> markNotificationAsRead(HttpServletRequest request,
                                                      @PathVariable Long id) {
        log.debug("üîî –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ", id);

        if (!dashboardService.isUserAuthenticated(request)) {
            return Map.of("success", false, "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        return Map.of(
                "success", true,
                "message", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"
        );
    }
}
