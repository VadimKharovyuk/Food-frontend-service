package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.enums.UserRole;
import com.example.foodfrontendservice.service.DashboardService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/dashboard")
@RequiredArgsConstructor
@Slf4j
public class UnifiedDashboardController {

    private final DashboardService dashboardService;

    /**
     * üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞ - –µ–¥–∏–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
     */
    @GetMapping
    public String dashboard(HttpServletRequest request, Model model) {
        log.info("üè† –ó–∞–≥—Ä—É–∑–∫–∞ –µ–¥–∏–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞");

        // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ JavaScript API
        model.addAttribute("needsAuth", true);
        model.addAttribute("apiBaseUrl", "http://localhost:8082");

        // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª—è—Ö –¥–ª—è frontend
        model.addAttribute("availableRoles", Map.of(
                "BASE_USER", "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å",
                "BUSINESS_USER", "–í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞",
                "COURIER", "–ö—É—Ä—å–µ—Ä",
                "ADMIN", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        ));

        log.info("‚úÖ –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ JavaScript");

        return "dashboard/main";
    }

    /**
     * üîß API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞
     */
    @GetMapping("/api/config")
    @ResponseBody
    public Map<String, Object> getDashboardConfigApi(HttpServletRequest request) {
        log.debug("üîß –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞");

        // ‚úÖ JWT –ø—Ä–æ–≤–µ—Ä–∫–∞
        UserResponseDto user = dashboardService.getCurrentUserFromSession(request);

        if (user == null) {
            log.warn("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞");
            return Map.of(
                    "error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                    "code", "UNAUTHORIZED",
                    "redirectUrl", "/login"
            );
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        if (!dashboardService.isUserAuthenticated(request)) {
            log.warn("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user.getEmail());
            return Map.of(
                    "error", "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                    "code", "TOKEN_INVALID",
                    "redirectUrl", "/login"
            );
        }

        log.debug("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} ({})", user.getEmail(), user.getUserRole());

        return Map.of(
                "user", Map.of(
                        "id", user.getId(),
                        "email", user.getEmail(),
                        "firstName", user.getFirstName(),
                        "lastName", user.getLastName(),
                        "role", user.getUserRole().name(),
                        "roleDisplayName", user.getUserRole().getDisplayName()
                ),
                "config", getDashboardConfig(user.getUserRole()),
                "tokenInfo", dashboardService.getTokenInfo(request)
        );
    }

    /**
     * üìä API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞
     */
    @GetMapping("/api/data/{section}")
    @ResponseBody
    public Map<String, Object> getSectionData(@PathVariable String section, HttpServletRequest request) {
        log.debug("üìä –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏: {}", section);

        // ‚úÖ JWT –ø—Ä–æ–≤–µ—Ä–∫–∞
        UserResponseDto user = dashboardService.getCurrentUserFromSession(request);

        if (user == null) {
            log.warn("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–µ–∫—Ü–∏–∏: {}", section);
            return Map.of(
                    "error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                    "code", "UNAUTHORIZED",
                    "section", section
            );
        }

        // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if (!dashboardService.isUserAuthenticated(request)) {
            log.warn("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–µ–∫—Ü–∏–∏ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", section, user.getEmail());
            return Map.of(
                    "error", "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                    "code", "TOKEN_INVALID",
                    "section", section
            );
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–µ–∫—Ü–∏–∏
        if (!hasAccessToSection(user.getUserRole(), section)) {
            log.warn("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} ({}) –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ–∫—Ü–∏–∏: {}",
                    user.getEmail(), user.getUserRole(), section);
            return Map.of(
                    "error", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ü–∏–∏ " + section,
                    "code", "ACCESS_DENIED",
                    "section", section,
                    "userRole", user.getUserRole().name()
            );
        }

        log.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏ '{}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} ({})",
                section, user.getEmail(), user.getUserRole());

        // ‚úÖ TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —á—Ç–æ —Å–µ–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        return Map.of(
                "message", "–°–µ–∫—Ü–∏—è '" + section + "' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                "section", section,
                "userRole", user.getUserRole().name(),
                "status", "coming_soon",
                "_meta", Map.of(
                        "section", section,
                        "userRole", user.getUserRole().name(),
                        "loadedAt", java.time.LocalDateTime.now(),
                        "userId", user.getId()
                )
        );
    }

    /**
     * üö™ JWT-aware Logout endpoint
     */
    @PostMapping("/logout")
    @ResponseBody
    public Map<String, Object> logout(HttpServletRequest request) {
        log.info("üö™ –ó–∞–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");

        try {
            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
            UserResponseDto user = dashboardService.getCurrentUserFromSession(request);
            String userEmail = user != null ? user.getEmail() : "unknown";

            // ‚úÖ –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ DashboardService
            dashboardService.clearUserSession(request);

            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã", userEmail);

            return Map.of(
                    "success", true,
                    "message", "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                    "redirectUrl", "/login",
                    "userEmail", userEmail,
                    "logoutTime", java.time.LocalDateTime.now()
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ logout: {}", e.getMessage());
            return Map.of(
                    "success", false,
                    "error", "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞",
                    "message", e.getMessage(),
                    "redirectUrl", "/login"
            );
        }
    }

    /**
     * üîç API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–∞
     */
    @GetMapping("/api/token-status")
    @ResponseBody
    public Map<String, Object> getTokenStatus(HttpServletRequest request) {
        log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–∞");

        try {
            DashboardService.TokenInfo tokenInfo = dashboardService.getTokenInfo(request);

            return Map.of(
                    "valid", tokenInfo.getValid(),
                    "message", tokenInfo.getMessage(),
                    "user", tokenInfo.getUser() != null ? Map.of(
                            "email", tokenInfo.getUser().getEmail(),
                            "role", tokenInfo.getUser().getUserRole().name(),
                            "firstName", tokenInfo.getUser().getFirstName()
                    ) : null,
                    "checkedAt", tokenInfo.getCheckedAt()
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
            return Map.of(
                    "valid", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: " + e.getMessage(),
                    "error", true
            );
        }
    }

    /**
     * üîÑ API endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/api/refresh-user")
    @ResponseBody
    public Map<String, Object> refreshUserData(HttpServletRequest request) {
        log.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        try {
            // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            String token = dashboardService.getTokenFromSession(request);

            if (token == null) {
                return Map.of(
                        "success", false,
                        "error", "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                );
            }

            // –û–±—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ User Service –∑–∞ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            UserResponseDto user = dashboardService.getCurrentUserFromSession(request);

            if (user == null) {
                return Map.of(
                        "success", false,
                        "error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                );
            }

            log.debug("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {}", user.getEmail());

            return Map.of(
                    "success", true,
                    "user", Map.of(
                            "id", user.getId(),
                            "email", user.getEmail(),
                            "firstName", user.getFirstName(),
                            "lastName", user.getLastName(),
                            "role", user.getUserRole().name(),
                            "roleDisplayName", user.getUserRole().getDisplayName()
                    ),
                    "updatedAt", java.time.LocalDateTime.now()
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage());
            return Map.of(
                    "success", false,
                    "error", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage()
            );
        }
    }

    // ========== PRIVATE –ú–ï–¢–û–î–´ ==========

    /**
     * üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Ä–æ–ª–∏
     */
    private Map<String, Object> getDashboardConfig(UserRole role) {
        return switch (role) {
            case ADMIN -> Map.of(
                    "title", "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    "sections", List.of("analytics", "users", "restaurants", "categories", "system"),
                    "permissions", List.of("manage_all", "view_analytics", "manage_users"),
                    "theme", "admin"
            );

            case BASE_USER -> Map.of(
                    "title", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                    "sections", List.of("orders", "favorites", "profile", "addresses"),
                    "permissions", List.of("view_orders", "manage_profile"),
                    "theme", "user"
            );

            case BUSINESS_USER -> Map.of(
                    "title", "–ö–∞–±–∏–Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                    "sections", List.of("restaurant", "orders", "menu", "analytics", "settings"),
                    "permissions", List.of("manage_restaurant", "view_orders", "manage_menu"),
                    "theme", "business"
            );

            case COURIER -> Map.of(
                    "title", "–ö–∞–±–∏–Ω–µ—Ç –∫—É—Ä—å–µ—Ä–∞",
                    "sections", List.of("deliveries", "available-orders", "earnings", "profile"),
                    "permissions", List.of("manage_deliveries", "view_orders"),
                    "theme", "courier"
            );
        };
    }

    /**
     * üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ü–∏–∏
     */
    private boolean hasAccessToSection(UserRole role, String section) {
        Map<UserRole, List<String>> accessMap = Map.of(
                UserRole.ADMIN, List.of("analytics", "users", "restaurants", "categories", "system"),
                UserRole.BASE_USER, List.of("orders", "favorites", "profile", "addresses"),
                UserRole.BUSINESS_USER, List.of("restaurant", "orders", "menu", "analytics", "settings"),
                UserRole.COURIER, List.of("deliveries", "available-orders", "earnings", "profile")
        );

        return accessMap.getOrDefault(role, List.of()).contains(section);
    }
}