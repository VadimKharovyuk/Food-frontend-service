package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.enums.UserRole;
import com.example.foodfrontendservice.service.DashboardService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/dashboard")
@RequiredArgsConstructor
@Slf4j
public class UnifiedDashboardController {

    private final DashboardService dashboardService;

    /**
     * üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞ - –µ–¥–∏–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
     */
    @GetMapping
    public String dashboard(HttpServletRequest request, Model model) {
        log.info("üè† –ó–∞–≥—Ä—É–∑–∫–∞ –µ–¥–∏–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞");

        // ‚úÖ –ù–û–í–´–ô –ü–û–î–•–û–î: –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        // –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω —á–µ—Ä–µ–∑ JavaScript API

        // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        model.addAttribute("needsAuth", true);
        model.addAttribute("apiBaseUrl", "http://localhost:8082");

        log.info("‚úÖ –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ JavaScript");

        return "dashboard/main";
    }

    /**
     * üîß API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞
     */
    @GetMapping("/api/config")
    @ResponseBody
    public Map<String, Object> getDashboardConfigApi(HttpServletRequest request) {
        log.debug("üîß –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞");

        // ‚úÖ JWT –ø—Ä–æ–≤–µ—Ä–∫–∞
        UserResponseDto user = dashboardService.getCurrentUserFromSession(request);

        if (user == null) {
            log.warn("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞");
            return Map.of(
                    "error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                    "code", "UNAUTHORIZED",
                    "redirectUrl", "/login"
            );
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        if (!dashboardService.isUserAuthenticated(request)) {
            log.warn("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user.getEmail());
            return Map.of(
                    "error", "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                    "code", "TOKEN_INVALID",
                    "redirectUrl", "/login"
            );
        }

        log.debug("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} ({})", user.getEmail(), user.getUserRole());

        return Map.of(
                "user", Map.of(
                        "id", user.getId(),
                        "email", user.getEmail(),
                        "firstName", user.getFirstName(),
                        "lastName", user.getLastName(),
                        "role", user.getUserRole().name(),
                        "roleDisplayName", user.getUserRole().getDisplayName()
                ),
                "config", getDashboardConfig(user.getUserRole()),
                "tokenInfo", dashboardService.getTokenInfo(request)
        );
    }

    /**
     * üìä API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞
     */
    @GetMapping("/api/data/{section}")
    @ResponseBody
    public Map<String, Object> getSectionData(@PathVariable String section, HttpServletRequest request) {
        log.debug("üìä –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏: {}", section);

        // ‚úÖ JWT –ø—Ä–æ–≤–µ—Ä–∫–∞
        UserResponseDto user = dashboardService.getCurrentUserFromSession(request);

        if (user == null) {
            log.warn("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–µ–∫—Ü–∏–∏: {}", section);
            return Map.of(
                    "error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                    "code", "UNAUTHORIZED",
                    "section", section
            );
        }

        // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if (!dashboardService.isUserAuthenticated(request)) {
            log.warn("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–µ–∫—Ü–∏–∏ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", section, user.getEmail());
            return Map.of(
                    "error", "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                    "code", "TOKEN_INVALID",
                    "section", section
            );
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–µ–∫—Ü–∏–∏
        if (!hasAccessToSection(user.getUserRole(), section)) {
            log.warn("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} ({}) –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ–∫—Ü–∏–∏: {}",
                    user.getEmail(), user.getUserRole(), section);
            return Map.of(
                    "error", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ü–∏–∏ " + section,
                    "code", "ACCESS_DENIED",
                    "section", section,
                    "userRole", user.getUserRole().name()
            );
        }

        log.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏ '{}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} ({})",
                section, user.getEmail(), user.getUserRole());

        try {
            // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏ —Å–µ–∫—Ü–∏–∏
            Map<String, Object> sectionData = loadSectionData(user.getUserRole(), section, user);

            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            sectionData.put("_meta", Map.of(
                    "section", section,
                    "userRole", user.getUserRole().name(),
                    "loadedAt", java.time.LocalDateTime.now(),
                    "userId", user.getId()
            ));

            return sectionData;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏ {}: {}", section, e.getMessage());
            return Map.of(
                    "error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏",
                    "code", "DATA_LOAD_ERROR",
                    "section", section,
                    "message", e.getMessage()
            );
        }
    }

    /**
     * üö™ JWT-aware Logout endpoint
     */
    @PostMapping("/logout")
    @ResponseBody
    public Map<String, Object> logout(HttpServletRequest request) {
        log.info("üö™ –ó–∞–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");

        try {
            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
            UserResponseDto user = dashboardService.getCurrentUserFromSession(request);
            String userEmail = user != null ? user.getEmail() : "unknown";

            // ‚úÖ –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ DashboardService
            dashboardService.clearUserSession(request);

            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã", userEmail);

            return Map.of(
                    "success", true,
                    "message", "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                    "redirectUrl", "/login",
                    "userEmail", userEmail,
                    "logoutTime", java.time.LocalDateTime.now()
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ logout: {}", e.getMessage());
            return Map.of(
                    "success", false,
                    "error", "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞",
                    "message", e.getMessage(),
                    "redirectUrl", "/login"
            );
        }
    }

    /**
     * üîç API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–∞
     */
    @GetMapping("/api/token-status")
    @ResponseBody
    public Map<String, Object> getTokenStatus(HttpServletRequest request) {
        log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–∞");

        try {
            DashboardService.TokenInfo tokenInfo = dashboardService.getTokenInfo(request);

            return Map.of(
                    "valid", tokenInfo.getValid(),
                    "message", tokenInfo.getMessage(),
                    "user", tokenInfo.getUser() != null ? Map.of(
                            "email", tokenInfo.getUser().getEmail(),
                            "role", tokenInfo.getUser().getUserRole().name(),
                            "firstName", tokenInfo.getUser().getFirstName()
                    ) : null,
                    "checkedAt", tokenInfo.getCheckedAt()
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
            return Map.of(
                    "valid", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: " + e.getMessage(),
                    "error", true
            );
        }
    }

    /**
     * üîÑ API endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/api/refresh-user")
    @ResponseBody
    public Map<String, Object> refreshUserData(HttpServletRequest request) {
        log.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        try {
            // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            String token = dashboardService.getTokenFromSession(request);

            if (token == null) {
                return Map.of(
                        "success", false,
                        "error", "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                );
            }

            // –û–±—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ User Service –∑–∞ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            UserResponseDto user = dashboardService.getCurrentUserFromSession(request);

            if (user == null) {
                return Map.of(
                        "success", false,
                        "error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                );
            }

            log.debug("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {}", user.getEmail());

            return Map.of(
                    "success", true,
                    "user", Map.of(
                            "id", user.getId(),
                            "email", user.getEmail(),
                            "firstName", user.getFirstName(),
                            "lastName", user.getLastName(),
                            "role", user.getUserRole().name(),
                            "roleDisplayName", user.getUserRole().getDisplayName()
                    ),
                    "updatedAt", java.time.LocalDateTime.now()
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage());
            return Map.of(
                    "success", false,
                    "error", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage()
            );
        }
    }

    // ========== PRIVATE –ú–ï–¢–û–î–´ ==========

    /**
     * üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Ä–æ–ª–∏
     */
    private Map<String, Object> getDashboardConfig(UserRole role) {
        return switch (role) {
            case ADMIN -> Map.of(
                    "title", "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    "sections", List.of("analytics", "users", "restaurants", "categories", "system"),
                    "permissions", List.of("manage_all", "view_analytics", "manage_users"),
                    "theme", "admin"
            );

            case BASE_USER -> Map.of(
                    "title", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                    "sections", List.of("orders", "favorites", "profile", "addresses"),
                    "permissions", List.of("view_orders", "manage_profile"),
                    "theme", "user"
            );

            case BUSINESS_USER -> Map.of(
                    "title", "–ö–∞–±–∏–Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                    "sections", List.of("restaurant", "orders", "menu", "analytics", "settings"),
                    "permissions", List.of("manage_restaurant", "view_orders", "manage_menu"),
                    "theme", "business"
            );

            case COURIER -> Map.of(
                    "title", "–ö–∞–±–∏–Ω–µ—Ç –∫—É—Ä—å–µ—Ä–∞",
                    "sections", List.of("deliveries", "available-orders", "earnings", "profile"),
                    "permissions", List.of("manage_deliveries", "view_orders"),
                    "theme", "courier"
            );
        };
    }

    /**
     * üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ü–∏–∏
     */
    private boolean hasAccessToSection(UserRole role, String section) {
        Map<UserRole, List<String>> accessMap = Map.of(
                UserRole.ADMIN, List.of("analytics", "users", "restaurants", "categories", "system"),
                UserRole.BASE_USER, List.of("orders", "favorites", "profile", "addresses"),
                UserRole.BUSINESS_USER, List.of("restaurant", "orders", "menu", "analytics", "settings"),
                UserRole.COURIER, List.of("deliveries", "available-orders", "earnings", "profile")
        );

        return accessMap.getOrDefault(role, List.of()).contains(section);
    }

    /**
     * üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏
     */
    private Map<String, Object> loadSectionData(UserRole role, String section, UserResponseDto user) {
        // ‚úÖ –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏ —Å–µ–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return switch (role) {
            case ADMIN -> loadAdminSectionData(section);
            case BASE_USER -> loadUserSectionData(section, user);
            case BUSINESS_USER -> loadBusinessSectionData(section, user);
            case COURIER -> loadCourierSectionData(section, user);
        };
    }

    // ========== –î–ê–ù–ù–´–ï –î–õ–Ø –†–û–õ–ï–ô ==========

    private Map<String, Object> loadAdminSectionData(String section) {
        return switch (section) {
            case "analytics" -> Map.of(
                    "totalUsers", 1247,
                    "totalOrders", 5432,
                    "totalRevenue", "234560‚ÇΩ",
                    "growthRate", "+12.5%",
                    "period", "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
            );

            case "users" -> Map.of(
                    "users", List.of(
                            Map.of("id", 1, "name", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "role", "BASE_USER", "status", "active", "lastLogin", "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"),
                            Map.of("id", 2, "name", "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "role", "BUSINESS_USER", "status", "active", "lastLogin", "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥"),
                            Map.of("id", 3, "name", "–ü–µ—Ç—Ä –ö—É—Ä—å–µ—Ä–æ–≤", "role", "COURIER", "status", "active", "lastLogin", "30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥")
                    ),
                    "totalCount", 1247,
                    "activeUsers", 987,
                    "newUsersToday", 12
            );

            case "restaurants" -> Map.of(
                    "restaurants", List.of(
                            Map.of("id", 1, "name", "–ü–∏—Ü—Ü–µ—Ä–∏—è –ú–∞–º–∞ –ú–∏–∞", "status", "active", "owner", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "rating", 4.8),
                            Map.of("id", 2, "name", "Tokyo Sushi", "status", "pending", "owner", "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "rating", 4.6),
                            Map.of("id", 3, "name", "Burger Street", "status", "blocked", "owner", "–ú–∏—Ö–∞–∏–ª –ü–µ—Ç—Ä–æ–≤", "rating", 3.2)
                    ),
                    "totalCount", 86,
                    "pendingApproval", 5,
                    "activeRestaurants", 78
            );

            case "categories" -> Map.of(
                    "categories", List.of(
                            Map.of("id", 1, "name", "–ü–∏—Ü—Ü–∞", "restaurantsCount", 15, "status", "active"),
                            Map.of("id", 2, "name", "–°—É—à–∏", "restaurantsCount", 8, "status", "active"),
                            Map.of("id", 3, "name", "–ë—É—Ä–≥–µ—Ä—ã", "restaurantsCount", 23, "status", "active")
                    ),
                    "totalCount", 12
            );

            case "system" -> Map.of(
                    "systemInfo", Map.of(
                            "version", "1.0.0",
                            "uptime", "15 –¥–Ω–µ–π",
                            "activeConnections", 1250,
                            "memoryUsage", "68%",
                            "diskUsage", "45%"
                    ),
                    "recentLogs", List.of(
                            Map.of("time", "10:30", "level", "INFO", "message", "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"),
                            Map.of("time", "10:25", "level", "WARN", "message", "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è IP"),
                            Map.of("time", "10:20", "level", "ERROR", "message", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    )
            );

            default -> Map.of("error", "–°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        };
    }

    private Map<String, Object> loadUserSectionData(String section, UserResponseDto user) {
        return switch (section) {
            case "orders" -> Map.of(
                    "orders", List.of(
                            Map.of("id", 1247, "restaurant", "–ü–∏—Ü—Ü–µ—Ä–∏—è –ú–∞–º–∞ –ú–∏–∞", "status", "delivered", "total", "890‚ÇΩ", "date", "–°–µ–≥–æ–¥–Ω—è 14:30"),
                            Map.of("id", 1248, "restaurant", "Tokyo Sushi", "status", "cooking", "total", "1200‚ÇΩ", "date", "–°–µ–≥–æ–¥–Ω—è 15:45"),
                            Map.of("id", 1249, "restaurant", "Burger Street", "status", "cancelled", "total", "650‚ÇΩ", "date", "–í—á–µ—Ä–∞ 19:20")
                    ),
                    "totalCount", 15,
                    "totalSpent", "15420‚ÇΩ",
                    "avgOrderValue", "1028‚ÇΩ"
            );

            case "favorites" -> Map.of(
                    "favorites", List.of(
                            Map.of("id", 1, "name", "–ü–∏—Ü—Ü–µ—Ä–∏—è –ú–∞–º–∞ –ú–∏–∞", "cuisine", "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "rating", 4.9, "deliveryTime", "25-35 –º–∏–Ω"),
                            Map.of("id", 2, "name", "Tokyo Sushi", "cuisine", "–Ø–ø–æ–Ω—Å–∫–∞—è", "rating", 4.7, "deliveryTime", "30-40 –º–∏–Ω"),
                            Map.of("id", 3, "name", "Burger Street", "cuisine", "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è", "rating", 4.5, "deliveryTime", "15-25 –º–∏–Ω")
                    ),
                    "totalCount", 5
            );

            case "profile" -> Map.of(
                    "profile", Map.of(
                            "id", user.getId(),
                            "email", user.getEmail(),
                            "firstName", user.getFirstName(),
                            "lastName", user.getLastName(),
                            "phone", "+7 XXX XXX-XX-XX",
                            "registeredAt", "15 —è–Ω–≤–∞—Ä—è 2024",
                            "totalOrders", 15,
                            "favoriteRestaurants", 5
                    )
            );

            case "addresses" -> Map.of(
                    "addresses", List.of(
                            Map.of("id", 1, "title", "–î–æ–º", "address", "—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 5", "isDefault", true),
                            Map.of("id", 2, "title", "–†–∞–±–æ—Ç–∞", "address", "–ø—Ä. –õ–µ–Ω–∏–Ω–∞, –¥. 50, –æ—Ñ. 205", "isDefault", false)
                    ),
                    "totalCount", 2
            );

            default -> Map.of("error", "–°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        };
    }

    private Map<String, Object> loadBusinessSectionData(String section, UserResponseDto user) {
        return switch (section) {
            case "restaurant" -> Map.of(
                    "restaurant", Map.of(
                            "name", "–†–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            "status", "active",
                            "rating", 4.8,
                            "ordersToday", 23,
                            "revenueToday", "15420‚ÇΩ",
                            "avgDeliveryTime", "28 –º–∏–Ω"
                    )
            );

            case "orders" -> Map.of(
                    "orders", List.of(
                            Map.of("id", 1247, "items", "2x –ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞, 1x –ö–æ–∫–∞-–∫–æ–ª–∞", "status", "cooking", "total", "890‚ÇΩ", "time", "12 –º–∏–Ω –Ω–∞–∑–∞–¥"),
                            Map.of("id", 1248, "items", "1x –ë—É—Ä–≥–µ—Ä –î–µ–ª—é–∫—Å, 1x –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏", "status", "new", "total", "650‚ÇΩ", "time", "8 –º–∏–Ω –Ω–∞–∑–∞–¥"),
                            Map.of("id", 1249, "items", "3x –°—É—à–∏ —Å–µ—Ç, 2x –ú–∏—Å–æ —Å—É–ø", "status", "ready", "total", "1850‚ÇΩ", "time", "5 –º–∏–Ω –Ω–∞–∑–∞–¥")
                    ),
                    "totalCount", 47,
                    "newOrders", 3,
                    "cookingOrders", 8
            );

            case "menu" -> Map.of(
                    "menuItems", List.of(
                            Map.of("id", 1, "name", "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "price", "450‚ÇΩ", "category", "–ü–∏—Ü—Ü–∞", "available", true),
                            Map.of("id", 2, "name", "–ë—É—Ä–≥–µ—Ä –î–µ–ª—é–∫—Å", "price", "380‚ÇΩ", "category", "–ë—É—Ä–≥–µ—Ä—ã", "available", true),
                            Map.of("id", 3, "name", "–°—É—à–∏ —Å–µ—Ç", "price", "850‚ÇΩ", "category", "–°—É—à–∏", "available", false)
                    ),
                    "totalItems", 45,
                    "availableItems", 42
            );

            case "analytics" -> Map.of(
                    "revenue", Map.of(
                            "today", "15420‚ÇΩ",
                            "week", "98750‚ÇΩ",
                            "month", "425630‚ÇΩ"
                    ),
                    "orders", Map.of(
                            "today", 23,
                            "week", 156,
                            "month", 687
                    ),
                    "topDishes", List.of(
                            Map.of("name", "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "orders", 45),
                            Map.of("name", "–ë—É—Ä–≥–µ—Ä –î–µ–ª—é–∫—Å", "orders", 38),
                            Map.of("name", "–°—É—à–∏ —Å–µ—Ç", "orders", 29)
                    )
            );

            default -> Map.of("error", "–°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        };
    }

    private Map<String, Object> loadCourierSectionData(String section, UserResponseDto user) {
        return switch (section) {
            case "deliveries" -> Map.of(
                    "activeDeliveries", List.of(
                            Map.of("id", 1247, "restaurant", "–ü–∏—Ü—Ü–µ—Ä–∏—è –ú–∞–º–∞ –ú–∏–∞", "customer", "–ò–≤–∞–Ω –ü.", "status", "picked_up", "distance", "2.1 –∫–º", "payment", "890‚ÇΩ"),
                            Map.of("id", 1248, "restaurant", "Tokyo Sushi", "customer", "–ê–Ω–Ω–∞ –°.", "status", "waiting", "distance", "1.5 –∫–º", "payment", "1200‚ÇΩ")
                    ),
                    "totalCount", 2,
                    "completedToday", 8
            );

            case "available-orders" -> Map.of(
                    "availableOrders", List.of(
                            Map.of("id", 1250, "restaurant", "Burger Street", "distance", "1.2 –∫–º", "payment", "750‚ÇΩ", "tip", "120‚ÇΩ"),
                            Map.of("id", 1251, "restaurant", "–ö–∞—Ñ–µ –£—é—Ç", "distance", "2.8 –∫–º", "payment", "1100‚ÇΩ", "tip", "150‚ÇΩ"),
                            Map.of("id", 1252, "restaurant", "–ü–∏—Ü—Ü–µ—Ä–∏—è –ú–∞–º–∞ –ú–∏–∞", "distance", "0.8 –∫–º", "payment", "650‚ÇΩ", "tip", "80‚ÇΩ")
                    ),
                    "totalAvailable", 15
            );

            case "earnings" -> Map.of(
                    "today", "1840‚ÇΩ",
                    "thisWeek", "12450‚ÇΩ",
                    "thisMonth", "54230‚ÇΩ",
                    "deliveriesToday", 12,
                    "avgDeliveryTime", "24 –º–∏–Ω",
                    "rating", 4.9,
                    "tips", Map.of(
                            "today", "340‚ÇΩ",
                            "week", "2150‚ÇΩ",
                            "month", "8970‚ÇΩ"
                    )
            );

            case "profile" -> Map.of(
                    "profile", Map.of(
                            "id", user.getId(),
                            "email", user.getEmail(),
                            "firstName", user.getFirstName(),
                            "lastName", user.getLastName(),
                            "phone", "+7 XXX XXX-XX-XX",
                            "vehicle", "–í–µ–ª–æ—Å–∏–ø–µ–¥",
                            "workingSince", "15 –º–∞—Ä—Ç–∞ 2024",
                            "totalDeliveries", 892,
                            "rating", 4.9
                    )
            );

            default -> Map.of("error", "–°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        };
    }
}