package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.config.JwtUtil;
import com.example.foodfrontendservice.config.TokenExtractor;
import com.example.foodfrontendservice.dto.AUTSERVICE.UserTokenInfo;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Favorite.FavoriteStoreApiResponse;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Favorite.FavoriteStoreResponseDto;
import com.example.foodfrontendservice.service.FavoriteStoreClientService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.*;

@Controller
@RequiredArgsConstructor
@Slf4j
@RequestMapping("/favorites/stores")
public class FavoritesStoreController {

    private final FavoriteStoreClientService storeClientService;
    private final JwtUtil jwtUtil;
    private final TokenExtractor tokenExtractor; // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º TokenExtractor

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
     */
    @GetMapping
    public String favoritesStores(
            HttpServletRequest request,
            Model model,
            RedirectAttributes redirectAttributes) {

        log.info("üõçÔ∏è –ó–∞–ø—Ä–æ—Å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        try {
            // ‚úÖ –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º TokenExtractor –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            UserTokenInfo userInfo = tokenExtractor.getCurrentUserInfo(request);
            boolean isAuthenticated = tokenExtractor.isAuthenticated(request);

            // üîç –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            log.debug("üîç –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:");
            log.debug("- Is Authenticated: {}", isAuthenticated);
            log.debug("- UserInfo: {}", userInfo != null ? userInfo.toString() : "NULL");

            if (!isAuthenticated || userInfo == null) {
                log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω");
                redirectAttributes.addFlashAttribute("error", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return "redirect:/login";
            }

            log.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={}, Email={}, Role={}",
                    userInfo.getUserId(), userInfo.getEmail(), userInfo.getRole());

            // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥–µ–ª—å
            model.addAttribute("isAuthenticated", true);
            model.addAttribute("userRole", userInfo.getRole());
            model.addAttribute("userEmail", userInfo.getEmail());
            model.addAttribute("userId", userInfo.getUserId());
            model.addAttribute("jwtToken", userInfo.getToken()); // –î–ª—è JavaScript
            model.addAttribute("authToken", userInfo.getToken());
            model.addAttribute("authHeader", "Bearer " + userInfo.getToken());

            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
            FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>> response =
                    storeClientService.getMyFavorites(userInfo.getToken());

            if (response != null && response.getSuccess()) {
                List<FavoriteStoreResponseDto> favoriteStores = response.getData();

                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                        favoriteStores != null ? favoriteStores.size() : 0, userInfo.getEmail());

                model.addAttribute("favoriteStores", favoriteStores != null ? favoriteStores : Collections.emptyList());
                model.addAttribute("hasStores", favoriteStores != null && !favoriteStores.isEmpty());
                model.addAttribute("storesCount", favoriteStores != null ? favoriteStores.size() : 0);

                // ‚úÖ –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                if (favoriteStores != null && !favoriteStores.isEmpty()) {
                    double averageRating = favoriteStores.stream()
                            .filter(store -> store.getStore() != null && store.getStore().getRating() != null)
                            .mapToDouble(store -> store.getStore().getRating().doubleValue())
                            .average()
                            .orElse(0.0);

                    model.addAttribute("averageRating", Math.round(averageRating * 10.0) / 10.0);
                    log.debug("üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", averageRating);
                }

            } else {
                String errorMessage = response != null ? response.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è {}: {}",
                        userInfo.getEmail(), errorMessage);

                model.addAttribute("favoriteStores", Collections.emptyList());
                model.addAttribute("hasStores", false);
                model.addAttribute("storesCount", 0);
                model.addAttribute("error", errorMessage);
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤", e);
            model.addAttribute("favoriteStores", Collections.emptyList());
            model.addAttribute("hasStores", false);
            model.addAttribute("isAuthenticated", false);
            model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤");
        }

        return "favorites/stores";
    }

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
     */
    @PostMapping("/add/{storeId}")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> addToFavorites(
            @PathVariable Long storeId,
            HttpServletRequest request) {

        log.info("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ {} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", storeId);

        Map<String, Object> response = new HashMap<>();

        try {
            // ‚úÖ –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º TokenExtractor
            UserTokenInfo userInfo = tokenExtractor.getCurrentUserInfo(request);

            if (userInfo == null) {
                log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
                response.put("success", false);
                response.put("message", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è storeId
            if (storeId == null || storeId <= 0) {
                log.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞: {}", storeId);
                response.put("success", false);
                response.put("message", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞");
                return ResponseEntity.badRequest().body(response);
            }

            log.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (ID: {}) –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∞–≥–∞–∑–∏–Ω {} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    userInfo.getEmail(), userInfo.getUserId(), storeId);

            FavoriteStoreApiResponse<FavoriteStoreResponseDto> apiResponse =
                    storeClientService.addToFavorites(userInfo.getToken(), storeId);

            if (apiResponse != null && apiResponse.getSuccess()) {
                log.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω {} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}",
                        storeId, userInfo.getEmail());
                response.put("success", true);
                response.put("message", "–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
                response.put("data", apiResponse.getData());
                response.put("storeId", storeId);
                return ResponseEntity.ok(response);
            } else {
                String errorMessage = apiResponse != null ? apiResponse.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                log.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ {} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è {}: {}",
                        storeId, userInfo.getEmail(), errorMessage);
                response.put("success", false);
                response.put("message", errorMessage);
                response.put("storeId", storeId);
                return ResponseEntity.badRequest().body(response);
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", e);
            response.put("success", false);
            response.put("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
            response.put("storeId", storeId);
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
     */
    @DeleteMapping("/remove/{storeId}")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> removeFromFavorites(
            @PathVariable Long storeId,
            HttpServletRequest request) {

        log.info("‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", storeId);

        Map<String, Object> response = new HashMap<>();

        try {
            // ‚úÖ –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º TokenExtractor
            UserTokenInfo userInfo = tokenExtractor.getCurrentUserInfo(request);

            if (userInfo == null) {
                log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
                response.put("success", false);
                response.put("message", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è storeId
            if (storeId == null || storeId <= 0) {
                log.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {}", storeId);
                response.put("success", false);
                response.put("message", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞");
                return ResponseEntity.badRequest().body(response);
            }

            log.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (ID: {}) —É–¥–∞–ª—è–µ—Ç –º–∞–≥–∞–∑–∏–Ω {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                    userInfo.getEmail(), userInfo.getUserId(), storeId);

            FavoriteStoreApiResponse<String> apiResponse =
                    storeClientService.removeFromFavorites(userInfo.getToken(), storeId);

            if (apiResponse != null && apiResponse.getSuccess()) {
                log.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}",
                        storeId, userInfo.getEmail());
                response.put("success", true);
                response.put("message", "–ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
                response.put("data", apiResponse.getData());
                response.put("storeId", storeId);
                return ResponseEntity.ok(response);
            } else {
                String errorMessage = apiResponse != null ? apiResponse.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                log.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è {}: {}",
                        storeId, userInfo.getEmail(), errorMessage);

                response.put("success", false);
                response.put("message", errorMessage);
                response.put("storeId", storeId);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–∫–∏
                if (errorMessage.contains("–Ω–µ –Ω–∞–π–¥–µ–Ω") || errorMessage.contains("not found")) {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
                } else {
                    return ResponseEntity.badRequest().body(response);
                }
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", storeId, e);
            response.put("success", false);
            response.put("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
            response.put("storeId", storeId);
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * ‚úÖ –ù–û–í–´–ô API: Toggle favorite (–¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏)
     */
    @PostMapping("/api/{storeId}/toggle-favorite")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> toggleFavorite(
            @PathVariable Long storeId,
            HttpServletRequest request) {

        log.info("üîÑ Toggle favorite –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {} (–∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)", storeId);

        Map<String, Object> response = new HashMap<>();

        try {
            UserTokenInfo userInfo = tokenExtractor.getCurrentUserInfo(request);

            if (userInfo == null) {
                response.put("success", false);
                response.put("message", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            if (storeId == null || storeId <= 0) {
                response.put("success", false);
                response.put("message", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞");
                return ResponseEntity.badRequest().body(response);
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>> favoritesResponse =
                    storeClientService.getMyFavorites(userInfo.getToken());

            boolean isFavorite = false;
            if (favoritesResponse != null && favoritesResponse.getSuccess() && favoritesResponse.getData() != null) {
                isFavorite = favoritesResponse.getData().stream()
                        .anyMatch(favorite -> favorite.getStore().getId().equals(storeId));
            }

            log.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} {} –º–∞–≥–∞–∑–∏–Ω {} (—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {})",
                    userInfo.getEmail(), isFavorite ? "—É–¥–∞–ª—è–µ—Ç" : "–¥–æ–±–∞–≤–ª—è–µ—Ç",
                    storeId, isFavorite ? "–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º" : "–Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º");

            if (isFavorite) {
                // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                FavoriteStoreApiResponse<String> removeResponse =
                        storeClientService.removeFromFavorites(userInfo.getToken(), storeId);

                if (removeResponse != null && removeResponse.getSuccess()) {
                    response.put("success", true);
                    response.put("message", "–ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
                    response.put("isFavorite", false);
                    response.put("action", "removed");
                } else {
                    response.put("success", false);
                    response.put("message", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
                }
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                FavoriteStoreApiResponse<FavoriteStoreResponseDto> addResponse =
                        storeClientService.addToFavorites(userInfo.getToken(), storeId);

                if (addResponse != null && addResponse.getSuccess()) {
                    response.put("success", true);
                    response.put("message", "–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
                    response.put("isFavorite", true);
                    response.put("action", "added");
                    response.put("data", addResponse.getData());
                } else {
                    response.put("success", false);
                    response.put("message", "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
                }
            }

            response.put("storeId", storeId);
            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ toggle favorite –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {}", storeId, e);
            response.put("success", false);
            response.put("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
            response.put("storeId", storeId);
            return ResponseEntity.internalServerError().body(response);
        }
    }


}