package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.config.JwtUtil;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Favorite.FavoriteStoreApiResponse;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.Favorite.FavoriteStoreResponseDto;
import com.example.foodfrontendservice.service.FavoriteStoreClientService;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.*;
@Controller
@RequiredArgsConstructor
@Slf4j
@RequestMapping("/favorites/stores")
public class FavoritesStoreController {

    private final FavoriteStoreClientService storeClientService;
    private final JwtUtil jwtUtil;


    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
     */
    @PostMapping("/add/{storeId}")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> addToFavorites(
            @PathVariable Long storeId,
            HttpServletRequest request) {

        log.info("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ {} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", storeId);

        Map<String, Object> response = new HashMap<>();

        try {
            String token = extractTokenFromRequest(request);

            if (token == null) {
                response.put("success", false);
                response.put("message", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            if (!jwtUtil.isTokenValid(token)) {
                response.put("success", false);
                response.put("message", "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            FavoriteStoreApiResponse<FavoriteStoreResponseDto> apiResponse =
                    storeClientService.addToFavorites(token, storeId);

            if (apiResponse != null && apiResponse.getSuccess()) {
                log.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω {} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", storeId);
                response.put("success", true);
                response.put("message", "–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
                response.put("data", apiResponse.getData());
                return ResponseEntity.ok(response);
            } else {
                log.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {}",
                        apiResponse != null ? apiResponse.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
                response.put("success", false);
                response.put("message", apiResponse != null ? apiResponse.getMessage() : "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è");
                return ResponseEntity.badRequest().body(response);
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", e);
            response.put("success", false);
            response.put("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
            return ResponseEntity.internalServerError().body(response);
        }
    }

    @DeleteMapping("/remove/{storeId}")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> removeFromFavorites(
            @PathVariable Long storeId,
            HttpServletRequest request) {

        log.info("‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", storeId);

        Map<String, Object> response = new HashMap<>();

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            String token = extractTokenFromRequest(request);

            if (token == null) {
                log.warn("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
                response.put("success", false);
                response.put("message", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            if (!jwtUtil.isTokenValid(token)) {
                log.warn("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
                response.put("success", false);
                response.put("message", "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º storeId
            if (storeId == null || storeId <= 0) {
                log.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {}", storeId);
                response.put("success", false);
                response.put("message", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞");
                return ResponseEntity.badRequest().body(response);
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
            String userEmail = jwtUtil.getEmailFromToken(token);
            Long userId = jwtUtil.getUserIdFromToken(token);

            log.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (ID: {}) —É–¥–∞–ª—è–µ—Ç –º–∞–≥–∞–∑–∏–Ω {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", userEmail, userId, storeId);

            // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞
            FavoriteStoreApiResponse<String> apiResponse =
                    storeClientService.removeFromFavorites(token, storeId);

            if (apiResponse != null && apiResponse.getSuccess()) {
                log.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", storeId, userEmail);
                response.put("success", true);
                response.put("message", "–ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
                response.put("data", apiResponse.getData());
                response.put("storeId", storeId);
                return ResponseEntity.ok(response);
            } else {
                String errorMessage = apiResponse != null ? apiResponse.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                log.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {}", storeId, errorMessage);

                response.put("success", false);
                response.put("message", errorMessage);
                response.put("storeId", storeId);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–∫–∏
                if (errorMessage.contains("–Ω–µ –Ω–∞–π–¥–µ–Ω") || errorMessage.contains("not found")) {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
                } else {
                    return ResponseEntity.badRequest().body(response);
                }
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", storeId, e);
            response.put("success", false);
            response.put("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
            response.put("storeId", storeId);
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
     */
    @GetMapping
    public String favoritesStores(
            HttpServletRequest request,
            Model model,
            RedirectAttributes redirectAttributes) {

        log.info("üõçÔ∏è –ó–∞–ø—Ä–æ—Å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        try {
            logRequestDetails(request);

            String token = extractTokenFromRequest(request);

            if (token == null) {
                log.warn("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω");
                redirectAttributes.addFlashAttribute("error", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
                return "redirect:/login";
            }

            if (!jwtUtil.isTokenValid(token)) {
                log.warn("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω");
                redirectAttributes.addFlashAttribute("error", "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ");
                return "redirect:/login";
            }

            String userEmail = jwtUtil.getEmailFromToken(token);
            Long userId = jwtUtil.getUserIdFromToken(token);
            String userRole = jwtUtil.getRoleFromToken(token);

            log.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={}, Email={}, Role={}", userId, userEmail, userRole);

            model.addAttribute("jwtToken", token);
            model.addAttribute("isAuthenticated", true);
            model.addAttribute("userRole", userRole);
            model.addAttribute("userEmail", userEmail);
            model.addAttribute("userId", userId);

            FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>> response =
                    storeClientService.getMyFavorites(token);

            if (response != null && response.getSuccess()) {
                List<FavoriteStoreResponseDto> favoriteStores = response.getData();

                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤", favoriteStores != null ? favoriteStores.size() : 0);

                model.addAttribute("favoriteStores", favoriteStores != null ? favoriteStores : Collections.emptyList());
                model.addAttribute("hasStores", favoriteStores != null && !favoriteStores.isEmpty());
                model.addAttribute("storesCount", favoriteStores != null ? favoriteStores.size() : 0);

                if (favoriteStores != null && !favoriteStores.isEmpty()) {
                    double averageRating = favoriteStores.stream()
                            .filter(store -> store.getStore() != null && store.getStore().getRating() != null)
                            .mapToDouble(store -> store.getStore().getRating().doubleValue())
                            .average()
                            .orElse(0.0);

                    model.addAttribute("averageRating", Math.round(averageRating * 10.0) / 10.0);
                }

            } else {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}",
                        response != null ? response.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");

                model.addAttribute("favoriteStores", Collections.emptyList());
                model.addAttribute("hasStores", false);
                model.addAttribute("storesCount", 0);
                model.addAttribute("error", response != null ? response.getMessage() : "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
            }

        } catch (Exception e) {
            log.error("üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤", e);
            model.addAttribute("favoriteStores", Collections.emptyList());
            model.addAttribute("hasStores", false);
            model.addAttribute("isAuthenticated", false);
            model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤");
        }

        return "favorites/stores";
    }

    /**
     * ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    private String extractTokenFromRequest(HttpServletRequest request) {
        log.info("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞...");

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Authorization header
        String bearerToken = request.getHeader("Authorization");
        log.info("üìã Authorization header: {}", bearerToken != null ? "–ù–∞–π–¥–µ–Ω" : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");

        if (bearerToken != null && bearerToken.startsWith("Bearer ")) {
            String token = bearerToken.substring(7);
            log.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ Authorization header (–¥–ª–∏–Ω–∞: {})", token.length());
            return token;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
        log.info("üç™ –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies...");
        if (request.getCookies() != null) {
            log.info("üì¶ –ù–∞–π–¥–µ–Ω–æ {} cookies", request.getCookies().length);

            for (Cookie cookie : request.getCookies()) {
                log.info("üç™ Cookie: {} = {}", cookie.getName(),
                        cookie.getValue() != null ? "[" + cookie.getValue().length() + " —Å–∏–º–≤–æ–ª–æ–≤]" : "null");

                if ("jwt".equals(cookie.getName()) || "accessToken".equals(cookie.getName())) {
                    String token = cookie.getValue();
                    if (token != null && !token.trim().isEmpty()) {
                        log.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ cookie '{}' (–¥–ª–∏–Ω–∞: {})", cookie.getName(), token.length());
                        return token;
                    }
                }
            }
        } else {
            log.warn("‚ùå Cookies –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ");
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        String paramToken = request.getParameter("token");
        if (paramToken != null && !paramToken.trim().isEmpty()) {
            log.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–¥–ª–∏–Ω–∞: {})", paramToken.length());
            return paramToken;
        }

        log.warn("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤");
        return null;
    }

    /**
     * ‚úÖ –ú–ï–¢–û–î –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
     */
    private void logRequestDetails(HttpServletRequest request) {
        log.info("üìù === –î–ï–¢–ê–õ–ò –ó–ê–ü–†–û–°–ê ===");
        log.info("üåê URL: {}", request.getRequestURL());
        log.info("üîó Method: {}", request.getMethod());
        log.info("üìç Remote Address: {}", request.getRemoteAddr());
        log.info("üñ•Ô∏è User Agent: {}", request.getHeader("User-Agent"));

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        log.info("üìã === –ó–ê–ì–û–õ–û–í–ö–ò ===");
        Enumeration<String> headerNames = request.getHeaderNames();
        while (headerNames.hasMoreElements()) {
            String headerName = headerNames.nextElement();
            String headerValue = request.getHeader(headerName);

            if ("Authorization".equalsIgnoreCase(headerName) && headerValue != null) {
                log.info("üìã {}: {}", headerName, headerValue.startsWith("Bearer ")
                        ? "Bearer [HIDDEN:" + (headerValue.length() - 7) + " chars]"
                        : "[HIDDEN:" + headerValue.length() + " chars]");
            } else {
                log.info("üìã {}: {}", headerName, headerValue);
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º cookies
        log.info("üç™ === COOKIES ===");
        if (request.getCookies() != null) {
            for (Cookie cookie : request.getCookies()) {
                String value = cookie.getValue();
                if ("jwt".equals(cookie.getName()) || "accessToken".equals(cookie.getName())) {
                    log.info("üç™ {}: [HIDDEN:{} chars] (Domain: {}, Path: {})",
                            cookie.getName(),
                            value != null ? value.length() : 0,
                            cookie.getDomain(),
                            cookie.getPath());
                } else {
                    log.info("üç™ {}: {} (Domain: {}, Path: {})",
                            cookie.getName(),
                            value,
                            cookie.getDomain(),
                            cookie.getPath());
                }
            }
        } else {
            log.info("üç™ Cookies –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
        }

        log.info("üìù === –ö–û–ù–ï–¶ –î–ï–¢–ê–õ–ï–ô ===");
    }
}