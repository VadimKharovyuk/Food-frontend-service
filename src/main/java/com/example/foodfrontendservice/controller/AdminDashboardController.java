package com.example.foodfrontendservice.controller;
import com.example.foodfrontendservice.Client.StoreServiceClient;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.StoreResponseWrapper;
import com.example.foodfrontendservice.enums.UserRole;
import com.example.foodfrontendservice.service.DashboardService;
import com.example.foodfrontendservice.service.StoreService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;

import java.util.Collections;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/dashboard/ADMIN")
@RequiredArgsConstructor
@Slf4j
public class AdminDashboardController {

    private final DashboardService dashboardService;
    private final StoreService storeService;


    @GetMapping("/restaurants")
    public String restaurants(HttpServletRequest request, Model model,
                              @RequestParam(defaultValue = "0") int page,
                              @RequestParam(defaultValue = "10") int size) {

        log.info("üè™ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏ (page: {}, size: {})", page, size);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (!dashboardService.hasRole(request, UserRole.ADMIN)) {
            log.warn("üö´ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
            return "redirect:/dashboard?error=access_denied";
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            String dashboardView = dashboardService.loadRoleSpecificDashboard(
                    request, model, UserRole.ADMIN, "dashboard/admin-restaurants"
            );


            if (dashboardView.startsWith("redirect:")) {
                return dashboardView;
            }


            StoreResponseWrapper storeResponse = storeService.getActiveStores(page, size);

            if (storeResponse != null && Boolean.TRUE.equals(storeResponse.getSuccess())) {

                int totalPages = calculateTotalPages(storeResponse.getTotalCount(), size);

                model.addAttribute("stores", storeResponse.getStores());
                model.addAttribute("totalPages", totalPages);
                model.addAttribute("currentPage", page);
                model.addAttribute("pageSize", size);
                model.addAttribute("totalCount", storeResponse.getTotalCount());


                model.addAttribute("hasNext", Boolean.TRUE.equals(storeResponse.getHasNext()));
                model.addAttribute("hasPrevious", Boolean.TRUE.equals(storeResponse.getHasPrevious()));
                model.addAttribute("nextPage", page + 1);
                model.addAttribute("previousPage", page - 1);

                log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {}",
                        storeResponse.getStores() != null ? storeResponse.getStores().size() : 0, page);
            } else {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö: {}",
                        storeResponse != null ? storeResponse.getMessage() : "null response");


                model.addAttribute("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö");
                model.addAttribute("stores", Collections.emptyList());
                model.addAttribute("totalPages", 0);
                model.addAttribute("currentPage", 0);
                model.addAttribute("totalCount", 0);
                model.addAttribute("hasNext", false);
                model.addAttribute("hasPrevious", false);
                model.addAttribute("nextPage", 0);
                model.addAttribute("previousPage", 0);
            }

            return "admin/admin-restaurants";

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏: {}", e.getMessage(), e);
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
            model.addAttribute("stores", Collections.emptyList());
            model.addAttribute("totalPages", 0);
            model.addAttribute("currentPage", 0);
            model.addAttribute("totalCount", 0);
            model.addAttribute("hasNext", false);
            model.addAttribute("hasPrevious", false);
            return "admin/admin-restaurants";
        }
    }


    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    private int calculateTotalPages(Integer totalCount, int pageSize) {
        if (totalCount == null || totalCount <= 0) {
            return 0;
        }
        return (int) Math.ceil((double) totalCount / pageSize);
    }


        /**
         * üè™ AJAX endpoint –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
         */
    @GetMapping("/restaurants-count")
    @ResponseBody
    public Map<String, Object> getRestaurants(HttpServletRequest request,
                                              @RequestParam(defaultValue = "0") int page,
                                              @RequestParam(defaultValue = "10") int size) {
        log.info("üè™ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (page: {}, size: {})", page, size);

        if (!dashboardService.hasRole(request, UserRole.ADMIN)) {
            return Map.of("success", false, "message", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        return Map.of(
                "success", true,
                "restaurants", List.of(
                        Map.of("id", 1, "name", "–ü–∏—Ü—Ü–µ—Ä–∏—è –ú–∞–º–∞ –ú–∏–∞", "status", "pending", "owner", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"),
                        Map.of("id", 2, "name", "Tokyo Sushi", "status", "active", "owner", "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞"),
                        Map.of("id", 3, "name", "–§–∞—Å—Ç –§—É–¥ –≠–∫—Å–ø—Ä–µ—Å—Å", "status", "blocked", "owner", "–ü–µ—Ç—Ä –í–∞—Å–∏–ª—å–µ–≤")
                ),
                "totalPages", 5,
                "currentPage", page
        );
    }


    @GetMapping
    public String adminDashboard(HttpServletRequest request, Model model) {


        log.info("üëë –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        return dashboardService.loadRoleSpecificDashboard(request, model, UserRole.ADMIN, "dashboard/admin");
    }

    /**
     * üë• AJAX endpoint –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @GetMapping("/user-stats")
    @ResponseBody
    public Map<String, Object> getUserStats(HttpServletRequest request) {
        log.info("üë• –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

        if (!dashboardService.hasRole(request, UserRole.ADMIN)) {
            return Map.of("success", false, "message", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ UserService
        return Map.of(
                "success", true,
                "stats", Map.of(
                        "totalUsers", 1247,
                        "baseUsers", 987,
                        "businessUsers", 86,
                        "couriers", 174,
                        "admins", 3
                )
        );
    }


    /**
     * ‚úÖ AJAX endpoint –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
     */
    @PostMapping("/restaurants/{id}/approve")
    @ResponseBody
    public Map<String, Object> approveRestaurant(HttpServletRequest request,
                                                 @PathVariable Long id) {
        log.info("‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å ID: {}", id);

        if (!dashboardService.hasRole(request, UserRole.ADMIN)) {
            return Map.of("success", false, "message", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ RestaurantService
        return Map.of(
                "success", true,
                "message", "–†–µ—Å—Ç–æ—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω"
        );
    }

    /**
     * ‚ùå AJAX endpoint –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
     */
    @PostMapping("/restaurants/{id}/reject")
    @ResponseBody
    public Map<String, Object> rejectRestaurant(HttpServletRequest request,
                                                @PathVariable Long id,
                                                @RequestBody Map<String, String> reasonData) {
        log.info("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å ID: {}, –ø—Ä–∏—á–∏–Ω–∞: {}", id, reasonData.get("reason"));

        if (!dashboardService.hasRole(request, UserRole.ADMIN)) {
            return Map.of("success", false, "message", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        return Map.of(
                "success", true,
                "message", "–†–µ—Å—Ç–æ—Ä–∞–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω"
        );
    }

    /**
     * üö´ AJAX endpoint –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
     */
    @PostMapping("/restaurants/{id}/block")
    @ResponseBody
    public Map<String, Object> blockRestaurant(HttpServletRequest request,
                                               @PathVariable Long id,
                                               @RequestBody Map<String, String> reasonData) {
        log.info("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å ID: {}", id);

        if (!dashboardService.hasRole(request, UserRole.ADMIN)) {
            return Map.of("success", false, "message", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        return Map.of(
                "success", true,
                "message", "–†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        );
    }

    /**
     * üìä AJAX endpoint –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    @GetMapping("/analytics")
    @ResponseBody
    public Map<String, Object> getSystemAnalytics(HttpServletRequest request,
                                                  @RequestParam(defaultValue = "day") String period) {
        log.info("üìä –ó–∞–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {}", period);

        if (!dashboardService.hasRole(request, UserRole.ADMIN)) {
            return Map.of("success", false, "message", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        return Map.of(
                "success", true,
                "analytics", Map.of(
                        "period", period,
                        "totalOrders", 5432,
                        "totalRevenue", "234560‚ÇΩ",
                        "averageDeliveryTime", "28 –º–∏–Ω",
                        "successRate", "97.2%",
                        "userGrowth", "+12.5%",
                        "orderGrowth", "+8.3%"
                )
        );
    }

    /**
     * üîß AJAX endpoint –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    @PostMapping("/system-settings")
    @ResponseBody
    public Map<String, Object> updateSystemSettings(HttpServletRequest request,
                                                    @RequestBody Map<String, Object> settings) {
        log.info("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {}", settings);

        if (!dashboardService.hasRole(request, UserRole.ADMIN)) {
            return Map.of("success", false, "message", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return Map.of(
                "success", true,
                "message", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
        );
    }
}
