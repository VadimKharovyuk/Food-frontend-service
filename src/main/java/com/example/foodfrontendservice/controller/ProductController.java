package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.Client.ProductServiceClient;
import com.example.foodfrontendservice.dto.CreateProductDto;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.SingleProductResponseWrapper;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartException;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;
@Slf4j
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
@Controller
@RequestMapping("/products")
public class ProductController {

    private final ProductServiceClient productServiceClient;
    private final ObjectMapper objectMapper;


    @GetMapping("/create")
    public String showCreateForm(Model model) {
        model.addAttribute("product", new CreateProductDto());
        return "products/create";
    }

        @PostMapping("/create")
        public String createProduct(@Valid @ModelAttribute CreateProductDto product,
                                    BindingResult bindingResult,
                                    @RequestParam("imageFile") MultipartFile imageFile,
                                    @RequestParam(value = "userId", defaultValue = "1") Long userId,
                                    RedirectAttributes redirectAttributes,
                                    Model model) {

            log.info("üöÄ Creating product: {}", product.getName());

            try {
                // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                if (bindingResult.hasErrors()) {
                    log.warn("Form validation errors: {}", bindingResult.getAllErrors());
                    model.addAttribute("error", "–û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ");
                    model.addAttribute("product", product);
                    return "products/create";
                }

                if (imageFile == null || imageFile.isEmpty()) {
                    model.addAttribute("error", "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
                    model.addAttribute("product", product);
                    return "products/create";
                }

                if (imageFile.getSize() > 10 * 1024 * 1024) {
                    model.addAttribute("error", "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10MB)");
                    model.addAttribute("product", product);
                    return "products/create";
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                if (!isValidContentType(imageFile.getContentType())) {
                    model.addAttribute("error", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –¢–æ–ª—å–∫–æ JPG, PNG, GIF, WEBP");
                    model.addAttribute("product", product);
                    return "products/create";
                }

                // üî• –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú –ü–†–û–î–£–ö–¢ –í JSON –°–¢–†–û–ö–£
                String productJson = objectMapper.writeValueAsString(product);
                log.info("üì§ Sending product JSON: {}", productJson);
                log.info("üì§ Sending image: {} ({} bytes)", imageFile.getOriginalFilename(), imageFile.getSize());

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Product Service
                ResponseEntity<SingleProductResponseWrapper> response =
                        productServiceClient.createProduct(productJson, imageFile, userId);

                log.info("‚úÖ Response status: {}", response.getStatusCode());

                if (response.getStatusCode().is2xxSuccessful()) {
                    SingleProductResponseWrapper result = response.getBody();
                    if (result != null && Boolean.TRUE.equals(result.getSuccess())) {
                        log.info("üéâ Product created successfully!");
                        redirectAttributes.addFlashAttribute("success", "–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω!");
                        return "redirect:/products";
                    } else {
                        String errorMsg = result != null ? result.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                        log.warn("‚ùå Product creation failed: {}", errorMsg);
                        model.addAttribute("error", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " + errorMsg);
                        model.addAttribute("product", product);
                        return "products/create";
                    }
                } else {
                    log.warn("‚ùå Bad response status: {}", response.getStatusCode());
                    model.addAttribute("error", "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + response.getStatusCode());
                    model.addAttribute("product", product);
                    return "products/create";
                }

            } catch (Exception e) {
                log.error("üí• Error creating product", e);
                model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
                model.addAttribute("product", product);
                return "products/create";
            }
        }

        private boolean isValidContentType(String contentType) {
            if (contentType == null) {
                return false;
            }

            String normalizedType = contentType.toLowerCase().trim();

            return normalizedType.equals("image/jpeg") ||
                    normalizedType.equals("image/png") ||
                    normalizedType.equals("image/gif") ||
                    normalizedType.equals("image/webp");
        }
    }
