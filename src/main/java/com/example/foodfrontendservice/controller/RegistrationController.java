
package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.dto.UserRegistrationDto;
import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.enums.UserRole;
import com.example.foodfrontendservice.service.UserIntegrationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import java.util.List;

@Controller
@RequestMapping("/register")
@RequiredArgsConstructor
@Slf4j
public class RegistrationController {

    private final UserIntegrationService userIntegrationService;

    /**
     * üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    @GetMapping
    public String showRegistrationForm(Model model) {
        log.info("üìã –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");

        try {
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ñ–æ—Ä–º—ã
            model.addAttribute("registrationDto", new UserRegistrationDto());

            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ User Service
            List<UserRole> availableRoles = userIntegrationService.getAvailableRoles();
            model.addAttribute("availableRoles", availableRoles);

            log.info("‚úÖ –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å {} —Ä–æ–ª—è–º–∏", availableRoles.size());
            return "registration/register";

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", e.getMessage(), e);
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            return "error/registration";
        }
    }

    /**
     * üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping
    public String registerUser(@Valid @ModelAttribute UserRegistrationDto registrationDto,
                               BindingResult bindingResult,
                               Model model,
                               RedirectAttributes redirectAttributes) {

        log.info("üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if (bindingResult.hasErrors()) {
                log.warn("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", bindingResult.getAllErrors());

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
                List<UserRole> availableRoles = userIntegrationService.getAvailableRoles();
                model.addAttribute("availableRoles", availableRoles);
                model.addAttribute("error", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ");

                return "registration/register";
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å email
            Boolean isEmailAvailable = userIntegrationService.checkEmailAvailability(registrationDto.getEmail());
            if (!Boolean.TRUE.equals(isEmailAvailable)) {
                log.warn("üìß Email {} —É–∂–µ –∑–∞–Ω—è—Ç", registrationDto.getEmail());

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
                List<UserRole> availableRoles = userIntegrationService.getAvailableRoles();
                model.addAttribute("availableRoles", availableRoles);
                model.addAttribute("error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");

                return "registration/register";
            }

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            UserResponseDto registeredUser = userIntegrationService.registerUser(registrationDto);

            if (registeredUser != null) {
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID: {}",
                        registeredUser.getEmail(), registeredUser.getId());

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                redirectAttributes.addFlashAttribute("success",
                        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
                redirectAttributes.addFlashAttribute("registeredEmail", registeredUser.getEmail());

                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                return "redirect:/login?registered=true";
            } else {
                log.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
                throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", registrationDto.getEmail(), e.getMessage(), e);

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
            try {
                List<UserRole> availableRoles = userIntegrationService.getAvailableRoles();
                model.addAttribute("availableRoles", availableRoles);
            } catch (Exception roleException) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π: {}", roleException.getMessage());
            }

            model.addAttribute("error", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
            return "registration/register";
        }
    }

    /**
     * ‚úÖ AJAX –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email
     */
    @GetMapping("/check-email")
    @ResponseBody
    public ResponseEntity<Boolean> checkEmailAvailability(@RequestParam String email) {
        log.debug("üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email: {}", email);

        try {
            Boolean isAvailable = userIntegrationService.checkEmailAvailability(email);
            log.debug("‚úÖ Email {} {}", email, Boolean.TRUE.equals(isAvailable) ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "–∑–∞–Ω—è—Ç");

            return ResponseEntity.ok(isAvailable);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email {}: {}", email, e.getMessage());
            return ResponseEntity.ok(false); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }

    /**
     * üìã AJAX –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π
     */
    @GetMapping("/roles")
    @ResponseBody
    public ResponseEntity<List<UserRole>> getAvailableRoles() {
        log.debug("üìã AJAX –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π");

        try {
            List<UserRole> roles = userIntegrationService.getAvailableRoles();
            log.debug("‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {} —Ä–æ–ª–µ–π", roles.size());

            return ResponseEntity.ok(roles);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {}", e.getMessage());
            return ResponseEntity.ok(List.of()); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }

    /**
     * üß™ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    @GetMapping("/success")
    public String registrationSuccess(Model model,
                                      @RequestParam(required = false) String email) {
        log.info("üéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è: {}", email);

        model.addAttribute("email", email);
        return "registration/success";
    }

    /**
     * ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    @ExceptionHandler(Exception.class)
    public String handleRegistrationError(Exception e, Model model, HttpServletRequest request) {
        log.error("üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", e.getMessage(), e);

        model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
        model.addAttribute("details", e.getMessage());
        model.addAttribute("path", request.getRequestURI());

        return "error/registration";
    }
}