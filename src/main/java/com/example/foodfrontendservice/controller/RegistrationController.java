//
//package com.example.foodfrontendservice.controller;
//
//import com.example.foodfrontendservice.dto.UserRegistrationDto;
//import com.example.foodfrontendservice.dto.UserResponseDto;
//import com.example.foodfrontendservice.enums.UserRole;
//import com.example.foodfrontendservice.service.UserIntegrationService;
//import lombok.RequiredArgsConstructor;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.http.ResponseEntity;
//import org.springframework.stereotype.Controller;
//import org.springframework.ui.Model;
//import org.springframework.validation.BindingResult;
//import org.springframework.web.bind.annotation.*;
//import org.springframework.web.servlet.mvc.support.RedirectAttributes;
//
//import jakarta.servlet.http.HttpServletRequest;
//import jakarta.validation.Valid;
//import java.util.List;
//
//@Controller
//@RequestMapping("/register")
//@RequiredArgsConstructor
//@Slf4j
//public class RegistrationController {
//
//    private final UserIntegrationService userIntegrationService;
//
//    /**
//     * üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//     */
//    @GetMapping
//    public String showRegistrationForm(Model model) {
//        log.info("üìã –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
//
//        try {
//            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ñ–æ—Ä–º—ã
//            model.addAttribute("registrationDto", new UserRegistrationDto());
//
//            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ User Service
//            List<UserRole> availableRoles = userIntegrationService.getAvailableRoles();
//            model.addAttribute("availableRoles", availableRoles);
//
//            log.info("‚úÖ –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å {} —Ä–æ–ª—è–º–∏", availableRoles.size());
//            return "registration/register";
//
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", e.getMessage(), e);
//            model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
//            return "error/registration";
//        }
//    }
//
//    /**
//     * üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//     */
//    @PostMapping
//    public String registerUser(@Valid @ModelAttribute UserRegistrationDto registrationDto,
//                               BindingResult bindingResult,
//                               Model model,
//                               RedirectAttributes redirectAttributes) {
//
//        log.info("üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
//
//        try {
//            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
//            if (bindingResult.hasErrors()) {
//                log.warn("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", bindingResult.getAllErrors());
//
//                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
//                List<UserRole> availableRoles = userIntegrationService.getAvailableRoles();
//                model.addAttribute("availableRoles", availableRoles);
//                model.addAttribute("error", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ");
//
//                return "registration/register";
//            }
//
//            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å email
//            Boolean isEmailAvailable = userIntegrationService.checkEmailAvailability(registrationDto.getEmail());
//            if (!Boolean.TRUE.equals(isEmailAvailable)) {
//                log.warn("üìß Email {} —É–∂–µ –∑–∞–Ω—è—Ç", registrationDto.getEmail());
//
//                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
//                List<UserRole> availableRoles = userIntegrationService.getAvailableRoles();
//                model.addAttribute("availableRoles", availableRoles);
//                model.addAttribute("error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
//
//                return "registration/register";
//            }
//
//            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//            UserResponseDto registeredUser = userIntegrationService.registerUser(registrationDto);
//
//            if (registeredUser != null) {
//                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID: {}",
//                        registeredUser.getEmail(), registeredUser.getId());
//
//                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                redirectAttributes.addFlashAttribute("success",
//                        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
//                redirectAttributes.addFlashAttribute("registeredEmail", registeredUser.getEmail());
//
//                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
//                return "redirect:/login?registered=true";
//            } else {
//                log.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
//                throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
//            }
//
//        } catch (Exception e) {
//            log.error("üí• –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", registrationDto.getEmail(), e.getMessage(), e);
//
//            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
//            try {
//                List<UserRole> availableRoles = userIntegrationService.getAvailableRoles();
//                model.addAttribute("availableRoles", availableRoles);
//            } catch (Exception roleException) {
//                log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π: {}", roleException.getMessage());
//            }
//
//            model.addAttribute("error", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
//            return "registration/register";
//        }
//    }
//
//    /**
//     * ‚úÖ AJAX –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email
//     */
//    @GetMapping("/check-email")
//    @ResponseBody
//    public ResponseEntity<Boolean> checkEmailAvailability(@RequestParam String email) {
//        log.debug("üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email: {}", email);
//
//        try {
//            Boolean isAvailable = userIntegrationService.checkEmailAvailability(email);
//            log.debug("‚úÖ Email {} {}", email, Boolean.TRUE.equals(isAvailable) ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "–∑–∞–Ω—è—Ç");
//
//            return ResponseEntity.ok(isAvailable);
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email {}: {}", email, e.getMessage());
//            return ResponseEntity.ok(false); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
//        }
//    }
//
//    /**
//     * üìã AJAX –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π
//     */
//    @GetMapping("/roles")
//    @ResponseBody
//    public ResponseEntity<List<UserRole>> getAvailableRoles() {
//        log.debug("üìã AJAX –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π");
//
//        try {
//            List<UserRole> roles = userIntegrationService.getAvailableRoles();
//            log.debug("‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {} —Ä–æ–ª–µ–π", roles.size());
//
//            return ResponseEntity.ok(roles);
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {}", e.getMessage());
//            return ResponseEntity.ok(List.of()); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
//        }
//    }
//
//    /**
//     * üß™ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//     */
//    @GetMapping("/success")
//    public String registrationSuccess(Model model,
//                                      @RequestParam(required = false) String email) {
//        log.info("üéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è: {}", email);
//
//        model.addAttribute("email", email);
//        return "registration/success";
//    }
//
//    /**
//     * ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//     */
//    @ExceptionHandler(Exception.class)
//    public String handleRegistrationError(Exception e, Model model, HttpServletRequest request) {
//        log.error("üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", e.getMessage(), e);
//
//        model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
//        model.addAttribute("details", e.getMessage());
//        model.addAttribute("path", request.getRequestURI());
//
//        return "error/registration";
//    }
//}

package com.example.foodfrontendservice.controller;

import com.example.foodfrontendservice.dto.UserRegistrationDto;
import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.enums.UserRole;
import com.example.foodfrontendservice.service.UserIntegrationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import java.util.List;

/**
 * üåê RegistrationController - –û–ë–ù–û–í–õ–ï–ù –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Thymeleaf —Ñ–æ—Ä–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
@Controller
@RequestMapping("/register")
@RequiredArgsConstructor
@Slf4j
public class RegistrationController {

    private final UserIntegrationService userIntegrationService;

    /**
     * üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    @GetMapping
    public String showRegistrationForm(Model model) {
        log.info("üìã –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");

        try {
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ñ–æ—Ä–º—ã
            model.addAttribute("registrationDto", new UserRegistrationDto());

            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            ResponseEntity<List<UserRole>> rolesResponse = userIntegrationService.getAvailableRoles();
            List<UserRole> availableRoles = rolesResponse.getBody();

            if (availableRoles != null) {
                model.addAttribute("availableRoles", availableRoles);
                log.info("‚úÖ –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å {} —Ä–æ–ª—è–º–∏", availableRoles.size());
            } else {
                // Fallback —Ä–æ–ª–∏ –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                List<UserRole> fallbackRoles = List.of(UserRole.BASE_USER, UserRole.BUSINESS_USER);
                model.addAttribute("availableRoles", fallbackRoles);
                log.warn("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback —Ä–æ–ª–∏, —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }

            return "registration/register";

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", e.getMessage(), e);

            // –î–æ–±–∞–≤–ª—è–µ–º fallback —Ä–æ–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            model.addAttribute("availableRoles", List.of(UserRole.BASE_USER));
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");

            return "registration/register";
        }
    }

    /**
     * üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping
    public String registerUser(@Valid @ModelAttribute UserRegistrationDto registrationDto,
                               BindingResult bindingResult,
                               Model model,
                               RedirectAttributes redirectAttributes) {

        log.info("üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if (bindingResult.hasErrors()) {
                log.warn("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", bindingResult.getAllErrors());

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
                loadRolesForModel(model);
                model.addAttribute("error", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ");

                return "registration/register";
            }

            // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å email —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            ResponseEntity<Boolean> emailCheckResponse = userIntegrationService.checkEmailAvailability(registrationDto.getEmail());
            Boolean isEmailAvailable = emailCheckResponse.getBody();

            if (!Boolean.TRUE.equals(isEmailAvailable)) {
                log.warn("üìß Email {} —É–∂–µ –∑–∞–Ω—è—Ç", registrationDto.getEmail());

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
                loadRolesForModel(model);
                model.addAttribute("error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");

                return "registration/register";
            }

            // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            ResponseEntity<UserResponseDto> registerResponse = userIntegrationService.registerUser(registrationDto);
            UserResponseDto registeredUser = registerResponse.getBody();

            if (registeredUser != null) {
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID: {}",
                        registeredUser.getEmail(), registeredUser.getId());

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                redirectAttributes.addFlashAttribute("success",
                        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
                redirectAttributes.addFlashAttribute("registeredEmail", registeredUser.getEmail());
                redirectAttributes.addFlashAttribute("userRole", registeredUser.getRoleDisplayName());

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                String redirectUrl = determineRedirectAfterRegistration(registeredUser.getUserRole());

                return "redirect:" + redirectUrl;
            } else {
                log.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", registrationDto.getEmail());
                throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", registrationDto.getEmail(), e.getMessage(), e);

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
            loadRolesForModel(model);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            String errorMessage = determineErrorMessage(e);
            model.addAttribute("error", errorMessage);

            return "registration/register";
        }
    }

    /**
     * ‚úÖ AJAX –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email
     */
    @GetMapping("/check-email")
    @ResponseBody
    public ResponseEntity<Boolean> checkEmailAvailability(@RequestParam String email) {
        log.debug("üìß AJAX: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email: {}", email);

        try {
            // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            ResponseEntity<Boolean> response = userIntegrationService.checkEmailAvailability(email);
            Boolean isAvailable = response.getBody();

            log.debug("‚úÖ AJAX: Email {} {}", email, Boolean.TRUE.equals(isAvailable) ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "–∑–∞–Ω—è—Ç");

            return ResponseEntity.ok(Boolean.TRUE.equals(isAvailable));

        } catch (Exception e) {
            log.error("‚ùå AJAX: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email {}: {}", email, e.getMessage());
            return ResponseEntity.ok(false); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }

    /**
     * üìã AJAX –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π
     */
    @GetMapping("/roles")
    @ResponseBody
    public ResponseEntity<List<UserRole>> getAvailableRoles() {
        log.debug("üìã AJAX: –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π");

        try {
            // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            ResponseEntity<List<UserRole>> response = userIntegrationService.getAvailableRoles();
            List<UserRole> roles = response.getBody();

            if (roles != null) {
                log.debug("‚úÖ AJAX: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {} —Ä–æ–ª–µ–π", roles.size());
                return ResponseEntity.ok(roles);
            } else {
                log.warn("‚ö†Ô∏è AJAX: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback");
                return ResponseEntity.ok(List.of(UserRole.BASE_USER));
            }

        } catch (Exception e) {
            log.error("‚ùå AJAX: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {}", e.getMessage());
            return ResponseEntity.ok(List.of(UserRole.BASE_USER)); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }

    /**
     * üéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    @GetMapping("/success")
    public String registrationSuccess(Model model,
                                      @RequestParam(required = false) String email,
                                      @RequestParam(required = false) String role) {
        log.info("üéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è: {} ({})", email, role);

        model.addAttribute("email", email);
        model.addAttribute("role", role);
        model.addAttribute("loginUrl", "/login");

        return "registration/success";
    }

    /**
     * üß™ –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    @GetMapping("/test")
    @ResponseBody
    public ResponseEntity<String> testRegistrationService() {
        log.info("üß™ –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞");

        try {
            // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            ResponseEntity<String> testResponse = userIntegrationService.testRegistrationService();
            String result = testResponse.getBody();

            // –¢–∞–∫–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π
            ResponseEntity<List<UserRole>> rolesResponse = userIntegrationService.getAvailableRoles();
            List<UserRole> roles = rolesResponse.getBody();

            String message = String.format("Registration Service OK. Test: %s, Roles: %d",
                    result != null ? result : "OK",
                    roles != null ? roles.size() : 0);

            return ResponseEntity.ok(message);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e.getMessage());
            return ResponseEntity.status(500).body("Registration Service ERROR: " + e.getMessage());
        }
    }

    // ========== UTILITY –ú–ï–¢–û–î–´ ==========

    /**
     * üîß –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏ —Å fallback
     */
    private void loadRolesForModel(Model model) {
        try {
            ResponseEntity<List<UserRole>> response = userIntegrationService.getAvailableRoles();
            List<UserRole> roles = response.getBody();

            if (roles != null) {
                model.addAttribute("availableRoles", roles);
            } else {
                model.addAttribute("availableRoles", List.of(UserRole.BASE_USER));
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏: {}", e.getMessage());
            model.addAttribute("availableRoles", List.of(UserRole.BASE_USER));
        }
    }

    /**
     * üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    private String determineRedirectAfterRegistration(UserRole userRole) {
        // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        return "/login?registered=true";

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –≤ dashboard:
        /*
        return switch (userRole) {
            case ADMIN -> "/admin/dashboard?newUser=true";
            case BUSINESS_USER -> "/business/dashboard?newUser=true";
            case COURIER -> "/courier/dashboard?newUser=true";
            case BASE_USER -> "/user/dashboard?newUser=true";
            default -> "/login?registered=true";
        };
        */
    }

    /**
     * üí¨ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    private String determineErrorMessage(Exception e) {
        String message = e.getMessage().toLowerCase();

        if (message.contains("email") && message.contains("exists")) {
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
        } else if (message.contains("password")) {
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤";
        } else if (message.contains("validation")) {
            return "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π";
        } else if (message.contains("service") && message.contains("unavailable")) {
            return "–°–µ—Ä–≤–∏—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
        } else {
            return "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage();
        }
    }

    // ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ==========

    /**
     * ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    @ExceptionHandler(Exception.class)
    public String handleRegistrationError(Exception e, Model model, HttpServletRequest request) {
        log.error("üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}", e.getMessage(), e);

        model.addAttribute("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
        model.addAttribute("details", e.getMessage());
        model.addAttribute("path", request.getRequestURI());
        model.addAttribute("timestamp", java.time.LocalDateTime.now());

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
        loadRolesForModel(model);

        return "error/registration";
    }
}