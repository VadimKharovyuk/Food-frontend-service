package com.example.foodfrontendservice.controller;
import com.example.foodfrontendservice.config.CurrentUser;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.category.*;
import com.example.foodfrontendservice.service.CategoryService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/frontend/categories")
@RequiredArgsConstructor
@Slf4j
public class CategoryController {

    private final CategoryService categoryService;

    /**
     * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     */
    @GetMapping
    public ResponseEntity<ListApiResponse<CategoryResponseDto>> getAllActiveCategories() {
        log.info("üìã GET /api/frontend/categories - Getting all active categories");

        ListApiResponse<CategoryResponseDto> response = categoryService.getAllActiveCategories();

        if (response.isSuccess()) {
            log.info("‚úÖ Retrieved {} active categories", response.getTotalCount());
            return ResponseEntity.ok(response);
        } else {
            log.warn("‚ùå Failed to get active categories: {}", response.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
     */
    @GetMapping("/all")
    public ResponseEntity<ListApiResponse<CategoryResponseDto>> getAllCategories(
            HttpServletRequest request) {

        log.info("üìã GET /api/frontend/categories/all - Getting all categories");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
        String userRole = request.getHeader("X-User-Role");
        if (!"ROLE_ADMIN".equals(userRole)) {
            log.warn("‚ùå Access denied for role: {}", userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ListApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"));
        }

        ListApiResponse<CategoryResponseDto> response = categoryService.getAllCategories();

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    @GetMapping("/search")
    public ResponseEntity<ListApiResponse<CategoryResponseDto>> searchCategories(
            @RequestParam String name) {

        log.info("üîç GET /api/frontend/categories/search - Searching categories: {}", name);

        if (name == null || name.trim().isEmpty()) {
            return ResponseEntity.badRequest()
                    .body(ListApiResponse.error("–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
        }

        ListApiResponse<CategoryResponseDto> response = categoryService.searchCategories(name.trim());

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }


    // ================================
    // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–û–í - –ö–†–ê–¢–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    // ================================

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–ª—è dropdown/—Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤)
     */
    @GetMapping("/brief")
    public ResponseEntity<ListApiResponse<CategoryDto>> getActiveCategoriesBrief() {
        log.info("üìä GET /api/frontend/categories/brief - Getting brief categories");

        ListApiResponse<CategoryDto> response = categoryService.getActiveCategoriesBrief();

        if (response.isSuccess()) {
            log.info("‚úÖ Retrieved {} brief categories", response.getTotalCount());
            return ResponseEntity.ok(response);
        } else {
            log.warn("‚ùå Failed to get brief categories: {}", response.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
     */
    @GetMapping("/brief/all")
    public ResponseEntity<ListApiResponse<CategoryDto>> getAllCategoriesBrief(
            HttpServletRequest request) {

        log.info("üìä GET /api/frontend/categories/brief/all - Getting all brief categories");

        String userRole = request.getHeader("X-User-Role");
        if (!"ROLE_ADMIN".equals(userRole)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ListApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"));
        }

        ListApiResponse<CategoryDto> response = categoryService.getAllCategoriesBrief();

        return response.isSuccess() ?
                ResponseEntity.ok(response) :
                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }

    /**
     * üîç –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    @GetMapping("/brief/search")
    public ResponseEntity<ListApiResponse<CategoryDto>> searchCategoriesBrief(
            @RequestParam String name) {

        log.info("üîç GET /api/frontend/categories/brief/search - Searching brief categories: {}", name);

        if (name == null || name.trim().isEmpty()) {
            return ResponseEntity.badRequest()
                    .body(ListApiResponse.error("–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
        }

        ListApiResponse<CategoryDto> response = categoryService.searchCategoriesBrief(name.trim());

        return response.isSuccess() ?
                ResponseEntity.ok(response) :
                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Å–ø–∏—Å–∫—É ID
     */
    @PostMapping("/brief/by-ids")
    public ResponseEntity<ListApiResponse<CategoryDto>> getCategoriesBriefByIds(
            @RequestBody List<Long> ids) {

        log.info("üìä POST /api/frontend/categories/brief/by-ids - Getting categories by IDs: {}", ids);

        if (ids == null || ids.isEmpty()) {
            return ResponseEntity.badRequest()
                    .body(ListApiResponse.error("–°–ø–∏—Å–æ–∫ ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
        }

        ListApiResponse<CategoryDto> response = categoryService.getCategoriesBriefByIds(ids);

        return response.isSuccess() ?
                ResponseEntity.ok(response) :
                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }

    // ================================
    // üîç –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô
    // ================================

    /**
     * üîç –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     */
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<CategoryResponseDto>> getCategoryById(@PathVariable Long id) {
        log.info("üîç GET /api/frontend/categories/{} - Getting category by ID", id);

        ApiResponse<CategoryResponseDto> response = categoryService.getCategoryById(id);

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else if (!response.isSuccess() && response.getMessage().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
     */
    @GetMapping("/{id}/brief")
    public ResponseEntity<ApiResponse<CategoryDto>> getCategoryBrief(@PathVariable Long id) {
        log.info("üìä GET /api/frontend/categories/{}/brief - Getting brief category", id);

        ApiResponse<CategoryDto> response = categoryService.getCategoryBrief(id);

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else if (!response.isSuccess() && response.getMessage().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    // ================================
    // ‚úèÔ∏è –°–û–ó–î–ê–ù–ò–ï –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô (ADMIN ONLY)
    // ================================

    /**
     * ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
     */
    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<ApiResponse<CategoryResponseDto>> createCategory(
            @ModelAttribute CreateCategoryDto createCategoryDto,
            HttpServletRequest request) {

        log.info("‚ûï POST /api/frontend/categories - Creating category: {}", createCategoryDto.getName());

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        String userRole = request.getHeader("X-User-Role");
        if (!"ROLE_ADMIN".equals(userRole)) {
            log.warn("üö´ Access denied: user role {} is not ADMIN", userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ApiResponse.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"));
        }

        try {
            ApiResponse<CategoryResponseDto> response = categoryService.createCategory(createCategoryDto);

            if (response.isSuccess()) {
                log.info("‚úÖ Successfully created category: {}", createCategoryDto.getName());
                return ResponseEntity.status(HttpStatus.CREATED).body(response);
            } else {
                log.warn("‚ùå Failed to create category: {} - {}", createCategoryDto.getName(), response.getMessage());
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
            }

        } catch (Exception e) {
            log.error("üí• Error creating category: {}", createCategoryDto.getName(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"));
        }
    }



    /**
     * ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
     */
    @PostMapping(value = "/{id}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<ApiResponse<CategoryResponseDto>> updateCategory(
            @PathVariable Long id,
            @ModelAttribute CreateCategoryDto updateCategoryDto,
            HttpServletRequest request) {

        log.info("‚úèÔ∏è PUT /api/frontend/categories/{} - Updating category: {}", id, updateCategoryDto.getName());

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        String userRole = request.getHeader("X-User-Role");
        if (!"ROLE_ADMIN".equals(userRole)) {
            log.warn("üö´ Access denied: user role {} is not ADMIN", userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ApiResponse.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"));
        }

        try {
            ApiResponse<CategoryResponseDto> response = categoryService.updateCategory(id, updateCategoryDto);

            if (response.isSuccess()) {
                log.info("‚úÖ Successfully updated category ID: {}", id);
                return ResponseEntity.ok(response);
            } else if (response.getMessage() != null && response.getMessage().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω")) {
                log.warn("‚ùå Category ID: {} not found for update", id);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            } else {
                log.warn("‚ùå Failed to update category ID: {} - {}", id, response.getMessage());
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
            }

        } catch (Exception e) {
            log.error("üí• Error updating category ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"));
        }
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—É–±–∏—Ä–∞–µ–º @CurrentUser –∏ userId –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteCategory(
            @PathVariable Long id,
            HttpServletRequest request) {

        log.info("üóëÔ∏è DELETE /api/frontend/categories/{} - Deleting category", id);

        String userRole = request.getHeader("X-User-Role");
        if (!"ROLE_ADMIN".equals(userRole)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"));
        }

        // userId –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ FeignAuthInterceptor
        ApiResponse<Void> response = categoryService.deleteCategory(id);

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else if (!response.isSuccess() && response.getMessage().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }


    @PostMapping("/{id}/toggle")
    public ResponseEntity<ApiResponse<CategoryResponseDto>> toggleCategoryStatus(
            @PathVariable Long id,
            HttpServletRequest request) {

        log.info("üîÑ PATCH /api/frontend/categories/{}/toggle - Toggling category status", id);

        String userRole = request.getHeader("X-User-Role");
        if (!"ROLE_ADMIN".equals(userRole)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"));
        }

        // userId –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ FeignAuthInterceptor
        ApiResponse<CategoryResponseDto> response = categoryService.toggleCategoryStatus(id);

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else if (!response.isSuccess() && response.getMessage().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    // ================================
    // üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ENDPOINT'–´
    // ================================

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    @GetMapping("/count")
    public ResponseEntity<ApiResponse<Long>> getActiveCategoriesCount() {
        log.info("üìä GET /api/frontend/categories/count - Getting categories count");

        ApiResponse<Long> response = categoryService.getActiveCategoriesCount();

        return response.isSuccess() ?
                ResponseEntity.ok(response) :
                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }

    /**
     * üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏
     */
    @GetMapping("/exists")
    public ResponseEntity<ApiResponse<Boolean>> checkCategoryExists(@RequestParam String name) {
        log.info("üîç GET /api/frontend/categories/exists - Checking category: {}", name);

        ApiResponse<Boolean> response = categoryService.checkCategoryExists(name);

        return response.isSuccess() ?
                ResponseEntity.ok(response) :
                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }


    /**
     * üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
     */
    @GetMapping("/health")
    public ResponseEntity<ApiResponse<String>> healthCheck() {
        log.debug("üîß GET /api/frontend/categories/health - Health check");

        ApiResponse<String> response = categoryService.healthCheck();

        return ResponseEntity.ok(response);
    }
}