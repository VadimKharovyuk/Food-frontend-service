package com.example.foodfrontendservice.config;

import com.example.foodfrontendservice.dto.AUTSERVICE.UserTokenInfo;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@RequiredArgsConstructor
@Component
@Slf4j
public class TokenExtractor {

    private final JwtUtil jwtUtil;

    // ‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–º–µ–Ω cookies –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    private static final String[] COOKIE_NAMES = {"authToken", "jwt", "accessToken"};
    private static final String CACHED_USER_INFO_ATTR = "cached_user_info";
    private static final String CACHED_TOKEN_ATTR = "cached_token";

    /**
     * ‚úÖ –û–°–ù–û–í–ù–û–ô –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
     */
    public String extractToken(HttpServletRequest request) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        String cachedToken = (String) request.getAttribute(CACHED_TOKEN_ATTR);
        if (cachedToken != null) {
            return cachedToken;
        }

        String token = null;

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Authorization header
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            token = authHeader.substring(7);
            log.debug("üîê –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ Authorization header");
        }

        // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ header, –ø—Ä–æ–≤–µ—Ä—è–µ–º cookies
        if (token == null) {
            token = extractTokenFromCookie(request);
        }

        // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω)
        if (token != null && !token.trim().isEmpty()) {
            request.setAttribute(CACHED_TOKEN_ATTR, token);
        }

        return token;
    }

    /**
     * ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ cookie —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–º–µ–Ω
     */
    private String extractTokenFromCookie(HttpServletRequest request) {
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            // –ò—â–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: authToken -> jwt -> accessToken
            for (String cookieName : COOKIE_NAMES) {
                for (Cookie cookie : cookies) {
                    if (cookieName.equals(cookie.getName())) {
                        String token = cookie.getValue();
                        if (token != null && !token.trim().isEmpty()) {
                            log.debug("üç™ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ cookie: {}", cookieName);
                            return token;
                        }
                    }
                }
            }
        }
        log.debug("üç™ –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookies");
        return null;
    }

    /**
     * ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –º–µ—Ç–æ–¥ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    public UserTokenInfo getCurrentUserInfo(HttpServletRequest request) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        UserTokenInfo cachedInfo = (UserTokenInfo) request.getAttribute(CACHED_USER_INFO_ATTR);
        if (cachedInfo != null) {
            log.debug("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return cachedInfo;
        }

        String token = extractToken(request);
        if (token == null) {
            log.debug("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return null;
        }

        if (!jwtUtil.isTokenValid(token)) {
            log.debug("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
            return null;
        }

        try {
            UserTokenInfo userInfo = UserTokenInfo.builder()
                    .userId(jwtUtil.getUserIdFromToken(token))
                    .email(jwtUtil.getEmailFromToken(token))
                    .role(jwtUtil.getRoleFromToken(token))
                    .token(token)
                    .build();

            // –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            request.setAttribute(CACHED_USER_INFO_ATTR, userInfo);

            log.debug("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞: {} (ID: {})",
                    userInfo.getEmail(), userInfo.getUserId());

            return userInfo;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
            return null;
        }
    }

    /**
     * ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    public boolean isAuthenticated(HttpServletRequest request) {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        UserTokenInfo cachedInfo = (UserTokenInfo) request.getAttribute(CACHED_USER_INFO_ATTR);
        if (cachedInfo != null) {
            return true;
        }

        String token = extractToken(request);
        return token != null && jwtUtil.isTokenValid(token);
    }

    /**
     * ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    public Long getCurrentUserId(HttpServletRequest request) {
        UserTokenInfo userInfo = getCurrentUserInfo(request);
        return userInfo != null ? userInfo.getUserId() : null;
    }

    public String getCurrentUserEmail(HttpServletRequest request) {
        UserTokenInfo userInfo = getCurrentUserInfo(request);
        return userInfo != null ? userInfo.getEmail() : null;
    }

    public String getCurrentUserRole(HttpServletRequest request) {
        UserTokenInfo userInfo = getCurrentUserInfo(request);
        return userInfo != null ? userInfo.getRole() : null;
    }

    /**
     * ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
     */
    public UserTokenInfo refreshUserInfo(HttpServletRequest request) {
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        request.removeAttribute(CACHED_USER_INFO_ATTR);
        request.removeAttribute(CACHED_TOKEN_ATTR);

        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return getCurrentUserInfo(request);
    }

    /**
     * ‚úÖ –£–¢–ò–õ–ò–¢–ê–†–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    public boolean isTokenValid(HttpServletRequest request) {
        String token = extractToken(request);
        return token != null && jwtUtil.isTokenValid(token);
    }

    /**
     * ‚úÖ –£–¢–ò–õ–ò–¢–ê–†–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    public void logTokenInfo(HttpServletRequest request) {
        if (log.isDebugEnabled()) {
            String token = extractToken(request);
            if (token != null) {
                boolean isValid = jwtUtil.isTokenValid(token);
                log.debug("üîç Token Info: length={}, valid={}", token.length(), isValid);

                if (isValid) {
                    try {
                        String email = jwtUtil.getEmailFromToken(token);
                        Long userId = jwtUtil.getUserIdFromToken(token);
                        String role = jwtUtil.getRoleFromToken(token);
                        log.debug("üë§ User Info: email={}, id={}, role={}", email, userId, role);
                    } catch (Exception e) {
                        log.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
                    }
                }
            } else {
                log.debug("‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
            }
        }
    }
}