package com.example.foodfrontendservice.config;

import feign.RequestInterceptor;
import feign.RequestTemplate;
import feign.codec.Encoder;
import feign.form.spring.SpringFormEncoder;
import org.springframework.beans.factory.ObjectFactory;
import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
import org.springframework.cloud.openfeign.support.SpringEncoder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import lombok.extern.slf4j.Slf4j;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

@Configuration
@Slf4j
public class FeignConfig {

    /**
     * ‚úÖ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô Encoder –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ multipart/form-data
     */
    @Bean
    public Encoder feignFormEncoder(ObjectFactory<HttpMessageConverters> messageConverters) {
        log.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SpringFormEncoder –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ multipart –≤ Feign");
        return new SpringFormEncoder(new SpringEncoder(messageConverters));
    }

    /**
     * ‚úÖ Interceptor –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    @Bean
    public RequestInterceptor authInterceptor() {
        return new FeignAuthInterceptor();
    }

    /**
     * ‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    @Slf4j
    public static class FeignAuthInterceptor implements RequestInterceptor {

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        private static final String AUTHORIZATION_HEADER = "Authorization";
        private static final String USER_ROLE_HEADER = "X-User-Role";
        private static final String USER_EMAIL_HEADER = "X-User-Email";
        private static final String USER_ID_HEADER = "X-User-Id";
        private static final String CONTENT_TYPE_HEADER = "Content-Type";

        @Override
        public void apply(RequestTemplate template) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π HTTP –∑–∞–ø—Ä–æ—Å
                ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();

                if (attributes != null) {
                    HttpServletRequest request = attributes.getRequest();

                    // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    transferHeader(request, template, AUTHORIZATION_HEADER, "üîê");
                    transferHeader(request, template, USER_ROLE_HEADER, "üë§");
                    transferHeader(request, template, USER_EMAIL_HEADER, "üìß");
                    transferHeader(request, template, USER_ID_HEADER, "üÜî");

                    // ‚úÖ –ù–ï –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type –¥–ª—è multipart –∑–∞–ø—Ä–æ—Å–æ–≤
                    if (!isMultipartRequest(template)) {
                        template.header("Accept", "application/json");
                    }

                    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
                    logFeignRequest(template, request);
                } else {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ RequestContext –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Feign Client");
                }
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Feign Client", e);
            }
        }

        /**
         * –ü–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ Feign –∑–∞–ø—Ä–æ—Å
         */
        private void transferHeader(HttpServletRequest request, RequestTemplate template,
                                    String headerName, String emoji) {
            String headerValue = request.getHeader(headerName);
            if (headerValue != null && !headerValue.trim().isEmpty()) {
                template.header(headerName, headerValue);
                log.debug("{} –ü–µ—Ä–µ–¥–∞–Ω {}: {}", emoji, headerName,
                        AUTHORIZATION_HEADER.equals(headerName) ? "Present" : headerValue);
            }
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å multipart
         */
        private boolean isMultipartRequest(RequestTemplate template) {
            return template.headers().containsKey(CONTENT_TYPE_HEADER) &&
                    template.headers().get(CONTENT_TYPE_HEADER).stream()
                            .anyMatch(value -> value.contains("multipart/form-data"));
        }

        /**
         * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Feign –∑–∞–ø—Ä–æ—Å–µ
         */
        private void logFeignRequest(RequestTemplate template, HttpServletRequest request) {
            log.info("üì§ Feign request to: {} with headers: Authorization={}, X-User-Role={}, X-User-Email={}, X-User-Id={}",
                    template.url(),
                    hasHeader(request, AUTHORIZATION_HEADER) ? "Present" : "Missing",
                    getHeaderOrDefault(request, USER_ROLE_HEADER, "Missing"),
                    getHeaderOrDefault(request, USER_EMAIL_HEADER, "Missing"),
                    getHeaderOrDefault(request, USER_ID_HEADER, "Missing"));
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
         */
        private boolean hasHeader(HttpServletRequest request, String headerName) {
            String value = request.getHeader(headerName);
            return value != null && !value.trim().isEmpty();
        }

        /**
         * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
         */
        private String getHeaderOrDefault(HttpServletRequest request, String headerName, String defaultValue) {
            String value = request.getHeader(headerName);
            return (value != null && !value.trim().isEmpty()) ? value : defaultValue;
        }
    }
}