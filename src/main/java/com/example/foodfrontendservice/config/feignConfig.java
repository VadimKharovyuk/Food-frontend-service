package com.example.foodfrontendservice.config;
import feign.RequestInterceptor;
import feign.RequestTemplate;
import feign.codec.Encoder;
import feign.form.spring.SpringFormEncoder;
import org.springframework.beans.factory.ObjectFactory;
import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
import org.springframework.cloud.openfeign.support.SpringEncoder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import lombok.extern.slf4j.Slf4j;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import com.example.foodfrontendservice.dto.UserResponseDto;

import static org.springframework.boot.actuate.web.exchanges.Include.AUTHORIZATION_HEADER;

@Configuration
@Slf4j
public class feignConfig {

    /**
     * ‚úÖ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô Encoder –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ multipart/form-data
     */
    @Bean
    public Encoder feignFormEncoder(ObjectFactory<HttpMessageConverters> messageConverters) {
        log.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SpringFormEncoder –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ multipart –≤ Feign");
        return new SpringFormEncoder(new SpringEncoder(messageConverters));
    }

    /**
     * ‚úÖ Interceptor –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    @Bean("feignRequestInterceptor")  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥—Ä—É–≥–æ–µ –∏–º—è bean
    public RequestInterceptor authInterceptor() {
        return new FeignAuthInterceptor();
    }

    /**
     * üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    @Bean
    public feign.Logger.Level feignLoggerLevel() {
        return feign.Logger.Level.HEADERS; // –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }

    /**
     * ‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –∏ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô FeignAuthInterceptor
     */
    @Slf4j
    public static class FeignAuthInterceptor implements RequestInterceptor {

        private static final String AUTHORIZATION_HEADER = "Authorization";
        private static final String USER_ROLE_HEADER = "X-User-Role";
        private static final String USER_EMAIL_HEADER = "X-User-Email";
        private static final String USER_ID_HEADER = "X-User-Id";
        private static final String CONTENT_TYPE_HEADER = "Content-Type";

        @Override
        public void apply(RequestTemplate template) {
            try {
                ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();

                if (attributes != null) {
                    HttpServletRequest request = attributes.getRequest();

                    // üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                    String token = extractTokenFromRequest(request);

                    if (token != null) {
                        // –î–æ–±–∞–≤–ª—è–µ–º Authorization header
                        template.header(AUTHORIZATION_HEADER, "Bearer " + token);
                        log.debug("üîê –î–æ–±–∞–≤–ª–µ–Ω Authorization header –≤ Feign –∑–∞–ø—Ä–æ—Å (–¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {})", token.length());
                    } else {
                        log.debug("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Feign –∑–∞–ø—Ä–æ—Å–∞");
                    }

                    // üë§ –ü–æ–ª—É—á–∞–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
                    addUserHeadersFromSession(request, template);

                    // –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ (fallback)
                    transferHeaderIfExists(request, template, USER_ROLE_HEADER);
                    transferHeaderIfExists(request, template, USER_EMAIL_HEADER);
                    transferHeaderIfExists(request, template, USER_ID_HEADER);

                    // ‚úÖ –ù–ï –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type –¥–ª—è multipart –∑–∞–ø—Ä–æ—Å–æ–≤
                    if (!isMultipartRequest(template)) {
                        template.header("Accept", "application/json");
                    }

                    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    logFeignRequest(template, token, request);
                } else {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ RequestContext –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Feign Client");
                }
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≤ FeignAuthInterceptor", e);
            }
        }

        /**
         * üîç –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
         */
        private String extractTokenFromRequest(HttpServletRequest request) {
            // 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫
            String authHeader = request.getHeader(AUTHORIZATION_HEADER);
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ Authorization –∑–∞–≥–æ–ª–æ–≤–∫–µ");
                return authHeader.substring(7);
            }

            // 2. –ê—Ç—Ä–∏–±—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º)
            Object attrToken = request.getAttribute(AUTHORIZATION_HEADER);
            if (attrToken != null) {
                String tokenStr = attrToken.toString();
                if (tokenStr.startsWith("Bearer ")) {
                    log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∑–∞–ø—Ä–æ—Å–∞");
                    return tokenStr.substring(7);
                }
                log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ Bearer)");
                return tokenStr;
            }

            // 3. –°–µ—Å—Å–∏—è (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
            try {
                String sessionToken = (String) request.getSession().getAttribute("authToken");
                if (sessionToken != null && !sessionToken.trim().isEmpty()) {
                    log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏");
                    return sessionToken;
                }
            } catch (Exception e) {
                log.debug("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–µ—Å—Å–∏–∏: {}", e.getMessage());
            }

            // 4. –ö–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            String customHeader = request.getHeader("X-Auth-Token");
            if (customHeader != null && !customHeader.trim().isEmpty()) {
                log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ X-Auth-Token –∑–∞–≥–æ–ª–æ–≤–∫–µ");
                return customHeader;
            }

            // 5. –ü–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            String tokenParam = request.getParameter("token");
            if (tokenParam != null && !tokenParam.trim().isEmpty()) {
                log.debug("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞");
                return tokenParam;
            }

            return null;
        }

        /**
         * üë§ –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
         */
        private void addUserHeadersFromSession(HttpServletRequest request, RequestTemplate template) {
            try {
                UserResponseDto user = (UserResponseDto) request.getSession().getAttribute("currentUser");

                if (user != null) {
                    template.header(USER_ROLE_HEADER, user.getUserRole().name());
                    template.header(USER_EMAIL_HEADER, user.getEmail());
                    template.header(USER_ID_HEADER, user.getId().toString());

                    log.debug("üë§ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: —Ä–æ–ª—å={}, email={}, id={}",
                            user.getUserRole(), user.getEmail(), user.getId());
                }
            } catch (Exception e) {
                log.debug("üö´ –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {}", e.getMessage());
            }
        }

        /**
         * –ü–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ Feign –∑–∞–ø—Ä–æ—Å (fallback)
         */
        private void transferHeaderIfExists(HttpServletRequest request, RequestTemplate template, String headerName) {
            String headerValue = request.getHeader(headerName);
            if (headerValue != null && !headerValue.trim().isEmpty()) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if (!template.headers().containsKey(headerName)) {
                    template.header(headerName, headerValue);
                    log.debug("üîÑ –ü–µ—Ä–µ–¥–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ {}: {}", headerName, headerValue);
                }
            }
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å multipart
         */
        private boolean isMultipartRequest(RequestTemplate template) {
            return template.headers().containsKey(CONTENT_TYPE_HEADER) &&
                    template.headers().get(CONTENT_TYPE_HEADER).stream()
                            .anyMatch(value -> value.contains("multipart/form-data"));
        }

        /**
         * üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Feign –∑–∞–ø—Ä–æ—Å–∞
         */
        private void logFeignRequest(RequestTemplate template, String token, HttpServletRequest request) {
            try {
                UserResponseDto user = (UserResponseDto) request.getSession().getAttribute("currentUser");

                log.info("üì§ Feign ‚Üí {} {} | Token={} | User={} | Headers: Auth={}, Role={}, Email={}, ID={}",
                        template.method(),
                        template.url(),
                        token != null ? "Present(" + token.substring(0, Math.min(10, token.length())) + "...)" : "Missing",
                        user != null ? user.getEmail() : "Unknown",
                        hasAuthorizationHeader(template) ? "‚úÖ" : "‚ùå",
                        getTemplateHeader(template, USER_ROLE_HEADER, "‚ùå"),
                        getTemplateHeader(template, USER_EMAIL_HEADER, "‚ùå"),
                        getTemplateHeader(template, USER_ID_HEADER, "‚ùå"));

            } catch (Exception e) {
                log.info("üì§ Feign ‚Üí {} {} (logging error: {})",
                        template.method(), template.url(), e.getMessage());
            }
        }

        private boolean hasAuthorizationHeader(RequestTemplate template) {
            return template.headers().containsKey(AUTHORIZATION_HEADER) &&
                    !template.headers().get(AUTHORIZATION_HEADER).isEmpty();
        }

        private String getTemplateHeader(RequestTemplate template, String headerName, String defaultValue) {
            if (template.headers().containsKey(headerName) &&
                    !template.headers().get(headerName).isEmpty()) {
                return template.headers().get(headerName).iterator().next();
            }
            return defaultValue;
        }
    }


/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Authorization –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ —à–∞–±–ª–æ–Ω–µ
 */
private boolean hasAuthorizationHeader(RequestTemplate template) {
    return template.headers().containsKey(AUTHORIZATION_HEADER) &&
            !template.headers().get(AUTHORIZATION_HEADER).isEmpty();
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
private String getTemplateHeader(RequestTemplate template, String headerName, String defaultValue) {
    if (template.headers().containsKey(headerName) &&
            !template.headers().get(headerName).isEmpty()) {
        return template.headers().get(headerName).iterator().next();
    }
    return defaultValue;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
 */
private boolean hasHeader(HttpServletRequest request, String headerName) {
    String value = request.getHeader(headerName);
    return value != null && !value.trim().isEmpty();
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
private String getHeaderOrDefault(HttpServletRequest request, String headerName, String defaultValue) {
    String value = request.getHeader(headerName);
    return (value != null && !value.trim().isEmpty()) ? value : defaultValue;
}
    }


