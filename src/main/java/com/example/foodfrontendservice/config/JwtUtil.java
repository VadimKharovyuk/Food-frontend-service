package com.example.foodfrontendservice.config;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;

@Component
@Slf4j
public class JwtUtil {

    @Value("${jwt.secret}")
    private String jwtSecret;

    private SecretKey getSigningKey() {
        return Keys.hmacShaKeyFor(jwtSecret.getBytes());
    }

    public String getEmailFromToken(String token) {
        try {
            Claims claims = getClaimsFromToken(token);
            return claims.getSubject();
        } catch (Exception e) {
            log.error("Error extracting email from token: {}", e.getMessage());
            return null;
        }
    }

    public Long getUserIdFromToken(String token) {
        try {
            Claims claims = getClaimsFromToken(token);
            Object userIdObj = claims.get("userId");

            if (userIdObj instanceof Number) {
                return ((Number) userIdObj).longValue();
            } else if (userIdObj instanceof String) {
                return Long.parseLong((String) userIdObj);
            }

            log.warn("UserId in token has unexpected type: {}", userIdObj.getClass());
            return null;
        } catch (Exception e) {
            log.error("Error extracting userId from token: {}", e.getMessage());
            return null;
        }
    }

    public String getRoleFromToken(String token) {
        try {
            Claims claims = getClaimsFromToken(token);
            return claims.get("role", String.class);
        } catch (Exception e) {
            log.error("Error extracting role from token: {}", e.getMessage());
            return null;
        }
    }

    public boolean validateToken(String token) {
        try {
            Claims claims = getClaimsFromToken(token);
            log.debug("Token validated successfully for user: {}", claims.getSubject());
            return true;
        } catch (Exception e) {
            log.error("JWT token validation error: {}", e.getMessage());
            return false;
        }
    }

    // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –º–µ—Ç–æ–¥ isTokenValid –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    public boolean isTokenValid(String token) {
        if (token == null || token.trim().isEmpty()) {
            log.debug("‚ùå –¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ null");
            return false;
        }

        try {
            Claims claims = getClaimsFromToken(token);
            Date expiration = claims.getExpiration();
            Date now = new Date();

            if (expiration.before(now)) {
                log.warn("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫. Expiration: {}, Current: {}", expiration, now);
                return false;
            }

            log.debug("‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} –¥–æ {}",
                    claims.getSubject(), expiration);
            return true;

        } catch (ExpiredJwtException e) {
            log.warn("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {}", e.getMessage());
            return false;
        } catch (MalformedJwtException e) {
            log.warn("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
            return false;
        } catch (SignatureException e) {
            log.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage());
            return false;
        } catch (IllegalArgumentException e) {
            log.warn("‚ùå –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω: {}", e.getMessage());
            return false;
        } catch (Exception e) {
            log.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage(), e);
            return false;
        }
    }



    private Claims getClaimsFromToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    public Date getExpirationDateFromToken(String token) {
        try {
            Claims claims = getClaimsFromToken(token);
            return claims.getExpiration();
        } catch (Exception e) {
            log.error("Error extracting expiration from token: {}", e.getMessage());
            return null;
        }
    }

    // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    public boolean isTokenExpiringSoon(String token, long minutesThreshold) {
        try {
            Date expiration = getExpirationDateFromToken(token);
            if (expiration == null) {
                return true; // –°—á–∏—Ç–∞–µ–º —á—Ç–æ –∏—Å—Ç–µ–∫–∞–µ—Ç, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É
            }

            Date now = new Date();
            long diffInMillis = expiration.getTime() - now.getTime();
            long diffInMinutes = diffInMillis / (60 * 1000);

            boolean expiringSoon = diffInMinutes <= minutesThreshold;

            if (expiringSoon) {
                log.info("‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {} –º–∏–Ω—É—Ç (–ø–æ—Ä–æ–≥: {})", diffInMinutes, minutesThreshold);
            }

            return expiringSoon;
        } catch (Exception e) {
            log.error("Error checking token expiration: {}", e.getMessage());
            return true;
        }
    }

    // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞ (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ Remember Me)
    public boolean isRememberMeToken(String token) {
        try {
            Date expiration = getExpirationDateFromToken(token);
            if (expiration == null) {
                return false;
            }

            Date now = new Date();
            long diffInMillis = expiration.getTime() - now.getTime();
            long diffInDays = diffInMillis / (24 * 60 * 60 * 1000);

            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–æ–ª—å—à–µ 2 –¥–Ω–µ–π, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ Remember Me —Ç–æ–∫–µ–Ω
            boolean isRememberMe = diffInDays > 2;

            log.debug("üç™ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç {} –¥–Ω–µ–π, Remember Me: {}", diffInDays, isRememberMe);
            return isRememberMe;

        } catch (Exception e) {
            log.error("Error checking if token is Remember Me: {}", e.getMessage());
            return false;
        }
    }
}