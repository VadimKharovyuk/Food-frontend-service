// üî• –°–û–ó–î–ê–ô–¢–ï –≠–¢–û–¢ –ö–õ–ê–°–° - –û–ù –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ù–ê–°–¢–†–û–ò–¢ TOMCAT

package com.example.foodfrontendservice.config;

import jakarta.servlet.MultipartConfigElement;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.boot.web.servlet.MultipartConfigFactory;
import org.springframework.boot.web.server.WebServerFactoryCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.util.unit.DataSize;
import lombok.extern.slf4j.Slf4j;

@Configuration
@Slf4j
public class ForceMultipartConfig {

    /**
     * üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Tomcat –¥–ª—è multipart
     */
    @Bean
    @Primary
    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> forceMultipartTomcatCustomizer() {
        return factory -> {
            factory.addConnectorCustomizers(connector -> {
                log.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Tomcat –¥–ª—è multipart...");

                // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è FileCountLimitExceededException
                connector.setProperty("maxParameterCount", "10000");
                connector.setProperty("maxPostSize", String.valueOf(50 * 1024 * 1024)); // 50MB
                connector.setProperty("maxHttpHeaderSize", "8192");

                // üî• –°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê - —Ä–µ—à–∞–µ—Ç FileCountLimitExceededException
                connector.setProperty("maxFileCount", "50");  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 50!

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                connector.setProperty("maxThreads", "200");
                connector.setProperty("acceptCount", "100");
                connector.setProperty("connectionTimeout", "30000");
                connector.setProperty("maxSwallowSize", String.valueOf(10 * 1024 * 1024)); // 10MB
                connector.setProperty("allowTrace", "false");
                connector.setProperty("asyncTimeout", "60000");

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è multipart
                connector.setProperty("maxSavePostSize", String.valueOf(50 * 1024 * 1024));
                connector.setProperty("processorCache", "200");
                connector.setProperty("maxParameterCount", "10000");

                log.info("‚úÖ Tomcat –Ω–∞—Å—Ç—Ä–æ–µ–Ω: maxFileCount=50, maxPostSize=50MB, maxParameterCount=10000");
            });

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            factory.addContextCustomizers(context -> {
                context.setAllowCasualMultipartParsing(true);
                log.info("‚úÖ –í–∫–ª—é—á–µ–Ω casual multipart parsing");
            });
        };
    }

    /**
     * üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ MultipartConfig
     */
    @Bean
    @Primary
    public MultipartConfigElement forceMultipartConfigElement() {
        MultipartConfigFactory factory = new MultipartConfigFactory();

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã
        factory.setMaxFileSize(DataSize.ofMegabytes(10));
        factory.setMaxRequestSize(DataSize.ofMegabytes(50));
        factory.setFileSizeThreshold(DataSize.ofKilobytes(0));

        log.info("‚úÖ MultipartConfig –Ω–∞—Å—Ç—Ä–æ–µ–Ω: maxFileSize=10MB, maxRequestSize=50MB");

        return factory.createMultipartConfig();
    }
}