package com.example.foodfrontendservice.Client.Fallback;//package com.example.foodfrontendservice.Client.Fallback;
//import com.example.foodfrontendservice.Client.UserServiceClient;
//import com.example.foodfrontendservice.dto.AuthResponseDto;
//import com.example.foodfrontendservice.dto.LoginRequestDto;
//import com.example.foodfrontendservice.dto.UserRegistrationDto;
//import com.example.foodfrontendservice.dto.UserResponseDto;
//import com.example.foodfrontendservice.enums.UserRole;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.http.ResponseEntity;
//import org.springframework.stereotype.Component;
//
//import java.util.Arrays;
//import java.util.List;
//
//
//@Component("userServiceClientFallback")
//@Slf4j
//public class UserServiceClientFallback implements UserServiceClient {
//
//    @Override
//    public ResponseEntity<List<UserRole>> getAvailableRoles() {
//        log.warn("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–æ–ª–∏");
//        return ResponseEntity.ok(Arrays.asList(UserRole.BASE_USER, UserRole.BUSINESS_USER, UserRole.COURIER));
//    }
//
//    @Override
//    public ResponseEntity<UserResponseDto> register(UserRegistrationDto registrationDto) {
//        log.error("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
//        throw new RuntimeException("–°–µ—Ä–≤–∏—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
//    }
//
//    @Override
//    public ResponseEntity<Boolean> checkEmailAvailability(String email) {
//        log.warn("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
//        return ResponseEntity.ok(true);
//    }
//
//    @Override
//    public ResponseEntity<AuthResponseDto> login(LoginRequestDto loginRequest) {
//        log.error("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
//        throw new RuntimeException("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
//    }
//
//    @Override
//    public ResponseEntity<UserResponseDto> getCurrentUser(String authHeader) {
//        log.error("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ");
//        throw new RuntimeException("–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
//    }
//
//    @Override
//    public ResponseEntity<Boolean> validateToken(String authHeader) {
//        log.warn("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
//        return ResponseEntity.ok(false);
//    }
//
//    @Override
//    public ResponseEntity<String> testAuthService() {
//        log.warn("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
//        return ResponseEntity.ok("‚ùå User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (fallback)");
//    }
//
//    @Override
//    public ResponseEntity<String> testRegistrationService() {
//        log.warn("Registration Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
//        return ResponseEntity.ok("‚ùå Registration Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (fallback)");
//    }
//}


import com.example.foodfrontendservice.Client.UserServiceClient;
import com.example.foodfrontendservice.dto.*;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.category.ApiResponse;
import com.example.foodfrontendservice.enums.UserRole;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.List;

/**
 * üõ°Ô∏è Fallback –¥–ª—è UserServiceClient
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
 */
@Component
@Slf4j
public class UserServiceClientFallback implements UserServiceClient {

    // ========== –ú–ï–ñ–°–ï–†–í–ò–°–ù–´–ï ENDPOINTS ==========



    @Override
    public AuthResponseDto login(LoginRequestDto loginRequest) {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è login {}", loginRequest.getEmail());
        throw new RuntimeException("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    }

    @Override
    public UserResponseDto getUserByToken(String authHeader) {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è getUserByToken");
        throw new RuntimeException("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }

    @Override
    public Boolean validateTokenSimple(String authHeader) {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è validateTokenSimple");
        return false; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º
    }

    // ========== –ö–õ–ò–ï–ù–¢–°–ö–ò–ï ENDPOINTS ==========

    @Override
    public ResponseEntity<ApiResponse<UserResponseDto>> getCurrentUser(String authHeader) {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è getCurrentUser");

        ApiResponse<UserResponseDto> response = ApiResponse.<UserResponseDto>builder()
                .success(false)
                .message("–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                .build();

        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(response);
    }

    @Override
    public ResponseEntity<ApiResponse<TokenValidationDto>> validateToken(String authHeader) {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è validateToken");

        TokenValidationDto validation = TokenValidationDto.builder()
                .valid(false)
                .build();

        ApiResponse<TokenValidationDto> response = ApiResponse.<TokenValidationDto>builder()
                .success(true)
                .message("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–æ–∫–µ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º")
                .data(validation)
                .build();

        return ResponseEntity.ok(response);
    }

    @Override
    public ResponseEntity<ApiResponse<LogoutResponseDto>> logout(String authHeader) {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è logout");

        LogoutResponseDto logoutResponse = LogoutResponseDto.builder()
                .success(true) // –í—Å—ë —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                .message("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
                .logoutTime(LocalDateTime.now())
                .build();

        ApiResponse<LogoutResponseDto> response = ApiResponse.<LogoutResponseDto>builder()
                .success(true)
                .message("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω")
                .data(logoutResponse)
                .build();

        return ResponseEntity.ok(response);
    }

    @Override
    public ResponseEntity<ApiResponse<ServiceHealthDto>> testAuthService() {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è testAuthService");

        ServiceHealthDto health = ServiceHealthDto.builder()
                .serviceName("Auth Service")
                .status("DOWN")
                .message("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                .version("unknown")
                .timestamp(LocalDateTime.now())
                .build();

        ApiResponse<ServiceHealthDto> response = ApiResponse.<ServiceHealthDto>builder()
                .success(false)
                .message("Auth Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                .data(health)
                .build();

        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(response);
    }

    // ========== REGISTRATION ENDPOINTS ==========

    @Override
    public ResponseEntity<List<UserRole>> getAvailableRoles() {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è getAvailableRoles");

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏ –∫–∞–∫ fallback
        List<UserRole> defaultRoles = List.of(UserRole.BASE_USER, UserRole.BUSINESS_USER);
        return ResponseEntity.ok(defaultRoles);
    }

    @Override
    public ResponseEntity<UserResponseDto> register(UserRegistrationDto registrationDto) {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è register {}", registrationDto.getEmail());
        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).build();
    }

    @Override
    public ResponseEntity<Boolean> checkEmailAvailability(String email) {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è checkEmailAvailability {}", email);

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å—á–∏—Ç–∞–µ–º email –∑–∞–Ω—è—Ç—ã–º
        return ResponseEntity.ok(false);
    }

    @Override
    public ResponseEntity<String> testRegistrationService() {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è testRegistrationService");
        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE)
                .body("Registration Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }



    @Override
    public ResponseEntity<UserResponseDto> getUserByTokenWithResponse(String authHeader) {
        log.error("üî• FALLBACK: User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è getUserByTokenWithResponse");
        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).build();
    }
}