package com.example.foodfrontendservice.Client.Fallback;

import com.example.foodfrontendservice.Client.StoreServiceClient;
import com.example.foodfrontendservice.dto.PRODUCTSERVICE.store.CreateStoreRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import com.example.foodfrontendservice.dto.PRODUCTSERVICE.*;
import org.springframework.web.multipart.MultipartFile;


@Component
@Slf4j
public class StoreServiceClientFallback implements StoreServiceClient {




    @Override
    public ResponseEntity<StoreUIResponseWrapper> getStoresForUI() {
        log.warn("üî• Fallback: Store service unavailable for UI stores");
        return ResponseEntity.ok(StoreUIResponseWrapper.error("–°–µ—Ä–≤–∏—Å –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"));
    }

    @Override
    public ResponseEntity<StoreBriefResponseWrapper> getStoresBrief(int page, int size) {
        log.warn("üî• Fallback: Store service unavailable for brief stores - page={}, size={}", page, size);
        return ResponseEntity.ok(StoreBriefResponseWrapper.error("–°–µ—Ä–≤–∏—Å –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"));
    }

    @Override
    public ResponseEntity<StoreResponseWrapper> getActiveStores(int page, int size) {
        log.warn("üî• Fallback: Store service unavailable for active stores - page={}, size={}", page, size);
        return ResponseEntity.ok(StoreResponseWrapper.error("–°–µ—Ä–≤–∏—Å –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"));
    }


    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Fallback –¥–ª—è @ModelAttribute –º–µ—Ç–æ–¥–∞
     */
    @Override
    public StoreResponseDto createStore(CreateStoreRequest createStoreRequest) {
        log.error("‚ùå Fallback: Product Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {}",
                createStoreRequest != null ? createStoreRequest.getName() : "unknown");

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å ID = -1 –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–∫–∏ fallback
        StoreResponseDto fallbackResponse = new StoreResponseDto();
        fallbackResponse.setId(-1L); // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä fallback
        fallbackResponse.setName(createStoreRequest != null ? createStoreRequest.getName() : "Error");
        // –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        return fallbackResponse;
    }

    @Override
    public ResponseEntity<StoreResponseWrapper> getMyStores(int page, int size) {
        log.warn("üî• Fallback: Store service unavailable for user stores - page={}, size={}", page, size);
        return ResponseEntity.ok(StoreResponseWrapper.error("–í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"));
    }
}