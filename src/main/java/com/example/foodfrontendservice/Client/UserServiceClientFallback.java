package com.example.foodfrontendservice.config;

import com.example.foodfrontendservice.Client.UserServiceClient;
import com.example.foodfrontendservice.dto.UserRegistrationDto;
import com.example.foodfrontendservice.dto.UserResponseDto;
import com.example.foodfrontendservice.enums.UserRole;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.List;

/**
 * üõ°Ô∏è Fallback –¥–ª—è UserServiceClient –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ User Service
 */
@Component
@Slf4j
public class UserServiceClientFallback implements UserServiceClient {

    @Override
    public ResponseEntity<List<UserRole>> getAvailableRoles() {
        log.warn("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–æ–ª–∏");
        return ResponseEntity.ok(Arrays.asList(UserRole.BASE_USER, UserRole.BUSINESS_USER, UserRole.COURIER));
    }

    @Override
    public ResponseEntity<UserResponseDto> register(UserRegistrationDto registrationDto) {
        log.error("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
        throw new RuntimeException("–°–µ—Ä–≤–∏—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }

    @Override
    public ResponseEntity<Boolean> checkEmailAvailability(String email) {
        log.warn("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
        return ResponseEntity.ok(true); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ email –¥–æ—Å—Ç—É–ø–µ–Ω
    }

    @Override
    public ResponseEntity<AuthResponseDto> login(LoginRequestDto loginRequest) {
        log.error("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
        throw new RuntimeException("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }

    @Override
    public ResponseEntity<UserResponseDto> getCurrentUser(String authHeader) {
        log.error("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ");
        throw new RuntimeException("–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }

    @Override
    public ResponseEntity<Boolean> validateToken(String authHeader) {
        log.warn("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
        return ResponseEntity.ok(false);
    }

    @Override
    public ResponseEntity<String> testAuthService() {
        log.warn("User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        return ResponseEntity.ok("‚ùå User Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (fallback)");
    }

    @Override
    public ResponseEntity<String> testRegistrationService() {
        log.warn("Registration Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        return ResponseEntity.ok("‚ùå Registration Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (fallback)");
    }
}